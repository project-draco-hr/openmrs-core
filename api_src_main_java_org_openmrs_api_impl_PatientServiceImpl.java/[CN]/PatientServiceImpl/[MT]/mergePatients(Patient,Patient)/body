{
  log.debug("Merging patients: (preferred)" + preferred.getPatientId() + ", (notPreferred) "+ notPreferred.getPatientId());
  if (preferred.getPatientId().equals(notPreferred.getPatientId())) {
    log.debug("Merge operation cancelled: Cannot merge user" + preferred.getPatientId() + " to self");
    throw new APIException("Merge operation cancelled: Cannot merge user " + preferred.getPatientId() + " to self");
  }
  PersonMergeLogData mergedData=new PersonMergeLogData();
  mergeVisits(preferred,notPreferred,mergedData);
  mergeEncounters(preferred,notPreferred,mergedData);
  mergeProgramEnrolments(preferred,notPreferred,mergedData);
  mergeRelationships(preferred,notPreferred,mergedData);
  mergeObservationsNotContainedInEncounters(preferred,notPreferred,mergedData);
  mergeIdentifiers(preferred,notPreferred,mergedData);
  mergeNames(preferred,notPreferred,mergedData);
  mergeAddresses(preferred,notPreferred,mergedData);
  mergePersonAttributes(preferred,notPreferred,mergedData);
  mergeGenderInformation(preferred,notPreferred,mergedData);
  mergeDateOfBirth(preferred,notPreferred,mergedData);
  mergeDateOfDeath(preferred,notPreferred,mergedData);
  Context.getPatientService().voidPatient(notPreferred,"Merged with patient #" + preferred.getPatientId());
  Context.getPersonService().voidPerson(notPreferred,"The patient corresponding to this person has been voided and Merged with patient #" + preferred.getPatientId());
  changeUserAssociations(preferred,notPreferred,mergedData);
  savePatient(preferred);
  PersonMergeLog personMergeLog=new PersonMergeLog();
  personMergeLog.setWinner(preferred);
  personMergeLog.setLoser(notPreferred);
  personMergeLog.setPersonMergeLogData(mergedData);
  Context.getPersonService().savePersonMergeLog(personMergeLog);
}
