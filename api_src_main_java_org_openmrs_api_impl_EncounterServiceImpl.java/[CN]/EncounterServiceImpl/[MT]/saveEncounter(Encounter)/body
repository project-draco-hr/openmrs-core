{
  if (encounter.getEncounterId() == null) {
    EncounterVisitHandler encounterVisitHandler=getActiveEncounterVisitHandler();
    if (encounterVisitHandler != null) {
      encounterVisitHandler.beforeCreateEncounter(encounter);
    }
  }
  Errors errors=new BindException(encounter,"encounter");
  new EncounterValidator().validate(encounter,errors);
  if (errors.hasErrors()) {
    StringBuilder sb=new StringBuilder(Context.getMessageSourceService().getMessage("error.foundValidationErrors") + ": [");
    boolean isFirst=true;
    for (    ObjectError error : errors.getAllErrors()) {
      if (isFirst) {
        sb.append(Context.getMessageSourceService().getMessage(error.getCode()));
        isFirst=false;
      }
 else       sb.append(", ").append(Context.getMessageSourceService().getMessage(error.getCode()));
    }
    throw new APIException(sb.toString() + "]");
  }
  boolean isNewEncounter=false;
  Date newDate=encounter.getEncounterDatetime();
  Date originalDate=null;
  Location newLocation=encounter.getLocation();
  Location originalLocation=null;
  if (encounter.getEncounterId() == null) {
    isNewEncounter=true;
    Context.requirePrivilege(PrivilegeConstants.ADD_ENCOUNTERS);
  }
 else {
    Context.requirePrivilege(PrivilegeConstants.EDIT_ENCOUNTERS);
  }
  if (!isNewEncounter) {
    originalDate=dao.getSavedEncounterDatetime(encounter);
    if (encounter.getLocation() != null)     originalLocation=dao.getSavedEncounterLocation(encounter);
    Patient p=encounter.getPatient();
    for (    Obs obs : encounter.getAllObs(true)) {
      if (OpenmrsUtil.compare(originalDate,newDate) != 0) {
        if (OpenmrsUtil.compare(obs.getObsDatetime(),originalDate) == 0) {
          obs.setObsDatetime(newDate);
        }
      }
      if (!OpenmrsUtil.nullSafeEquals(newLocation,originalLocation)) {
        if (obs.getLocation().equals(originalLocation)) {
          obs.setLocation(newLocation);
        }
      }
      if (!obs.getPerson().getPersonId().equals(p.getPatientId())) {
        obs.setPerson(p);
      }
    }
    for (    Order o : encounter.getOrders()) {
      if (!p.equals(o.getPatient())) {
        o.setPatient(p);
      }
    }
  }
  dao.saveEncounter(encounter);
  return encounter;
}
