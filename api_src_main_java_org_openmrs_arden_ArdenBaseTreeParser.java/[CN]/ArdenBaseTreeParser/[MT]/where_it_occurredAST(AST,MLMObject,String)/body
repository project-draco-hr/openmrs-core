{
  String s="";
  AST m=null;
  AST n=null;
  AST i=null;
  String a, b;
  try {
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case COUNT:
case NOT:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EXIST:
case EXISTS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case TRUE:
case FALSE:
case OF:
case WITHIN:
case ANY:
case NULL:
case INTLIT:
case ID:
case STRING_LITERAL:
case ACTION_OP:
case TERM_LITERAL:
{
{
switch (_t.getType()) {
case WITHIN:
{
              match(_t,WITHIN);
              _t=_t.getNextSibling();
              obj.setWhere("withinPreceding",key);
{
                match(_t,PAST);
                _t=_t.getNextSibling();
              }
{
                m=(AST)_t;
                match(_t,INTLIT);
                _t=_t.getNextSibling();
                n=_t == ASTNULL ? null : (AST)_t;
                duration_op(_t);
                _t=_retTree;
              }
              obj.setDuration("past",m.getText(),n.getText(),key);
              System.err.println("Duration Clause - " + m.getText() + " "+ n.getText());
              break;
            }
case COUNT:
case NOT:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EXIST:
case EXISTS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case TRUE:
case FALSE:
case OF:
case ANY:
case NULL:
case INTLIT:
case ID:
case STRING_LITERAL:
case ACTION_OP:
case TERM_LITERAL:
{
            a=exprAST(_t,"data",obj);
            _t=_retTree;
            match(_t,TO);
            _t=_t.getNextSibling();
            b=exprAST(_t,"data",obj);
            _t=_retTree;
            break;
          }
default :
{
          throw new NoViableAltException(_t);
        }
    }
  }
  break;
}
case AFTER:
{
{
  match(_t,AFTER);
  _t=_t.getNextSibling();
}
{
  i=(AST)_t;
  match(_t,ID);
  _t=_t.getNextSibling();
}
System.err.println("Variable = " + i.getText());
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
return s;
}
