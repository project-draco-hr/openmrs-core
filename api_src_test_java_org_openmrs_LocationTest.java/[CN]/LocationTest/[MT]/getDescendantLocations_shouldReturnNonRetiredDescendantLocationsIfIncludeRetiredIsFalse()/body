{
  Location rootLocation=new Location();
  Location nonRetiredLocation=new Location();
  Location retiredLocation=new Location();
  retiredLocation.setRetired(true);
  Location firstChildOfNonRetiredLocation=new Location();
  Location secondChildOfNonRetiredLocation=new Location();
  Location firstChildOfRetiredLocation=new Location();
  rootLocation.setChildLocations(new HashSet<Location>(Arrays.asList(nonRetiredLocation,retiredLocation)));
  nonRetiredLocation.setChildLocations(new HashSet<Location>(Arrays.asList(firstChildOfNonRetiredLocation,secondChildOfNonRetiredLocation)));
  retiredLocation.setChildLocations(new HashSet<Location>(Arrays.asList(firstChildOfRetiredLocation)));
  firstChildOfNonRetiredLocation.setChildLocations(new HashSet<Location>());
  secondChildOfNonRetiredLocation.setChildLocations(new HashSet<Location>());
  firstChildOfRetiredLocation.setChildLocations(new HashSet<Location>());
  Set<Location> descendantLocations=rootLocation.getDescendantLocations(false);
  Set<Location> expectedLocations=new HashSet<Location>(Arrays.asList(nonRetiredLocation,firstChildOfNonRetiredLocation,secondChildOfNonRetiredLocation));
  Assert.assertThat(descendantLocations,equalTo(expectedLocations));
}
