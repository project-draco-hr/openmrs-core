{
  Integer startId=null;
  Integer endId=null;
  String queueType="";
  HttpSession httpSession=request.getSession();
  Context context=getContext(httpSession);
  if (context == null) {
    httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.session.expired");
    response.sendRedirect(request.getContextPath() + "/logout");
    return;
  }
  try {
    startId=Integer.parseInt(request.getParameter("startId"));
    endId=Integer.parseInt(request.getParameter("endId"));
  }
 catch (  NumberFormatException e) {
    log.warn("Invalid start or end id parameter",e);
    return;
  }
  queueType=request.getParameter("queueType");
  response.setHeader("Content-Type","application/zip");
  response.setHeader("Content-Disposition","attachment; filename=formEntryQueue-" + queueType + "-("+ startId+ "-"+ endId+ ").zip");
  ZipOutputStream zos=new ZipOutputStream(response.getOutputStream());
  FormEntryService fs=context.getFormEntryService();
  ZipEntry zipEntry=null;
  while (startId <= endId) {
    String formData="";
    if (queueType.equals("pending")) {
      FormEntryQueue queue=fs.getFormEntryQueue(startId);
      if (queue != null)       formData=queue.getFormData();
    }
 else     if (queueType.equals("archive")) {
      FormEntryArchive queue=fs.getFormEntryArchive(startId);
      if (queue != null)       formData=queue.getFormData();
    }
 else     if (queueType.equals("error")) {
      FormEntryError queue=fs.getFormEntryError(startId);
      if (queue != null)       formData=queue.getFormData();
    }
    byte[] uncompressedBytes=formData.getBytes();
    zipEntry=new ZipEntry("formEntryQueue-" + queueType + "-"+ startId+ ".xml");
    zos.putNextEntry(zipEntry);
    zos.write(uncompressedBytes,0,uncompressedBytes.length);
    zos.closeEntry();
    startId+=1;
    fs.garbageCollect();
  }
  zos.close();
}
