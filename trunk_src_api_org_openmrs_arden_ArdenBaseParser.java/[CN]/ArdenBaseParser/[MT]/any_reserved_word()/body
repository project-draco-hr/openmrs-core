{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST any_reserved_word_AST=null;
  try {
switch (LA(1)) {
case AND:
{
        AST tmp264_AST=null;
        tmp264_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp264_AST);
        match(AND);
        any_reserved_word_AST=(AST)currentAST.root;
        break;
      }
case IS:
{
      AST tmp265_AST=null;
      tmp265_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp265_AST);
      match(IS);
      any_reserved_word_AST=(AST)currentAST.root;
      break;
    }
case ARE:
{
    AST tmp266_AST=null;
    tmp266_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp266_AST);
    match(ARE);
    any_reserved_word_AST=(AST)currentAST.root;
    break;
  }
case WAS:
{
  AST tmp267_AST=null;
  tmp267_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp267_AST);
  match(WAS);
  any_reserved_word_AST=(AST)currentAST.root;
  break;
}
case WERE:
{
AST tmp268_AST=null;
tmp268_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp268_AST);
match(WERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case COUNT:
{
AST tmp269_AST=null;
tmp269_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp269_AST);
match(COUNT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IN:
{
AST tmp270_AST=null;
tmp270_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp270_AST);
match(IN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LESS:
{
AST tmp271_AST=null;
tmp271_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp271_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THE:
{
AST tmp272_AST=null;
tmp272_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp272_AST);
match(THE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THAN:
{
AST tmp273_AST=null;
tmp273_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp273_AST);
match(THAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FROM:
{
AST tmp274_AST=null;
tmp274_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp274_AST);
match(FROM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BEFORE:
{
AST tmp275_AST=null;
tmp275_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp275_AST);
match(BEFORE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AFTER:
{
AST tmp276_AST=null;
tmp276_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp276_AST);
match(AFTER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AGO:
{
AST tmp277_AST=null;
tmp277_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp277_AST);
match(AGO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AT:
{
AST tmp278_AST=null;
tmp278_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp278_AST);
match(AT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OF:
{
AST tmp279_AST=null;
tmp279_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp279_AST);
match(OF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WRITE:
{
AST tmp280_AST=null;
tmp280_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp280_AST);
match(WRITE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BE:
{
AST tmp281_AST=null;
tmp281_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp281_AST);
match(BE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LET:
{
AST tmp282_AST=null;
tmp282_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp282_AST);
match(LET);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEAR:
{
AST tmp283_AST=null;
tmp283_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp283_AST);
match(YEAR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEARS:
{
AST tmp284_AST=null;
tmp284_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp284_AST);
match(YEARS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IF:
{
AST tmp285_AST=null;
tmp285_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp285_AST);
match(IF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IT:
{
AST tmp286_AST=null;
tmp286_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp286_AST);
match(IT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEY:
{
AST tmp287_AST=null;
tmp287_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp287_AST);
match(THEY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NOT:
{
AST tmp288_AST=null;
tmp288_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp288_AST);
match(NOT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OR:
{
AST tmp289_AST=null;
tmp289_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp289_AST);
match(OR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEN:
{
AST tmp290_AST=null;
tmp290_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp290_AST);
match(THEN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTH:
{
AST tmp291_AST=null;
tmp291_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp291_AST);
match(MONTH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTHS:
{
AST tmp292_AST=null;
tmp292_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp292_AST);
match(MONTHS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIME:
{
AST tmp293_AST=null;
tmp293_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp293_AST);
match(TIME);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIMES:
{
AST tmp294_AST=null;
tmp294_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp294_AST);
match(TIMES);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITHIN:
{
AST tmp295_AST=null;
tmp295_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp295_AST);
match(WITHIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case READ:
{
AST tmp296_AST=null;
tmp296_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp296_AST);
match(READ);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MINIMUM:
{
AST tmp297_AST=null;
tmp297_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp297_AST);
match(MINIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MIN:
{
AST tmp298_AST=null;
tmp298_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp298_AST);
match(MIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAXIMUM:
{
AST tmp299_AST=null;
tmp299_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp299_AST);
match(MAXIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAX:
{
AST tmp300_AST=null;
tmp300_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp300_AST);
match(MAX);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LAST:
{
AST tmp301_AST=null;
tmp301_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp301_AST);
match(LAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
AST tmp302_AST=null;
tmp302_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp302_AST);
match(FIRST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
AST tmp303_AST=null;
tmp303_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp303_AST);
match(EARLIEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
AST tmp304_AST=null;
tmp304_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp304_AST);
match(LATEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EVENT:
{
AST tmp305_AST=null;
tmp305_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp305_AST);
match(EVENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WHERE:
{
AST tmp306_AST=null;
tmp306_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp306_AST);
match(WHERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXIST:
{
AST tmp307_AST=null;
tmp307_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp307_AST);
match(EXIST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXISTS:
{
AST tmp308_AST=null;
tmp308_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp308_AST);
match(EXISTS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PAST:
{
AST tmp309_AST=null;
tmp309_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp309_AST);
match(PAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVERAGE:
{
AST tmp310_AST=null;
tmp310_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp310_AST);
match(AVERAGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVG:
{
AST tmp311_AST=null;
tmp311_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp311_AST);
match(AVG);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SUM:
{
AST tmp312_AST=null;
tmp312_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp312_AST);
match(SUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MEDIAN:
{
AST tmp313_AST=null;
tmp313_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp313_AST);
match(MEDIAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CONCLUDE:
{
AST tmp314_AST=null;
tmp314_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp314_AST);
match(CONCLUDE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSE:
{
AST tmp315_AST=null;
tmp315_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp315_AST);
match(ELSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSEIF:
{
AST tmp316_AST=null;
tmp316_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp316_AST);
match(ELSEIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ENDIF:
{
AST tmp317_AST=null;
tmp317_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp317_AST);
match(ENDIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TRUE:
{
AST tmp318_AST=null;
tmp318_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp318_AST);
match(TRUE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FALSE:
{
AST tmp319_AST=null;
tmp319_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp319_AST);
match(FALSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DATA:
{
AST tmp320_AST=null;
tmp320_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp320_AST);
match(DATA);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LOGIC:
{
AST tmp321_AST=null;
tmp321_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp321_AST);
match(LOGIC);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ACTION:
{
AST tmp322_AST=null;
tmp322_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp322_AST);
match(ACTION);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CALL:
{
AST tmp323_AST=null;
tmp323_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp323_AST);
match(CALL);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITH:
{
AST tmp324_AST=null;
tmp324_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp324_AST);
match(WITH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TO:
{
AST tmp325_AST=null;
tmp325_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp325_AST);
match(TO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ANY:
{
AST tmp326_AST=null;
tmp326_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp326_AST);
match(ANY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_28);
}
 else {
throw ex;
}
}
returnAST=any_reserved_word_AST;
}
