{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expr_power_AST=null;
  try {
    expr_duration();
    astFactory.addASTChild(currentAST,returnAST);
{
      _loop306:       do {
        if (((LA(1) >= FROM && LA(1) <= AFTER))) {
{
switch (LA(1)) {
case BEFORE:
{
                AST tmp555_AST=null;
                tmp555_AST=astFactory.create(LT(1));
                astFactory.addASTChild(currentAST,tmp555_AST);
                match(BEFORE);
                break;
              }
case AFTER:
{
              AST tmp556_AST=null;
              tmp556_AST=astFactory.create(LT(1));
              astFactory.addASTChild(currentAST,tmp556_AST);
              match(AFTER);
              break;
            }
case FROM:
{
            AST tmp557_AST=null;
            tmp557_AST=astFactory.create(LT(1));
            astFactory.addASTChild(currentAST,tmp557_AST);
            match(FROM);
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  expr_duration();
  astFactory.addASTChild(currentAST,returnAST);
}
 else {
  break _loop306;
}
}
 while (true);
}
{
switch (LA(1)) {
case AGO:
{
  AST tmp558_AST=null;
  tmp558_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp558_AST);
  match(AGO);
  break;
}
case EOF:
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case AT:
case IF:
case NOT:
case OR:
case THEN:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case WHERE:
case CONCLUDE:
case ELSE:
case ELSEIF:
case ENDIF:
case SEMI:
case ID:
case LPAREN:
case RPAREN:
case 115:
case 116:
case COMMA:
case ARDEN_CURLY_BRACKETS:
case EQUALS:
case LITERAL_EQ:
case LT:
case LITERAL_LT:
case GT:
case LITERAL_GT:
case LTE:
case LITERAL_LE:
case GTE:
case LITERAL_GE:
case NE:
case LITERAL_NE:
case ACTION_OP:
case LITERAL_MERGE:
case LITERAL_SORT:
case LITERAL_SEQTO:
case 174:
case 175:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
expr_power_AST=(AST)currentAST.root;
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_70);
}
 else {
throw ex;
}
}
returnAST=expr_power_AST;
}
