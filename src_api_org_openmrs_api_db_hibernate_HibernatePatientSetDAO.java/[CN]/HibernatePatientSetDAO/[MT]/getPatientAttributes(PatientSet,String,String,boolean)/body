{
  Session session=HibernateUtil.currentSession();
  Map<Integer,Object> ret=new HashMap<Integer,Object>();
  Set<Integer> ids=patients.getPatientIds();
  className="org.openmrs." + className;
  Criteria criteria=session.createCriteria(className);
  if (className.equals("org.openmrs.Patient"))   criteria=session.createCriteria(className,"patient");
  criteria.setProjection(Projections.projectionList().add(Projections.property("patient.patientId")).add(Projections.property(property)));
  criteria.add(Restrictions.in("patient.patientId",ids));
  criteria.addOrder(org.hibernate.criterion.Order.desc("voided"));
  try {
    boolean hasPreferred=false;
    for (    Field f : Class.forName(className).getDeclaredFields()) {
      if (f.getName().equals("preferred"))       hasPreferred=true;
    }
    if (hasPreferred)     criteria.addOrder(org.hibernate.criterion.Order.desc("preferred"));
  }
 catch (  ClassNotFoundException e) {
    log.warn("Class not found: " + className);
  }
  criteria.addOrder(org.hibernate.criterion.Order.desc("dateCreated"));
  List<Object[]> rows=criteria.list();
  if (returnAll) {
    for (    Object[] row : rows) {
      Integer ptId=(Integer)row[0];
      Object columnValue=row[1];
      if (!ret.containsKey(ptId)) {
        Object[] arr={columnValue};
        ret.put(ptId,arr);
      }
 else {
        Object[] oldArr=(Object[])ret.get(ptId);
        Object[] newArr=new Object[oldArr.length + 1];
        System.arraycopy(oldArr,0,newArr,0,oldArr.length);
        newArr[oldArr.length]=columnValue;
        ret.put(ptId,newArr);
      }
    }
  }
 else {
    for (    Object[] row : rows) {
      Integer ptId=(Integer)row[0];
      Object columnValue=row[1];
      if (!ret.containsKey(ptId))       ret.put(ptId,columnValue);
    }
  }
  return ret;
}
