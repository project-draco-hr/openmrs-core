{
  Map<Integer,Object> ret=new HashMap<Integer,Object>();
  Collection<Integer> ids=patients.getPatientIds();
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Encounter.class);
  criteria.setCacheMode(CacheMode.IGNORE);
  criteria.add(Restrictions.in("patient.personId",ids));
  criteria.add(Restrictions.eq("voided",false));
  if (encTypes != null && encTypes.size() > 0)   criteria.add(Restrictions.in("encounterType",encTypes));
  criteria.setProjection(Projections.projectionList().add(Projections.property("patient.personId")).add(Projections.property(attr)));
  criteria.addOrder(org.hibernate.criterion.Order.desc("patient.personId"));
  if (earliestFirst)   criteria.addOrder(org.hibernate.criterion.Order.asc("encounterDatetime"));
 else   criteria.addOrder(org.hibernate.criterion.Order.desc("encounterDatetime"));
  List<Object[]> attrs=criteria.list();
  for (  Object[] row : attrs) {
    Integer ptId=(Integer)row[0];
    if (!ret.containsKey(ptId))     ret.put(ptId,row[1]);
  }
  return ret;
}
