{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expr_duration_AST=null;
  try {
    expr_function();
    astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case YEAR:
case YEARS:
case DAYS:
case DAY:
case MONTH:
case MONTHS:
case WEEK:
case WEEKS:
case SECOND:
case LITERAL_hour:
case LITERAL_hours:
case LITERAL_minute:
case LITERAL_minutes:
case LITERAL_seconds:
{
          duration_op();
          astFactory.addASTChild(currentAST,returnAST);
          break;
        }
case EOF:
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case FROM:
case BEFORE:
case AFTER:
case AGO:
case AT:
case OR:
case THEN:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case WHERE:
case CONCLUDE:
case CALL:
case SEMI:
case ID:
case GT:
case GTE:
case LT:
case LTE:
case COMMA:
case LPAREN:
case RPAREN:
case ARDEN_CURLY_BRACKETS:
case EQUALS:
case LITERAL_EQ:
case LITERAL_LT:
case LITERAL_GT:
case LITERAL_LE:
case LITERAL_GE:
case NE:
case LITERAL_NE:
case ACTION_OP:
case LITERAL_MERGE:
case LITERAL_SORT:
case LITERAL_SEQTO:
case 178:
case 179:
case 180:
case 181:
{
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
expr_duration_AST=(AST)currentAST.root;
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_47);
}
 else {
throw ex;
}
}
returnAST=expr_duration_AST;
}
