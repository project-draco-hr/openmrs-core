{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST duration_op_AST=null;
  try {
switch (LA(1)) {
case YEAR:
{
        AST tmp386_AST=null;
        tmp386_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp386_AST);
        match(YEAR);
        duration_op_AST=(AST)currentAST.root;
        break;
      }
case YEARS:
{
      AST tmp387_AST=null;
      tmp387_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp387_AST);
      match(YEARS);
      duration_op_AST=(AST)currentAST.root;
      break;
    }
case MONTH:
{
    AST tmp388_AST=null;
    tmp388_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp388_AST);
    match(MONTH);
    duration_op_AST=(AST)currentAST.root;
    break;
  }
case MONTHS:
{
  AST tmp389_AST=null;
  tmp389_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp389_AST);
  match(MONTHS);
  duration_op_AST=(AST)currentAST.root;
  break;
}
case WEEK:
{
AST tmp390_AST=null;
tmp390_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp390_AST);
match(WEEK);
duration_op_AST=(AST)currentAST.root;
break;
}
case WEEKS:
{
AST tmp391_AST=null;
tmp391_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp391_AST);
match(WEEKS);
duration_op_AST=(AST)currentAST.root;
break;
}
case DAY:
{
AST tmp392_AST=null;
tmp392_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp392_AST);
match(DAY);
duration_op_AST=(AST)currentAST.root;
break;
}
case DAYS:
{
AST tmp393_AST=null;
tmp393_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp393_AST);
match(DAYS);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_hour:
{
AST tmp394_AST=null;
tmp394_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp394_AST);
match(LITERAL_hour);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_hours:
{
AST tmp395_AST=null;
tmp395_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp395_AST);
match(LITERAL_hours);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_minute:
{
AST tmp396_AST=null;
tmp396_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp396_AST);
match(LITERAL_minute);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_minutes:
{
AST tmp397_AST=null;
tmp397_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp397_AST);
match(LITERAL_minutes);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_second:
{
AST tmp398_AST=null;
tmp398_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp398_AST);
match(LITERAL_second);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_seconds:
{
AST tmp399_AST=null;
tmp399_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp399_AST);
match(LITERAL_seconds);
duration_op_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_49);
}
 else {
throw ex;
}
}
returnAST=duration_op_AST;
}
