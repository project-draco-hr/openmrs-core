{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST duration_op_AST=null;
  try {
switch (LA(1)) {
case YEAR:
{
        AST tmp436_AST=null;
        tmp436_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp436_AST);
        match(YEAR);
        duration_op_AST=(AST)currentAST.root;
        break;
      }
case YEARS:
{
      AST tmp437_AST=null;
      tmp437_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp437_AST);
      match(YEARS);
      duration_op_AST=(AST)currentAST.root;
      break;
    }
case MONTH:
{
    AST tmp438_AST=null;
    tmp438_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp438_AST);
    match(MONTH);
    duration_op_AST=(AST)currentAST.root;
    break;
  }
case MONTHS:
{
  AST tmp439_AST=null;
  tmp439_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp439_AST);
  match(MONTHS);
  duration_op_AST=(AST)currentAST.root;
  break;
}
case WEEK:
{
AST tmp440_AST=null;
tmp440_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp440_AST);
match(WEEK);
duration_op_AST=(AST)currentAST.root;
break;
}
case WEEKS:
{
AST tmp441_AST=null;
tmp441_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp441_AST);
match(WEEKS);
duration_op_AST=(AST)currentAST.root;
break;
}
case DAY:
{
AST tmp442_AST=null;
tmp442_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp442_AST);
match(DAY);
duration_op_AST=(AST)currentAST.root;
break;
}
case DAYS:
{
AST tmp443_AST=null;
tmp443_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp443_AST);
match(DAYS);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_hour:
{
AST tmp444_AST=null;
tmp444_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp444_AST);
match(LITERAL_hour);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_hours:
{
AST tmp445_AST=null;
tmp445_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp445_AST);
match(LITERAL_hours);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_minute:
{
AST tmp446_AST=null;
tmp446_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp446_AST);
match(LITERAL_minute);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_minutes:
{
AST tmp447_AST=null;
tmp447_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp447_AST);
match(LITERAL_minutes);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_second:
{
AST tmp448_AST=null;
tmp448_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp448_AST);
match(LITERAL_second);
duration_op_AST=(AST)currentAST.root;
break;
}
case LITERAL_seconds:
{
AST tmp449_AST=null;
tmp449_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp449_AST);
match(LITERAL_seconds);
duration_op_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_49);
}
 else {
throw ex;
}
}
returnAST=duration_op_AST;
}
