{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST text_AST=null;
  try {
switch (LA(1)) {
case ID:
{
        AST tmp204_AST=null;
        tmp204_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp204_AST);
        match(ID);
        text_AST=(AST)currentAST.root;
        break;
      }
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case COUNT:
case IN:
case LESS:
case THE:
case THAN:
case FROM:
case BEFORE:
case AFTER:
case AGO:
case WRITE:
case AT:
case LET:
case BE:
case YEAR:
case YEARS:
case IF:
case IT:
case THEY:
case NOT:
case OR:
case THEN:
case READ:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EVENT:
case WHERE:
case EXIST:
case EXISTS:
case PAST:
case MONTH:
case MONTHS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case CONCLUDE:
case ELSE:
case ELSEIF:
case ENDIF:
case TRUE:
case FALSE:
case DATA:
case LOGIC:
case ACTION:
case OF:
case TIME:
case WITHIN:
case CALL:
case WITH:
case TO:
case ANY:
case TIMES:
{
{
        any_reserved_word();
        astFactory.addASTChild(currentAST,returnAST);
      }
      text_AST=(AST)currentAST.root;
      break;
    }
case INTLIT:
{
    AST tmp205_AST=null;
    tmp205_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp205_AST);
    match(INTLIT);
    text_AST=(AST)currentAST.root;
    break;
  }
case LPAREN:
{
{
    AST tmp206_AST=null;
    tmp206_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp206_AST);
    match(LPAREN);
{
      _loop53:       do {
switch (LA(1)) {
case ID:
{
            AST tmp207_AST=null;
            tmp207_AST=astFactory.create(LT(1));
            astFactory.addASTChild(currentAST,tmp207_AST);
            match(ID);
            break;
          }
case INTLIT:
{
          AST tmp208_AST=null;
          tmp208_AST=astFactory.create(LT(1));
          astFactory.addASTChild(currentAST,tmp208_AST);
          match(INTLIT);
          break;
        }
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case COUNT:
case IN:
case LESS:
case THE:
case THAN:
case FROM:
case BEFORE:
case AFTER:
case AGO:
case WRITE:
case AT:
case LET:
case BE:
case YEAR:
case YEARS:
case IF:
case IT:
case THEY:
case NOT:
case OR:
case THEN:
case READ:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EVENT:
case WHERE:
case EXIST:
case EXISTS:
case PAST:
case MONTH:
case MONTHS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case CONCLUDE:
case ELSE:
case ELSEIF:
case ENDIF:
case TRUE:
case FALSE:
case DATA:
case LOGIC:
case ACTION:
case OF:
case TIME:
case WITHIN:
case CALL:
case WITH:
case TO:
case ANY:
case TIMES:
{
{
          any_reserved_word();
          astFactory.addASTChild(currentAST,returnAST);
        }
        break;
      }
default :
{
      break _loop53;
    }
}
}
 while (true);
}
AST tmp209_AST=null;
tmp209_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp209_AST);
match(RPAREN);
}
text_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_25);
}
 else {
throw ex;
}
}
returnAST=text_AST;
}
