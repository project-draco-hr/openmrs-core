{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST any_reserved_word_AST=null;
  try {
switch (LA(1)) {
case AND:
{
        AST tmp225_AST=null;
        tmp225_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp225_AST);
        match(AND);
        any_reserved_word_AST=(AST)currentAST.root;
        break;
      }
case IS:
{
      AST tmp226_AST=null;
      tmp226_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp226_AST);
      match(IS);
      any_reserved_word_AST=(AST)currentAST.root;
      break;
    }
case ARE:
{
    AST tmp227_AST=null;
    tmp227_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp227_AST);
    match(ARE);
    any_reserved_word_AST=(AST)currentAST.root;
    break;
  }
case WAS:
{
  AST tmp228_AST=null;
  tmp228_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp228_AST);
  match(WAS);
  any_reserved_word_AST=(AST)currentAST.root;
  break;
}
case WERE:
{
AST tmp229_AST=null;
tmp229_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp229_AST);
match(WERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case COUNT:
{
AST tmp230_AST=null;
tmp230_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp230_AST);
match(COUNT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IN:
{
AST tmp231_AST=null;
tmp231_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp231_AST);
match(IN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LESS:
{
AST tmp232_AST=null;
tmp232_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp232_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THE:
{
AST tmp233_AST=null;
tmp233_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp233_AST);
match(THE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THAN:
{
AST tmp234_AST=null;
tmp234_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp234_AST);
match(THAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FROM:
{
AST tmp235_AST=null;
tmp235_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp235_AST);
match(FROM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BEFORE:
{
AST tmp236_AST=null;
tmp236_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp236_AST);
match(BEFORE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AFTER:
{
AST tmp237_AST=null;
tmp237_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp237_AST);
match(AFTER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AGO:
{
AST tmp238_AST=null;
tmp238_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp238_AST);
match(AGO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AT:
{
AST tmp239_AST=null;
tmp239_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp239_AST);
match(AT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OF:
{
AST tmp240_AST=null;
tmp240_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp240_AST);
match(OF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WRITE:
{
AST tmp241_AST=null;
tmp241_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp241_AST);
match(WRITE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BE:
{
AST tmp242_AST=null;
tmp242_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp242_AST);
match(BE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LET:
{
AST tmp243_AST=null;
tmp243_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp243_AST);
match(LET);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEAR:
{
AST tmp244_AST=null;
tmp244_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp244_AST);
match(YEAR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEARS:
{
AST tmp245_AST=null;
tmp245_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp245_AST);
match(YEARS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IF:
{
AST tmp246_AST=null;
tmp246_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp246_AST);
match(IF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IT:
{
AST tmp247_AST=null;
tmp247_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp247_AST);
match(IT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEY:
{
AST tmp248_AST=null;
tmp248_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp248_AST);
match(THEY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NOT:
{
AST tmp249_AST=null;
tmp249_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp249_AST);
match(NOT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OR:
{
AST tmp250_AST=null;
tmp250_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp250_AST);
match(OR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEN:
{
AST tmp251_AST=null;
tmp251_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp251_AST);
match(THEN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTH:
{
AST tmp252_AST=null;
tmp252_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp252_AST);
match(MONTH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTHS:
{
AST tmp253_AST=null;
tmp253_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp253_AST);
match(MONTHS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIME:
{
AST tmp254_AST=null;
tmp254_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp254_AST);
match(TIME);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIMES:
{
AST tmp255_AST=null;
tmp255_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp255_AST);
match(TIMES);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITHIN:
{
AST tmp256_AST=null;
tmp256_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp256_AST);
match(WITHIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case READ:
{
AST tmp257_AST=null;
tmp257_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp257_AST);
match(READ);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MINIMUM:
{
AST tmp258_AST=null;
tmp258_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp258_AST);
match(MINIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MIN:
{
AST tmp259_AST=null;
tmp259_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp259_AST);
match(MIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAXIMUM:
{
AST tmp260_AST=null;
tmp260_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp260_AST);
match(MAXIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAX:
{
AST tmp261_AST=null;
tmp261_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp261_AST);
match(MAX);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LAST:
{
AST tmp262_AST=null;
tmp262_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp262_AST);
match(LAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
AST tmp263_AST=null;
tmp263_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp263_AST);
match(FIRST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
AST tmp264_AST=null;
tmp264_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp264_AST);
match(EARLIEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
AST tmp265_AST=null;
tmp265_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp265_AST);
match(LATEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EVENT:
{
AST tmp266_AST=null;
tmp266_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp266_AST);
match(EVENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WHERE:
{
AST tmp267_AST=null;
tmp267_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp267_AST);
match(WHERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXIST:
{
AST tmp268_AST=null;
tmp268_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp268_AST);
match(EXIST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXISTS:
{
AST tmp269_AST=null;
tmp269_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp269_AST);
match(EXISTS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PAST:
{
AST tmp270_AST=null;
tmp270_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp270_AST);
match(PAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVERAGE:
{
AST tmp271_AST=null;
tmp271_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp271_AST);
match(AVERAGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVG:
{
AST tmp272_AST=null;
tmp272_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp272_AST);
match(AVG);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SUM:
{
AST tmp273_AST=null;
tmp273_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp273_AST);
match(SUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MEDIAN:
{
AST tmp274_AST=null;
tmp274_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp274_AST);
match(MEDIAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CONCLUDE:
{
AST tmp275_AST=null;
tmp275_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp275_AST);
match(CONCLUDE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSE:
{
AST tmp276_AST=null;
tmp276_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp276_AST);
match(ELSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSEIF:
{
AST tmp277_AST=null;
tmp277_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp277_AST);
match(ELSEIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ENDIF:
{
AST tmp278_AST=null;
tmp278_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp278_AST);
match(ENDIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TRUE:
{
AST tmp279_AST=null;
tmp279_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp279_AST);
match(TRUE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FALSE:
{
AST tmp280_AST=null;
tmp280_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp280_AST);
match(FALSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DATA:
{
AST tmp281_AST=null;
tmp281_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp281_AST);
match(DATA);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LOGIC:
{
AST tmp282_AST=null;
tmp282_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp282_AST);
match(LOGIC);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ACTION:
{
AST tmp283_AST=null;
tmp283_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp283_AST);
match(ACTION);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CALL:
{
AST tmp284_AST=null;
tmp284_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp284_AST);
match(CALL);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITH:
{
AST tmp285_AST=null;
tmp285_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp285_AST);
match(WITH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TO:
{
AST tmp286_AST=null;
tmp286_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp286_AST);
match(TO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ANY:
{
AST tmp287_AST=null;
tmp287_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp287_AST);
match(ANY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_28);
}
 else {
throw ex;
}
}
returnAST=any_reserved_word_AST;
}
