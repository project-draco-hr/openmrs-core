{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST any_reserved_word_AST=null;
  try {
switch (LA(1)) {
case AND:
{
        AST tmp168_AST=null;
        tmp168_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp168_AST);
        match(AND);
        any_reserved_word_AST=(AST)currentAST.root;
        break;
      }
case IS:
{
      AST tmp169_AST=null;
      tmp169_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp169_AST);
      match(IS);
      any_reserved_word_AST=(AST)currentAST.root;
      break;
    }
case ARE:
{
    AST tmp170_AST=null;
    tmp170_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp170_AST);
    match(ARE);
    any_reserved_word_AST=(AST)currentAST.root;
    break;
  }
case WAS:
{
  AST tmp171_AST=null;
  tmp171_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp171_AST);
  match(WAS);
  any_reserved_word_AST=(AST)currentAST.root;
  break;
}
case WERE:
{
AST tmp172_AST=null;
tmp172_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp172_AST);
match(WERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case COUNT:
{
AST tmp173_AST=null;
tmp173_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp173_AST);
match(COUNT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IN:
{
AST tmp174_AST=null;
tmp174_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp174_AST);
match(IN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LESS:
{
AST tmp175_AST=null;
tmp175_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp175_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THE:
{
AST tmp176_AST=null;
tmp176_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp176_AST);
match(THE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THAN:
{
AST tmp177_AST=null;
tmp177_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp177_AST);
match(THAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FROM:
{
AST tmp178_AST=null;
tmp178_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp178_AST);
match(FROM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BEFORE:
{
AST tmp179_AST=null;
tmp179_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp179_AST);
match(BEFORE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AFTER:
{
AST tmp180_AST=null;
tmp180_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp180_AST);
match(AFTER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AGO:
{
AST tmp181_AST=null;
tmp181_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp181_AST);
match(AGO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WRITE:
{
AST tmp182_AST=null;
tmp182_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp182_AST);
match(WRITE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BE:
{
AST tmp183_AST=null;
tmp183_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp183_AST);
match(BE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LET:
{
AST tmp184_AST=null;
tmp184_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp184_AST);
match(LET);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEAR:
{
AST tmp185_AST=null;
tmp185_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp185_AST);
match(YEAR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEARS:
{
AST tmp186_AST=null;
tmp186_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp186_AST);
match(YEARS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IF:
{
AST tmp187_AST=null;
tmp187_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp187_AST);
match(IF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IT:
{
AST tmp188_AST=null;
tmp188_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp188_AST);
match(IT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEY:
{
AST tmp189_AST=null;
tmp189_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp189_AST);
match(THEY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NOT:
{
AST tmp190_AST=null;
tmp190_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp190_AST);
match(NOT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OR:
{
AST tmp191_AST=null;
tmp191_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp191_AST);
match(OR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEN:
{
AST tmp192_AST=null;
tmp192_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp192_AST);
match(THEN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTH:
{
AST tmp193_AST=null;
tmp193_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp193_AST);
match(MONTH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTHS:
{
AST tmp194_AST=null;
tmp194_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp194_AST);
match(MONTHS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case READ:
{
AST tmp195_AST=null;
tmp195_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp195_AST);
match(READ);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MINIMUM:
{
AST tmp196_AST=null;
tmp196_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp196_AST);
match(MINIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MIN:
{
AST tmp197_AST=null;
tmp197_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp197_AST);
match(MIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAXIMUM:
{
AST tmp198_AST=null;
tmp198_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp198_AST);
match(MAXIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAX:
{
AST tmp199_AST=null;
tmp199_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp199_AST);
match(MAX);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LAST:
{
AST tmp200_AST=null;
tmp200_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp200_AST);
match(LAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
AST tmp201_AST=null;
tmp201_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp201_AST);
match(FIRST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
AST tmp202_AST=null;
tmp202_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp202_AST);
match(EARLIEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
AST tmp203_AST=null;
tmp203_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp203_AST);
match(LATEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EVENT:
{
AST tmp204_AST=null;
tmp204_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp204_AST);
match(EVENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WHERE:
{
AST tmp205_AST=null;
tmp205_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp205_AST);
match(WHERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXIST:
{
AST tmp206_AST=null;
tmp206_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp206_AST);
match(EXIST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXISTS:
{
AST tmp207_AST=null;
tmp207_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp207_AST);
match(EXISTS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PAST:
{
AST tmp208_AST=null;
tmp208_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp208_AST);
match(PAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVERAGE:
{
AST tmp209_AST=null;
tmp209_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp209_AST);
match(AVERAGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVG:
{
AST tmp210_AST=null;
tmp210_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp210_AST);
match(AVG);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SUM:
{
AST tmp211_AST=null;
tmp211_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp211_AST);
match(SUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MEDIAN:
{
AST tmp212_AST=null;
tmp212_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp212_AST);
match(MEDIAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CONCLUDE:
{
AST tmp213_AST=null;
tmp213_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp213_AST);
match(CONCLUDE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSE:
{
AST tmp214_AST=null;
tmp214_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp214_AST);
match(ELSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSEIF:
{
AST tmp215_AST=null;
tmp215_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp215_AST);
match(ELSEIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ENDIF:
{
AST tmp216_AST=null;
tmp216_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp216_AST);
match(ENDIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TRUE:
{
AST tmp217_AST=null;
tmp217_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp217_AST);
match(TRUE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FALSE:
{
AST tmp218_AST=null;
tmp218_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp218_AST);
match(FALSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DATA:
{
AST tmp219_AST=null;
tmp219_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp219_AST);
match(DATA);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LOGIC:
{
AST tmp220_AST=null;
tmp220_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp220_AST);
match(LOGIC);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ACTION:
{
AST tmp221_AST=null;
tmp221_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp221_AST);
match(ACTION);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_27);
}
 else {
throw ex;
}
}
returnAST=any_reserved_word_AST;
}
