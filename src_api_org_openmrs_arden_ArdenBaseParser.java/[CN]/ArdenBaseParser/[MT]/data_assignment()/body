{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST data_assignment_AST=null;
  try {
switch (LA(1)) {
case LET:
case NOW:
case ID:
{
        identifier_becomes();
        astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case READ:
{
{
                AST tmp286_AST=null;
                tmp286_AST=astFactory.create(LT(1));
                astFactory.makeASTRoot(currentAST,tmp286_AST);
                match(READ);
              }
{
{
                  if ((_tokenSet_33.member(LA(1)))) {
{
                      of_read_func_op();
                      astFactory.addASTChild(currentAST,returnAST);
                    }
                  }
 else                   if ((_tokenSet_34.member(LA(1)))) {
{
                      from_of_func_op();
                      astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case INTLIT:
{
                            AST tmp287_AST=null;
                            tmp287_AST=astFactory.create(LT(1));
                            astFactory.addASTChild(currentAST,tmp287_AST);
                            match(INTLIT);
                            AST tmp288_AST=null;
                            tmp288_AST=astFactory.create(LT(1));
                            astFactory.addASTChild(currentAST,tmp288_AST);
                            match(FROM);
                            break;
                          }
case LPAREN:
case ARDEN_CURLY_BRACKETS:
{
                          break;
                        }
default :
{
                        throw new NoViableAltException(LT(1),getFilename());
                      }
                  }
                }
              }
            }
 else             if ((LA(1) == LPAREN || LA(1) == ARDEN_CURLY_BRACKETS)) {
            }
 else {
              throw new NoViableAltException(LT(1),getFilename());
            }
          }
{
switch (LA(1)) {
case ARDEN_CURLY_BRACKETS:
{
                mapping_factor();
                astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case AFTER:
case NOT:
case WHERE:
case WITHIN:
{
{
switch (LA(1)) {
case WHERE:
{
                            where();
                            astFactory.addASTChild(currentAST,returnAST);
                            it();
                            occur();
                            break;
                          }
case AFTER:
case NOT:
case WITHIN:
{
                          break;
                        }
default :
{
                        throw new NoViableAltException(LT(1),getFilename());
                      }
                  }
                }
{
switch (LA(1)) {
case AFTER:
case WITHIN:
{
                      temporal_comp_op();
                      astFactory.addASTChild(currentAST,returnAST);
                      break;
                    }
case NOT:
{
                    AST tmp289_AST=null;
                    tmp289_AST=astFactory.create(LT(1));
                    astFactory.addASTChild(currentAST,tmp289_AST);
                    match(NOT);
                    temporal_comp_op();
                    astFactory.addASTChild(currentAST,returnAST);
                    break;
                  }
default :
{
                  throw new NoViableAltException(LT(1),getFilename());
                }
            }
          }
          break;
        }
case SEMI:
{
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
break;
}
case LPAREN:
{
match(LPAREN);
{
mapping_factor();
astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case WHERE:
{
    where();
    astFactory.addASTChild(currentAST,returnAST);
    it();
    astFactory.addASTChild(currentAST,returnAST);
    occur();
    astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case AFTER:
case WITHIN:
{
          temporal_comp_op();
          astFactory.addASTChild(currentAST,returnAST);
          break;
        }
case NOT:
{
        AST tmp291_AST=null;
        tmp291_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp291_AST);
        match(NOT);
        temporal_comp_op();
        astFactory.addASTChild(currentAST,returnAST);
        break;
      }
default :
{
      throw new NoViableAltException(LT(1),getFilename());
    }
}
}
break;
}
case RPAREN:
{
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
match(RPAREN);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
}
break;
}
case EVENT:
{
{
AST tmp293_AST=null;
tmp293_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp293_AST);
match(EVENT);
}
mapping_factor();
astFactory.addASTChild(currentAST,returnAST);
break;
}
case COUNT:
case THE:
case NOW:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EXIST:
case EXISTS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case TRUE:
case FALSE:
case OF:
case TIME:
case INTLIT:
case SEMI:
case ID:
case LPAREN:
case COMMA:
case LITERAL_MERGE:
case LITERAL_SORT:
case STRING_LITERAL:
{
expr();
astFactory.addASTChild(currentAST,returnAST);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
data_assignment_AST=(AST)currentAST.root;
break;
}
case SEMI:
{
data_assignment_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_32);
}
 else {
throw ex;
}
}
returnAST=data_assignment_AST;
}
