{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST read_phrase_AST=null;
  try {
switch (LA(1)) {
case LPAREN:
case ARDEN_CURLY_BRACKETS:
{
        read_where();
        astFactory.addASTChild(currentAST,returnAST);
        read_phrase_AST=(AST)currentAST.root;
        break;
      }
case COUNT:
case EXIST:
case EXISTS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
{
      of_read_func_op();
      astFactory.addASTChild(currentAST,returnAST);
      read_where();
      astFactory.addASTChild(currentAST,returnAST);
      from_of_func_op();
      astFactory.addASTChild(currentAST,returnAST);
      read_where();
      astFactory.addASTChild(currentAST,returnAST);
      read_phrase_AST=(AST)currentAST.root;
      break;
    }
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case INTLIT:
{
    from_of_func_op();
    astFactory.addASTChild(currentAST,returnAST);
    AST tmp329_AST=null;
    tmp329_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp329_AST);
    match(INTLIT);
{
      AST tmp330_AST=null;
      tmp330_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp330_AST);
      match(FROM);
    }
    read_where();
    astFactory.addASTChild(currentAST,returnAST);
    read_phrase_AST=(AST)currentAST.root;
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_0);
}
 else {
throw ex;
}
}
returnAST=read_phrase_AST;
}
