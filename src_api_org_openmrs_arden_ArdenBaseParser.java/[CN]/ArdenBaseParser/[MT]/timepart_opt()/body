{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST timepart_opt_AST=null;
  try {
switch (LA(1)) {
case EOF:
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case IN:
case LESS:
case FROM:
case BEFORE:
case AFTER:
case AGO:
case AT:
case YEAR:
case YEARS:
case IF:
case NOT:
case OR:
case THEN:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case WHERE:
case DAYS:
case DAY:
case MONTH:
case MONTHS:
case WEEK:
case WEEKS:
case CONCLUDE:
case ELSE:
case ELSEIF:
case ENDIF:
case ENDBLOCK:
case DOT:
case SEMI:
case ID:
case LPAREN:
case RPAREN:
case 99:
case 100:
case COMMA:
case ARDEN_CURLY_BRACKETS:
case LITERAL_GREATER:
case LITERAL_hour:
case LITERAL_hours:
case LITERAL_minute:
case LITERAL_minutes:
case LITERAL_second:
case LITERAL_seconds:
case EQUALS:
case LITERAL_EQ:
case LT:
case LITERAL_LT:
case GT:
case LITERAL_GT:
case LTE:
case LITERAL_LE:
case GTE:
case LITERAL_GE:
case NE:
case LITERAL_NE:
case ACTION_OP:
case LITERAL_MERGE:
case LITERAL_SORT:
case LITERAL_SEQTO:
case 169:
case 170:
case 171:
{
        timepart_opt_AST=(AST)currentAST.root;
        break;
      }
case LITERAL_T:
case LITERAL_t:
{
{
        timepart();
        astFactory.addASTChild(currentAST,returnAST);
      }
      AST tmp226_AST=null;
      tmp226_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp226_AST);
      match(ENDBLOCK);
      timepart_opt_AST=(AST)currentAST.root;
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_26);
}
 else {
throw ex;
}
}
returnAST=timepart_opt_AST;
}
