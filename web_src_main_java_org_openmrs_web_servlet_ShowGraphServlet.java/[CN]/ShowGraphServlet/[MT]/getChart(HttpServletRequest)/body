{
  String patientId=request.getParameter("patientId");
  String conceptId1=request.getParameter("conceptId");
  String conceptId2=request.getParameter("conceptId2");
  String chartTitle=request.getParameter("chartTitle");
  String seriesTitle1=request.getParameter("seriesTitle1");
  String seriesTitle2=request.getParameter("seriesTitle2");
  String units=request.getParameter("units");
  String minRangeString=request.getParameter("minRange");
  String maxRangeString=request.getParameter("maxRange");
  String hideDate=request.getParameter("hideDate");
  Patient patient=Context.getPatientService().getPatient(Integer.parseInt(patientId));
  Calendar cal=Calendar.getInstance();
  Date fromDate=getFromDate(request.getParameter("fromDate"));
  Date toDate=getToDate(request.getParameter("toDate"));
  if (fromDate.getTime() > toDate.getTime()) {
    Long temp=fromDate.getTime();
    fromDate.setTime(toDate.getTime());
    toDate.setTime(temp);
  }
  Double minRange=null;
  Double maxRange=null;
  Double normalLow=null;
  Double normalHigh=null;
  Double criticalLow=null;
  Double criticalHigh=null;
  String timeAxisTitle=null;
  String rangeAxisTitle=null;
  boolean userSpecifiedMaxRange=false;
  boolean userSpecifiedMinRange=false;
  List<Obs> observations1=new ArrayList<Obs>();
  List<Obs> observations2=new ArrayList<Obs>();
  Concept concept1=null, concept2=null;
  if (conceptId1 != null)   concept1=Context.getConceptService().getConcept(Integer.parseInt(conceptId1));
  if (conceptId2 != null)   concept2=Context.getConceptService().getConcept(Integer.parseInt(conceptId2));
  if (concept1 != null) {
    observations1=Context.getObsService().getObservationsByPersonAndConcept(patient,concept1);
    chartTitle=concept1.getName().getName();
    rangeAxisTitle=((ConceptNumeric)concept1).getUnits();
    minRange=((ConceptNumeric)concept1).getLowAbsolute();
    maxRange=((ConceptNumeric)concept1).getHiAbsolute();
    normalLow=((ConceptNumeric)concept1).getLowNormal();
    normalHigh=((ConceptNumeric)concept1).getHiNormal();
    criticalLow=((ConceptNumeric)concept1).getLowCritical();
    criticalHigh=((ConceptNumeric)concept1).getHiCritical();
    if (concept2 != null) {
      String concept2Units=((ConceptNumeric)concept2).getUnits();
      if (concept2Units != null && concept2Units.equals(rangeAxisTitle)) {
        observations2=Context.getObsService().getObservationsByPersonAndConcept(patient,concept2);
        chartTitle+=" + " + concept2.getName().getName();
        if (((ConceptNumeric)concept2).getHiAbsolute() != null && ((ConceptNumeric)concept2).getHiAbsolute() > maxRange)         maxRange=((ConceptNumeric)concept2).getHiAbsolute();
        if (((ConceptNumeric)concept2).getLowAbsolute() != null && ((ConceptNumeric)concept2).getLowAbsolute() < minRange)         minRange=((ConceptNumeric)concept2).getLowAbsolute();
      }
 else {
        log.warn("Units for concept id: " + conceptId2 + " don't match units for concept id: "+ conceptId1+ ". Only displaying "+ conceptId1);
        concept2=null;
      }
    }
  }
 else {
    chartTitle="Concept " + conceptId1 + " not found";
    rangeAxisTitle="Value";
  }
  if (units != null && units.length() > 0)   rangeAxisTitle=units;
  if (minRangeString != null) {
    minRange=Double.parseDouble(minRangeString);
    userSpecifiedMinRange=true;
  }
  if (maxRangeString != null) {
    maxRange=Double.parseDouble(maxRangeString);
    userSpecifiedMaxRange=true;
  }
  if (chartTitle == null)   chartTitle="";
  if (rangeAxisTitle == null)   rangeAxisTitle="";
  if (seriesTitle1 == null)   seriesTitle1=chartTitle;
  if (seriesTitle2 == null)   seriesTitle2=chartTitle;
  if (minRange == null)   minRange=0.0;
  if (maxRange == null)   maxRange=200.0;
  TimeSeriesCollection dataset=new TimeSeriesCollection();
  TimeSeries series1, series2;
  Class<? extends RegularTimePeriod> timeScale=null;
  if (toDate.getTime() - fromDate.getTime() <= 86400000) {
    timeScale=Minute.class;
    timeAxisTitle="Time";
  }
 else   if (toDate.getTime() - fromDate.getTime() <= 259200000) {
    timeScale=Hour.class;
    timeAxisTitle="Time";
  }
 else {
    timeScale=Day.class;
    timeAxisTitle="Date";
  }
  series1=new TimeSeries(concept1.getName().getName(),timeScale);
  if (concept2 == null)   series2=new TimeSeries("NULL",Hour.class);
 else   series2=new TimeSeries(concept2.getName().getName(),timeScale);
  for (  Obs obs : observations1) {
    if (obs.getValueNumeric() != null && obs.getObsDatetime().getTime() >= fromDate.getTime() && obs.getObsDatetime().getTime() < toDate.getTime()) {
      cal.setTime(obs.getObsDatetime());
      if (timeScale == Minute.class) {
        Minute min=new Minute(cal.get(Calendar.MINUTE),cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series1.addOrUpdate(min,obs.getValueNumeric());
      }
 else       if (timeScale == Hour.class) {
        Hour hour=new Hour(cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series1.addOrUpdate(hour,obs.getValueNumeric());
      }
 else {
        Day day=new Day(cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series1.addOrUpdate(day,obs.getValueNumeric());
      }
    }
  }
  for (  Obs obs : observations2) {
    if (obs.getValueNumeric() != null && obs.getObsDatetime().getTime() >= fromDate.getTime() && obs.getObsDatetime().getTime() < toDate.getTime()) {
      cal.setTime(obs.getObsDatetime());
      if (timeScale == Minute.class) {
        Minute min=new Minute(cal.get(Calendar.MINUTE),cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series2.addOrUpdate(min,obs.getValueNumeric());
      }
 else       if (timeScale == Hour.class) {
        Hour hour=new Hour(cal.get(Calendar.HOUR_OF_DAY),cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series2.addOrUpdate(hour,obs.getValueNumeric());
      }
 else {
        Day day=new Day(cal.get(Calendar.DAY_OF_MONTH),cal.get(Calendar.MONTH) + 1,cal.get(Calendar.YEAR));
        series2.addOrUpdate(day,obs.getValueNumeric());
      }
    }
  }
  dataset.addSeries(series1);
  if (!series2.isEmpty())   dataset.addSeries(series2);
  ChartFactory.setChartTheme(StandardChartTheme.createLegacyTheme());
  JFreeChart chart=null;
  if (concept2 == null)   chart=ChartFactory.createTimeSeriesChart(chartTitle,timeAxisTitle,rangeAxisTitle,dataset,false,false,false);
 else   chart=ChartFactory.createTimeSeriesChart(chartTitle,timeAxisTitle,rangeAxisTitle,dataset,true,false,false);
  Font font=new Font("Arial",Font.BOLD,12);
  TextTitle title=chart.getTitle();
  title.setFont(font);
  chart.setTitle(title);
  if (hideDate == null) {
    TextTitle subtitle=new TextTitle(fromDate.toString() + " - " + toDate.toString());
    subtitle.setFont(font);
    chart.addSubtitle(subtitle);
  }
  XYPlot plot=(XYPlot)chart.getPlot();
  plot.setNoDataMessage("No Data Available");
  if (concept2 == null) {
    IntervalMarker abnormalLow, abnormalHigh, critical;
    if (normalHigh != null) {
      abnormalHigh=new IntervalMarker(normalHigh,maxRange,COLOR_ABNORMAL);
      plot.addRangeMarker(abnormalHigh);
    }
    if (normalLow != null) {
      abnormalLow=new IntervalMarker(minRange,normalLow,COLOR_ABNORMAL);
      plot.addRangeMarker(abnormalLow);
    }
    if (criticalHigh != null) {
      critical=new IntervalMarker(criticalHigh,maxRange,COLOR_CRITICAL);
      plot.addRangeMarker(critical);
    }
    if (criticalLow != null) {
      critical=new IntervalMarker(minRange,criticalLow,COLOR_CRITICAL);
      plot.addRangeMarker(critical);
    }
    if (plot.getRangeAxis().getLowerBound() < minRange) {
      IntervalMarker error=new IntervalMarker(plot.getRangeAxis().getLowerBound(),minRange,COLOR_ERROR);
      plot.addRangeMarker(error);
    }
    if (plot.getRangeAxis().getUpperBound() > maxRange) {
      IntervalMarker error=new IntervalMarker(maxRange,plot.getRangeAxis().getUpperBound(),COLOR_ERROR);
      plot.addRangeMarker(error);
    }
  }
  XYItemRenderer r=plot.getRenderer();
  if (r instanceof XYLineAndShapeRenderer) {
    XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)r;
    renderer.setBaseShapesFilled(true);
    renderer.setBaseShapesVisible(true);
  }
  DateAxis timeAxis=(DateAxis)plot.getDomainAxis();
  if (timeScale == Day.class)   timeAxis.setDateFormatOverride(new SimpleDateFormat("dd-MMM-yyyy"));
  timeAxis.setRange(fromDate,toDate);
  NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
  if (userSpecifiedMinRange)   minRange=(rangeAxis.getLowerBound() < minRange) ? rangeAxis.getLowerBound() : minRange;
  if (userSpecifiedMaxRange)   maxRange=(rangeAxis.getUpperBound() > maxRange) ? rangeAxis.getUpperBound() : maxRange;
  rangeAxis.setRange(minRange,maxRange);
  return chart;
}
