{
  if (module == null) {
    throw new ModuleException("Module cannot be null");
  }
  SortedMap<String,String> map=new TreeMap<String,String>(new VersionComparator());
  InputStream diffStream=null;
  JarFile jarfile=null;
  try {
    try {
      jarfile=new JarFile(module.getFile());
    }
 catch (    IOException e) {
      throw new ModuleException("Unable to get jar file",module.getName(),e);
    }
    ZipEntry diffEntry=jarfile.getEntry("sqldiff.xml");
    if (diffEntry == null) {
      log.debug("No sqldiff.xml found for module: " + module.getName());
      return map;
    }
 else {
      try {
        diffStream=jarfile.getInputStream(diffEntry);
      }
 catch (      IOException e) {
        throw new ModuleException("Unable to get sql diff file stream",module.getName(),e);
      }
    }
    try {
      Document diffDoc=null;
      try {
        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
        DocumentBuilder db=dbf.newDocumentBuilder();
        db.setEntityResolver(new EntityResolver(){
          public InputSource resolveEntity(          String publicId,          String systemId) throws SAXException, IOException {
            return new InputSource(new StringReader(""));
          }
        }
);
        diffDoc=db.parse(diffStream);
      }
 catch (      Exception e) {
        throw new ModuleException("Error parsing diff sqldiff.xml file",module.getName(),e);
      }
      Element rootNode=diffDoc.getDocumentElement();
      String diffVersion=rootNode.getAttribute("version");
      if (!validConfigVersions().contains(diffVersion)) {
        throw new ModuleException("Invalid config version: " + diffVersion,module.getModuleId());
      }
      NodeList diffNodes=getDiffNodes(rootNode,diffVersion);
      if (diffNodes != null && diffNodes.getLength() > 0) {
        int i=0;
        while (i < diffNodes.getLength()) {
          Element el=(Element)diffNodes.item(i++);
          String version=getElement(el,diffVersion,"version");
          String sql=getElement(el,diffVersion,"sql");
          map.put(version,sql);
        }
      }
    }
 catch (    ModuleException e) {
      if (diffStream != null) {
        try {
          diffStream.close();
        }
 catch (        IOException io) {
          log.error("Error while closing config stream for module: " + module.getModuleId(),io);
        }
      }
      throw e;
    }
  }
  finally {
    try {
      if (jarfile != null) {
        jarfile.close();
      }
    }
 catch (    IOException e) {
      log.warn("Unable to close jarfile: " + jarfile.getName());
    }
  }
  return map;
}
