{
  if (Context.getReportObjectService().getPatientSearch("Male") == null) {
    System.out.println("Creating Male...");
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("gender","m",String.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Male",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("Female") == null) {
    System.out.println("Creating Female...");
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("gender","f",String.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Female",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("AdultOnDate") == null) {
    System.out.println("Creating AdultOnDate...");
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("minAge","15",Integer.class);
    ps.addArgument("effectiveDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("AdultOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("ChildOnDate") == null) {
    System.out.println("Creating ChildOnDate...");
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("minAge","0",Integer.class);
    ps.addArgument("maxAge","14",Integer.class);
    ps.addArgument("effectiveDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("ChildOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("InfantOnDate") == null) {
    System.out.println("Creating InfantOnDate...");
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("minAge","0",Integer.class);
    ps.addArgument("maxAge","1",Integer.class);
    ps.addArgument("effectiveDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("InfantOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("PregnantOnDate") == null) {
    System.out.println("Creating PregnantOnDate...");
    Concept pregnancyConcept=Context.getConceptService().getConceptByName("PREGNANCY STATUS");
    assertNotNull("PREGNANCY STATUS concept must be defined to run this test",pregnancyConcept);
    Concept yesConcept=Context.getConceptService().getConceptByName("YES");
    assertNotNull("YES concept must be defined to run this test",pregnancyConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("question",pregnancyConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",yesConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("PregnantOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("EnrolledInHivProgramOnOrBeforeDate") == null) {
    System.out.println("Creating EnrolledInHivProgramOnOrBeforeDate...");
    Program hivProgram=Context.getProgramWorkflowService().getProgram("HIV PROGRAM");
    assertNotNull("HIV PROGRAM must be defined to run this test",hivProgram);
    PatientSearch ps=PatientSearch.createFilterSearch(ProgramStatePatientFilter.class);
    ps.addArgument("program",hivProgram.getProgramId().toString(),Integer.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("EnrolledInHivProgramOnOrBeforeDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("FirstEncounterOnOrBeforeDate") == null) {
    System.out.println("Creating FirstEncounterOnOrBeforeDate...");
    PatientSearch ps=PatientSearch.createFilterSearch(EncounterPatientFilter.class);
    ps.addArgument("atLeastCount","1",Integer.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("FirstEncounterOnOrBeforeDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("OnArvsOnOrBeforeDate") == null) {
    System.out.println("Creating OnArvsOnOrBeforeDate...");
    Concept arvDrugSet=Context.getConceptService().getConceptByName("ANTIRETROVIRAL DRUGS");
    assertNotNull("ANTIRETROVIRAL DRUGS concept must be defined to run this test",arvDrugSet);
    PatientSearch ps=PatientSearch.createFilterSearch(DrugOrderFilter.class);
    ps.addArgument("drugSets",arvDrugSet.getConceptId().toString(),Concept.class);
    ps.addArgument("anyOrAll","ANY",PatientSetService.GroupMethod.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("OnArvsOnOrBeforeDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("ActiveNotOnARTOnDate") == null) {
    System.out.println("Creating ActiveNotOnARTOnDate...");
    Concept ARTstatusConcept=Context.getConceptService().getConceptByName("ANTIRETROVIRAL TREATMENT STATUS");
    assertNotNull("ANTIRETROVIRAL TREATMENT STATUS concept must be defined to run this test",ARTstatusConcept);
    Concept ActiveNotOnARVsConcept=Context.getConceptService().getConceptByName("ACTIVE NOT ON ARVS");
    assertNotNull("ACTIVE NOT ON ARVS concept must be defined to run this test",ARTstatusConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",ARTstatusConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",ActiveNotOnARVsConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("ActiveNotOnARTOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("PatientDefaultedOnDate") == null) {
    System.out.println("Creating PatientDefaultedOnDate...");
    Concept ARTstatusConcept=Context.getConceptService().getConceptByName("ANTIRETROVIRAL TREATMENT STATUS");
    assertNotNull("ANTIRETROVIRAL TREATMENT STATUS concept must be defined to run this test",ARTstatusConcept);
    Concept ActiveNotOnARVsConcept=Context.getConceptService().getConceptByName("PATIENT DEFAULTED");
    assertNotNull("PATIENT DEFAULTED concept must be defined to run this test",ARTstatusConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",ARTstatusConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",ActiveNotOnARVsConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("PatientDefaultedOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("PatientDiedOnDate") == null) {
    System.out.println("Creating PatientDiedOnDate...");
    Concept ARTstatusConcept=Context.getConceptService().getConceptByName("ANTIRETROVIRAL TREATMENT STATUS");
    assertNotNull("ANTIRETROVIRAL TREATMENT STATUS concept must be defined to run this test",ARTstatusConcept);
    Concept ActiveNotOnARVsConcept=Context.getConceptService().getConceptByName("PATIENT DIED");
    assertNotNull("PATIENT DIED concept must be defined to run this test",ARTstatusConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",ARTstatusConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",ActiveNotOnARVsConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("PatientDiedOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("TreatmentStoppedOnDate") == null) {
    System.out.println("Creating TreatmentStoppedOnDate...");
    Concept ARTstatusConcept=Context.getConceptService().getConceptByName("ANTIRETROVIRAL TREATMENT STATUS");
    assertNotNull("ANTIRETROVIRAL TREATMENT STATUS concept must be defined to run this test",ARTstatusConcept);
    Concept ActiveNotOnARVsConcept=Context.getConceptService().getConceptByName("TREATMENT STOPPED");
    assertNotNull("TREATMENT STOPPED concept must be defined to run this test",ARTstatusConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",ARTstatusConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",ActiveNotOnARVsConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("TreatmentStoppedOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("TransferredOutOnDate") == null) {
    System.out.println("Creating TransferredOutOnDate...");
    Concept ARTstatusConcept=Context.getConceptService().getConceptByName("ANTIRETROVIRAL TREATMENT STATUS");
    assertNotNull("ANTIRETROVIRAL TREATMENT STATUS concept must be defined to run this test",ARTstatusConcept);
    Concept ActiveNotOnARVsConcept=Context.getConceptService().getConceptByName("ACTIVE NOT ON ARVS");
    assertNotNull("ACTIVE NOT ON ARVS concept must be defined to run this test",ARTstatusConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",ARTstatusConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("modifier","EQUAL",PatientSetService.Modifier.class);
    ps.addArgument("value",ActiveNotOnARVsConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("TransferredOutOnDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("TransferredInByEnd") == null) {
    System.out.println("Creating TransferredInByEnd...");
    Concept TransferredInConcept=Context.getConceptService().getConceptByName("TRANSFER IN FROM");
    assertNotNull("TRANSFER IN FROM concept must be defined to run this test",TransferredInConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("question",TransferredInConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("TransferredInByEnd",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("RegimenMissedOnOrBeforeDate") == null) {
    System.out.println("Creating RegimenMissedOnOrBeforeDate...");
    Concept RegimenMissedConcept=Context.getConceptService().getConceptByName("DATE OF MISSED VISIT");
    assertNotNull("DATE OF MISSED VISIT concept must be defined to run this test",RegimenMissedConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","ANY",PatientSetService.TimeModifier.class);
    ps.addArgument("question",RegimenMissedConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("RegimenMissedOnOrBeforeDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("RegimenMissedBetweenDates") == null) {
    System.out.println("Creating RegimenMissedBetweenDates...");
    Concept RegimenMissedConcept=Context.getConceptService().getConceptByName("DATE OF MISSED VISIT");
    assertNotNull("DATE OF MISSED VISIT concept must be defined to run this test",RegimenMissedConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("question",RegimenMissedConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("sinceDate","${date}",Date.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("RegimenMissedBetweenDates",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("RegimenReceivedBetweenDates") == null) {
    System.out.println("Creating RegimenReceivedBetweenDates...");
    Concept RegimenReceivedConcept=Context.getConceptService().getConceptByName("MEDICATIONS DISPENSED");
    assertNotNull("MEDICATIONS DISPENSED concept must be defined to run this test",RegimenReceivedConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("question",RegimenReceivedConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("sinceDate","${date}",Date.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("RegimenReceivedBetweenDates",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("CD4BetweenDates") == null) {
    System.out.println("Creating CD4BetweenDates...");
    Concept CD4Concept=Context.getConceptService().getConceptByName("CD4 COUNT");
    assertNotNull("CD4 COUNT concept must be defined to run this test",CD4Concept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",CD4Concept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","ANY",PatientSetService.TimeModifier.class);
    ps.addArgument("sinceDate","${date}",Date.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("CD4BetweenDates",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("CD4OnOrBeforeDate") == null) {
    System.out.println("Creating CD4OnOrBeforeDate...");
    Concept CD4Concept=Context.getConceptService().getConceptByName("CD4 COUNT");
    assertNotNull("CD4 COUNT concept must be defined to run this test",CD4Concept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("question",CD4Concept.getConceptId().toString(),Concept.class);
    ps.addArgument("timeModifier","ANY",PatientSetService.TimeModifier.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("CD4OnOrBeforeDate",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("RegimenOnOrBefore") == null) {
    System.out.println("Creating RegimenOnOrBefore...");
    PatientSearch ps=PatientSearch.createFilterSearch(DrugOrderFilter.class);
    ps.addArgument("drugList","${drug}",Drug.class);
    ps.addArgument("anyOrAll","ANY",PatientSetService.GroupMethod.class);
    ps.addArgument("untilDate","${date}",Date.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("RegimenOnOrBefore",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("WeightOnDate") == null) {
    System.out.println("Creating WeightOnDate...");
    Concept WeightConcept=Context.getConceptService().getConceptByName("WEIGHT (KG)");
    assertNotNull("WEIGHT (KG) concept must be defined to run this test",WeightConcept);
    PatientSearch ps=PatientSearch.createFilterSearch(ObsPatientFilter.class);
    ps.addArgument("timeModifier","LAST",PatientSetService.TimeModifier.class);
    ps.addArgument("question",WeightConcept.getConceptId().toString(),Concept.class);
    ps.addArgument("untilDate","${date}",Date.class);
    ps.addArgument("modifier","${modifier}",PatientSetService.Modifier.class);
    ps.addArgument("value","${value}",Object.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("WeightOnDate",ps));
  }
  setComplete();
}
