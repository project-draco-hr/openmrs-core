{
  upgradeTestUtil.executeDataset(STANDARD_TEST_1_9_7_DATASET);
  upgradeTestUtil.executeDataset(UPGRADE_TEST_1_9_7_TO_1_10_DATASET);
  List<List<Object>> rows=DatabaseUtil.executeSQLWithConnection(upgradeTestUtil.getConnection(),"select order_id from orders where orderer is null",true);
  Assert.assertEquals(2,rows.size());
  List<Integer> orderIdsWithNoOrderer=Arrays.asList((Integer)rows.get(0).get(0),(Integer)rows.get(1).get(0));
  rows=DatabaseUtil.executeSQLWithConnection(upgradeTestUtil.getConnection(),"select order_id, orderer from orders where orderer is not null",true);
  List<OrderAndPerson> ordersAndOrderersWithAProviderAccount=new ArrayList<OrderAndPerson>();
  for (  List<Object> row : rows) {
    ordersAndOrderersWithAProviderAccount.add(new OrderAndPerson((Integer)row.get(0),(Integer)row.get(1)));
  }
  Assert.assertEquals(3,ordersAndOrderersWithAProviderAccount.size());
  Set<Integer> originalProviderIds=DatabaseUtil.getUniqueNonNullColumnValues("provider_id","provider",Integer.class,upgradeTestUtil.getConnection());
  createOrderEntryUpgradeFileWithTestData("mg=111\ntab(s)=112\n1/day\\ x\\ 7\\ days/week=113\n2/day\\ x\\ 7\\ days/week=114");
  upgradeTestUtil.upgrade();
  for (  OrderAndPerson op : ordersAndOrderersWithAProviderAccount) {
    rows=DatabaseUtil.executeSQLWithConnection(upgradeTestUtil.getConnection(),"select p.provider_id, p.person_id from provider p join orders o on p.provider_id = o.orderer where order_id = " + op.getOrderId(),true);
    Assert.assertEquals(op.getPersonId(),rows.get(0).get(1));
    Assert.assertTrue(originalProviderIds.contains(rows.get(0).get(0)));
  }
  rows=DatabaseUtil.executeSQLWithConnection(upgradeTestUtil.getConnection(),"select order_id from orders where orderer = (Select provider_id from provider where uuid =" + "(select property_value from global_property where property = '" + OpenmrsConstants.GP_UNKNOWN_PROVIDER_UUID + "'))",true);
  Assert.assertEquals(orderIdsWithNoOrderer.size(),rows.size());
  Assert.assertTrue(orderIdsWithNoOrderer.contains(rows.get(0).get(0)));
  Assert.assertTrue(orderIdsWithNoOrderer.contains(rows.get(1).get(0)));
}
