{
  boolean retVal=true;
  try {
    String key="", nextKey="", tmpStr="";
    boolean startIterFlag=false;
    boolean boolFlag=false;
    boolean funcFlag=false;
    MLMObjectElement mObjElem;
    if (iter.hasNext()) {
      key=(String)iter.next();
      if (key.equals("IF")) {
        tmpStr=complexIf(key,null);
        w.append(tmpStr);
        while (iter.hasNext()) {
          w.flush();
          tmpStr="";
          nextKey=(String)iter.next();
          if (nextKey.equals("THEN")) {
            tmpStr+=" ) {\n\t";
            tmpStr+="\tvalueMap.add(val);\n";
            w.append(tmpStr);
          }
 else           if (nextKey.equals("IF")) {
            InNestedIf++;
            WriteLogic(iter,w);
            InNestedIf--;
            startIterFlag=false;
            boolFlag=false;
            tmpStr="";
          }
 else           if (nextKey.equals("AND")) {
            tmpStr+=" && ";
            w.append(tmpStr);
            w.flush();
            boolFlag=true;
          }
 else           if (nextKey.equals("OR")) {
            tmpStr+=" || ";
            w.append(tmpStr);
            w.flush();
            boolFlag=true;
          }
 else           if (boolFlag) {
            mObjElem=GetMLMObjectElement(nextKey);
            tmpStr+=complexBool(nextKey,mObjElem);
            w.append(tmpStr);
            boolFlag=false;
          }
 else           if (startIterFlag && !boolFlag && !funcFlag) {
            tmpStr+=complexIf(nextKey,null);
            w.append(tmpStr);
            startIterFlag=false;
            writeActionConcept(key,w);
            key=nextKey;
            nextKey="";
          }
 else           if (nextKey.equals("Logic_Assignment")) {
            writeActionConcept(key,w);
            if (InNestedIf == 0 && IsComplexIf) {
              IsComplexIf=false;
              w.append("\n\t}\n\t}\n");
            }
            nextKey="";
          }
 else           if (nextKey.equals("Conclude")) {
            w.append("\n\t //conclude here\n");
            writeActionConcept(key,w);
            if (InNestedIf == 0) {
              if (!IsComplexIf) {
                w.append("\n\t}\n");
              }
 else {
                w.append("\n\t}\n\t}\n");
                IsComplexIf=false;
              }
              if (key.startsWith("ELSE_")) {
                retVal=false;
              }
            }
            nextKey="";
          }
 else           if (nextKey.equals("EXIST") || (nextKey.equals("ANY"))) {
            funcFlag=true;
            key=nextKey;
          }
 else           if (funcFlag) {
            mObjElem=GetMLMObjectElement(nextKey);
            tmpStr+=complexFunc(nextKey,mObjElem,key);
            w.append(tmpStr);
            key=nextKey;
            funcFlag=false;
          }
 else {
            mObjElem=GetMLMObjectElement(nextKey);
            tmpStr+=complexIf(nextKey,mObjElem);
            w.append(tmpStr);
            key=nextKey;
          }
        }
      }
 else       if (key.startsWith("Conclude")) {
        w.append("\n\t //conclude here\n");
        writeActionConcept(key,w);
        retVal=false;
      }
    }
    w.append("\n");
  }
 catch (  Exception e) {
    System.err.println("Write Evaluate: " + e);
    e.printStackTrace();
  }
  return retVal;
}
