{
  boolean retValEval=true, retVal=true;
  try {
    String key;
    ListIterator<MLMEvaluateElement> thisList;
    thisList=evaluateList.listIterator(0);
    while (thisList.hasNext()) {
      Iterator iter1=thisList.next().iterator();
      while (iter1.hasNext()) {
        key=(String)iter1.next();
        retVal=writeEvaluateConcept(key,w);
        if (retVal == false) {
          retValEval=false;
        }
      }
    }
    if (retValEval == false) {
      return false;
    }
    w.append("\n@Override\npublic Result eval(LogicDataSource d, Patient p, Object[] args) {\n");
    w.append("\n\tpatient = p;\n\tdataSource = d;\n");
    w.append("\tuserVarMap = new HashMap <String, String>();\n");
    w.append("\tfirstname = patient.getPersonName().getGivenName();\n");
    w.append("\tuserVarMap.put(\"firstname\", firstname);\n");
    w.append("\tinitAction();\n");
    w.append("\tResult ruleResult = new Result(\"Evaluating Rule - " + classname + "...\");\n");
    w.append("\tString actionStr = \"\";\n\n");
    w.append("\tif(evaluate_logic(ruleResult)){\n");
    w.append("\t\tactionStr = doAction();\n");
    w.append("\t\truleResult.setValueText(\"Evaluating Rule - " + classname + "...............*****CONCLUDED TRUE****\");\n");
    w.append("\t\t//ruleResult.debug(0);\n");
    w.append("\t\treturn new Result(actionStr);\n");
    w.append("\n\t}\n\n");
    w.append("\truleResult.setValueText(\"Evaluating Rule - " + classname + "...............*****CONCLUDED FALSE****\");\n");
    w.append("\treturn ruleResult;\n");
    w.append("\n}\n");
    w.append("\n");
    w.append("private boolean evaluate_logic(Result valueMap) {\n");
    w.append("\tboolean retVal = false;\n");
    w.append("\tResult val;\n");
    thisList=evaluateList.listIterator(0);
    while (thisList.hasNext()) {
      Iterator iter=thisList.next().iterator();
      retVal=WriteLogic(iter,w);
      w.flush();
    }
    if (retVal) {
      w.append("\t\treturn retVal;\n");
    }
    w.append("\n\t}");
    w.append("\n");
  }
 catch (  Exception e) {
    System.err.println("Write Evaluate: " + e);
    e.printStackTrace();
  }
  return retValEval;
}
