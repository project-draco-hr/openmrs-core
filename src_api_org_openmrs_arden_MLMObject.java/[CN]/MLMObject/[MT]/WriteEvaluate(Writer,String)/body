{
  boolean retValEval=true, retVal=true;
  try {
    String key;
    ListIterator<MLMEvaluateElement> thisList;
    thisList=evaluateList.listIterator(0);
    if (retValEval == false) {
      return false;
    }
    w.append("\npublic Result eval(LogicContext context, Patient patient,\n" + "Map<String, Object> parameters) throws LogicException {\n");
    w.append("\tString actionStr = \"\";\n");
    w.append("\tResult ruleResult = new Result();\n");
    w.append("\tBoolean ageOK = null;\n\n\n\ttry {\n");
    w.append("\tuserVarMap = new HashMap <String, String>();\n");
    w.append("\tfirstname = patient.getPersonName().getGivenName();\n");
    w.append("\tuserVarMap.put(\"firstname\", firstname);\n");
    w.append("\tinitAction();\n");
    while (thisList.hasNext()) {
      Iterator iter1=thisList.next().iterator();
      while (iter1.hasNext()) {
        key=(String)iter1.next();
        retVal=writeEvaluateConcept(key,w);
        if (retVal == false) {
          retValEval=false;
        }
      }
    }
    w.append("\n\tif(evaluate_logic(ruleResult)){\n");
    w.append("\t\tactionStr = doAction();\n");
    w.append("\t\truleResult.clear();\n");
    w.append("\t\truleResult.add(new Result(actionStr));\n");
    w.append("\t\treturn ruleResult;\n");
    w.append("\n\t}\n\n");
    w.append("\n} catch (LogicException e) {\n");
    w.append("\t\treturn Result.emptyResult();");
    w.append("\n}\n\treturn ruleResult;\n}\n\n");
    w.append("\n");
    w.append("private boolean evaluate_logic(Result valueMap) {\n");
    w.append("\tboolean retVal = false;\n");
    w.append("\tif(valueMap.exists())\n\t{\n");
    w.append("\t\t//conclude here\n\t\tretVal = true;\n\t\treturn retVal;\n\t}\n\t\treturn retVal;");
    w.append("\n\t}");
    w.append("\n");
  }
 catch (  Exception e) {
    System.err.println("Write Evaluate: " + e);
    e.printStackTrace();
  }
  return retValEval;
}
