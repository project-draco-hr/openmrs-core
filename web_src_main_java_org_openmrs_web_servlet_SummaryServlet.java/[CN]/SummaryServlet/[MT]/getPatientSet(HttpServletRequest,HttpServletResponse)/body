{
  DateFormat dateFormat=Context.getDateFormat();
  String startDateString=ServletRequestUtils.getStringParameter(request,"startDate","");
  String endDateString=ServletRequestUtils.getStringParameter(request,"endDate","");
  String locationString=ServletRequestUtils.getStringParameter(request,"location","");
  String identifierStrings=ServletRequestUtils.getStringParameter(request,"patientIdentifiers","");
  Cohort ps=new Cohort();
  if ((startDateString.length() != 0) || (endDateString.length() != 0)) {
    Concept c=Context.getConceptService().getConcept(Integer.valueOf("5096"));
    Calendar cal=Calendar.getInstance();
    Date startDate;
    Date endDate;
    if (startDateString.length() != 0) {
      try {
        cal.setTime(dateFormat.parse(startDateString));
      }
 catch (      ParseException e) {
        throw new ServletException("Error parsing 'Start Date'",e);
      }
    }
 else {
      cal.setTime(new Date());
    }
    if (endDateString.equals("")) {
      while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
        cal.add(Calendar.DAY_OF_MONTH,-1);
      }
      startDate=cal.getTime();
      cal.add(Calendar.DAY_OF_MONTH,7);
      endDate=cal.getTime();
    }
 else {
      startDate=cal.getTime();
      try {
        cal.setTime(dateFormat.parse(endDateString));
      }
 catch (      ParseException e) {
        throw new ServletException("Error parsing 'End Date'",e);
      }
      endDate=cal.getTime();
    }
    ps=Cohort.union(ps,Context.getPatientSetService().getPatientsHavingDateObs(c.getConceptId(),startDate,endDate));
    log.debug("PatientSet length after adding Return Visit obs: " + ps.size());
  }
  if (locationString.length() > 0) {
    ps=Cohort.union(ps,Context.getPatientSetService().getPatientsHavingLocation(Integer.valueOf(locationString)));
  }
  List<String> identifiers=new Vector<String>();
  if (identifierStrings.length() > 0) {
    String[] stringArr=identifierStrings.split("\\s");
    for (int x=0; x < stringArr.length; x++) {
      String s=stringArr[x].trim();
      if (s.length() > 0) {
        identifiers.add(s);
      }
    }
  }
  if (identifiers.size() > 0) {
    for (int x=0; x < identifiers.size(); x++) {
      String id=identifiers.get(x);
      try {
        if (!OpenmrsUtil.isValidCheckDigit(id)) {
          log.warn("Invalid check digit: '" + id + "' at location "+ x);
        }
      }
 catch (      Exception e) {
        log.warn("Invalid check digit: '" + id + "' at location "+ x,e);
      }
    }
    ps=Cohort.union(ps,Context.getPatientSetService().convertPatientIdentifier(identifiers));
  }
  return ps;
}
