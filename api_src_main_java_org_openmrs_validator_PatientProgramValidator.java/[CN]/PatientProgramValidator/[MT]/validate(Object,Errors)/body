{
  if (log.isDebugEnabled())   log.debug(this.getClass().getName() + ".validate...");
  if (obj == null)   throw new IllegalArgumentException("The parameter obj should not be null");
  MessageSourceService mss=Context.getMessageSourceService();
  PatientProgram patientProgram=(PatientProgram)obj;
  ValidationUtils.rejectIfEmpty(errors,"patient","error.required",new Object[]{mss.getMessage("general.patient")});
  ValidationUtils.rejectIfEmpty(errors,"program","error.required",new Object[]{mss.getMessage("Program.program")});
  if (errors.hasErrors())   return;
  Set<ProgramWorkflow> workFlows=patientProgram.getProgram().getWorkflows();
  for (  ProgramWorkflow workFlow : workFlows) {
    Set<PatientState> patientStates=patientProgram.getStates();
    if (patientStates != null) {
      Set<String> statesAndStartDates=new HashSet<String>();
      PatientState latestState=null;
      Set<Date> uniqueStartDates=new HashSet<Date>();
      boolean foundCurrentPatientState=false;
      for (      PatientState patientState : patientStates) {
        if (patientState.isVoided())         continue;
        String missingRequiredFieldCode=null;
        if (patientState.getStartDate() == null)         missingRequiredFieldCode="general.dateStart";
 else         if (patientState.getState() == null)         missingRequiredFieldCode="State.state";
        if (missingRequiredFieldCode != null) {
          errors.reject("PatientState.error.requiredField",new Object[]{mss.getMessage(missingRequiredFieldCode)},null);
          return;
        }
        boolean isValidPatientState=false;
        for (        ProgramWorkflow wf : workFlows) {
          if (wf.getStates().contains(patientState.getState())) {
            isValidPatientState=true;
            break;
          }
        }
        if (!isValidPatientState) {
          errors.reject("PatientState.error.invalidPatientState",new Object[]{patientState},null);
          return;
        }
        if (!patientState.getState().getProgramWorkflow().equals(workFlow))         continue;
        if (OpenmrsUtil.compareWithNullAsLatest(patientState.getEndDate(),patientState.getStartDate()) < 0) {
          errors.reject("PatientState.error.endDateCannotBeBeforeStartDate");
          return;
        }
 else         if (statesAndStartDates.contains(patientState.getState().getId() + "" + patientState.getStartDate())) {
          errors.reject("PatientState.error.duplicatePatientStates");
          return;
        }
        if (!foundCurrentPatientState && patientState.getEndDate() == null)         foundCurrentPatientState=true;
 else         if (foundCurrentPatientState && patientState.getEndDate() == null) {
          errors.reject("PatientProgram.error.cannotBeInMultipleStates");
          return;
        }
        if (latestState == null)         latestState=patientState;
 else {
          if (OpenmrsUtil.compare(patientState.getStartDate(),latestState.getStartDate()) == 0 || uniqueStartDates.contains(patientState.getStartDate())) {
            errors.reject("PatientProgram.error.foundStatesWithSameStartDates");
            return;
          }
 else           if (patientState.compareTo(latestState) > 0) {
            if (latestState.getEndDate() == null) {
              errors.reject("PatientProgram.error.cannotBeInMultipleStates");
              return;
            }
 else             if (OpenmrsUtil.compare(patientState.getStartDate(),latestState.getEndDate()) < 0) {
              errors.reject("PatientProgram.error.foundOverlappingStates",new Object[]{patientState.getStartDate(),latestState.getEndDate()},null);
              return;
            }
            latestState=patientState;
          }
 else           if (patientState.compareTo(latestState) < 0) {
            if (patientState.getEndDate() == null) {
              errors.reject("PatientProgram.error.cannotBeInMultipleStates");
              return;
            }
 else             if (OpenmrsUtil.compare(latestState.getStartDate(),patientState.getEndDate()) < 0) {
              errors.reject("PatientProgram.error.foundOverlappingStates");
              return;
            }
          }
        }
        uniqueStartDates.add(patientState.getStartDate());
        statesAndStartDates.add(patientState.getState().getId() + "" + patientState.getStartDate());
      }
    }
  }
}
