{
  List<GlobalProperty> props=new Vector<GlobalProperty>();
  props.add(new GlobalProperty("use_patient_attribute.healthCenter","false","Indicates whether or not the 'health center' attribute is shown when viewing/searching for patients",BooleanDatatype.class,null));
  props.add(new GlobalProperty("use_patient_attribute.mothersName","false","Indicates whether or not mother's name is able to be added/viewed for a patient",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_NEWPATIENTFORM_SHOW_RELATIONSHIPS,"false","true/false whether or not to show the relationship editor on the addPatient.htm screen",BooleanDatatype.class,null));
  props.add(new GlobalProperty("dashboard.overview.showConcepts","","Comma delimited list of concepts ids to show on the patient dashboard overview tab"));
  props.add(new GlobalProperty("dashboard.encounters.showEmptyFields","true","true/false whether or not to show empty fields on the 'View Encounter' window",BooleanDatatype.class,null));
  props.add(new GlobalProperty("dashboard.encounters.usePages","smart","true/false/smart on how to show the pages on the 'View Encounter' window.  'smart' means that if > 50% of the fields have page numbers defined, show data in pages"));
  props.add(new GlobalProperty("dashboard.encounters.showViewLink","true","true/false whether or not to show the 'View Encounter' link on the patient dashboard",BooleanDatatype.class,null));
  props.add(new GlobalProperty("dashboard.encounters.showEditLink","true","true/false whether or not to show the 'Edit Encounter' link on the patient dashboard",BooleanDatatype.class,null));
  props.add(new GlobalProperty("dashboard.header.programs_to_show","","List of programs to show Enrollment details of in the patient header. (Should be an ordered comma-separated list of program_ids or names.)"));
  props.add(new GlobalProperty("dashboard.header.workflows_to_show","","List of programs to show Enrollment details of in the patient header. List of workflows to show current status of in the patient header. These will only be displayed if they belong to a program listed above. (Should be a comma-separated list of program_workflow_ids.)"));
  props.add(new GlobalProperty("dashboard.relationships.show_types","","Types of relationships separated by commas.  Doctor/Patient,Parent/Child"));
  props.add(new GlobalProperty("FormEntry.enableDashboardTab","true","true/false whether or not to show a Form Entry tab on the patient dashboard",BooleanDatatype.class,null));
  props.add(new GlobalProperty("FormEntry.enableOnEncounterTab","false","true/false whether or not to show a Enter Form button on the encounters tab of the patient dashboard",BooleanDatatype.class,null));
  props.add(new GlobalProperty("dashboard.regimen.displayDrugSetIds","ANTIRETROVIRAL DRUGS,TUBERCULOSIS TREATMENT DRUGS","Drug sets that appear on the Patient Dashboard Regimen tab. Comma separated list of name of concepts that are defined as drug sets."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DRUG_FREQUENCIES,"7 days/week,6 days/week,5 days/week,4 days/week,3 days/week,2 days/week,1 days/week","Frequency of a drug order that appear on the Patient Dashboard. Comma separated list of name of concepts that are defined as drug frequencies."));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_ABSOLUTE,"rgb(20,20,20)","Color of the 'invalid' section of numeric graphs on the patient dashboard."));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_NORMAL,"rgb(255,126,0)","Color of the 'normal' section of numeric graphs on the patient dashboard."));
  props.add(new GlobalProperty(GP_GRAPH_COLOR_CRITICAL,"rgb(200,0,0)","Color of the 'critical' section of numeric graphs on the patient dashboard."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCATION_WIDGET_TYPE,"default","Type of widget to use for location fields"));
  String standardRegimens="<list>" + "  <regimenSuggestion>" + "    <drugComponents>"+ "      <drugSuggestion>"+ "        <drugId>2</drugId>"+ "        <dose>1</dose>"+ "        <units>tab(s)</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "    </drugComponents>"+ "    <displayName>3TC + d4T(30) + NVP (Triomune-30)</displayName>"+ "    <codeName>standardTri30</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "  <regimenSuggestion>"+ "    <drugComponents>"+ "      <drugSuggestion>"+ "        <drugId>3</drugId>"+ "        <dose>1</dose>"+ "        <units>tab(s)</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "    </drugComponents>"+ "    <displayName>3TC + d4T(40) + NVP (Triomune-40)</displayName>"+ "    <codeName>standardTri40</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "  <regimenSuggestion>"+ "    <drugComponents>"+ "      <drugSuggestion>"+ "        <drugId>39</drugId>"+ "        <dose>1</dose>"+ "        <units>tab(s)</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "      <drugSuggestion>"+ "        <drugId>22</drugId>"+ "        <dose>200</dose>"+ "        <units>mg</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "    </drugComponents>"+ "    <displayName>AZT + 3TC + NVP</displayName>"+ "    <codeName>standardAztNvp</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "  <regimenSuggestion>"+ "    <drugComponents>"+ "      <drugSuggestion reference=\"../../../regimenSuggestion[3]/drugComponents/drugSuggestion\"/>"+ "      <drugSuggestion>"+ "        <drugId>11</drugId>"+ "        <dose>600</dose>"+ "        <units>mg</units>"+ "        <frequency>1/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "    </drugComponents>"+ "    <displayName>AZT + 3TC + EFV(600)</displayName>"+ "    <codeName>standardAztEfv</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "  <regimenSuggestion>"+ "    <drugComponents>"+ "      <drugSuggestion>"+ "        <drugId>5</drugId>"+ "        <dose>30</dose>"+ "        <units>mg</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "      <drugSuggestion>"+ "        <drugId>42</drugId>"+ "        <dose>150</dose>"+ "        		<units>mg</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "      <drugSuggestion reference=\"../../../regimenSuggestion[4]/drugComponents/drugSuggestion[2]\"/>"+ "    </drugComponents>"+ "    <displayName>d4T(30) + 3TC + EFV(600)</displayName>"+ "    <codeName>standardD4t30Efv</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "  <regimenSuggestion>"+ "    <drugComponents>"+ "      <drugSuggestion>"+ "        <drugId>6</drugId>"+ "        <dose>40</dose>"+ "        <units>mg</units>"+ "        <frequency>2/day x 7 days/week</frequency>"+ "        <instructions></instructions>"+ "      </drugSuggestion>"+ "      <drugSuggestion reference=\"../../../regimenSuggestion[5]/drugComponents/drugSuggestion[2]\"/>"+ "      <drugSuggestion reference=\"../../../regimenSuggestion[4]/drugComponents/drugSuggestion[2]\"/>"+ "    </drugComponents>"+ "    <displayName>d4T(40) + 3TC + EFV(600)</displayName>"+ "    <codeName>standardD4t40Efv</codeName>"+ "    <canReplace>ANTIRETROVIRAL DRUGS</canReplace>"+ "  </regimenSuggestion>"+ "</list>";
  props.add(new GlobalProperty(GLOBAL_PROPERTY_STANDARD_DRUG_REGIMENS,standardRegimens,"XML description of standard drug regimens, to be shown as shortcuts on the dashboard regimen entry tab"));
  props.add(new GlobalProperty("concept.weight","5089","Concept id of the concept defining the WEIGHT concept"));
  props.add(new GlobalProperty("concept.height","5090","Concept id of the concept defining the HEIGHT concept"));
  props.add(new GlobalProperty("concept.cd4_count","5497","Concept id of the concept defining the CD4 count concept"));
  props.add(new GlobalProperty("concept.causeOfDeath","5002","Concept id of the concept defining the CAUSE OF DEATH concept"));
  props.add(new GlobalProperty("concept.none","1107","Concept id of the concept defining the NONE concept"));
  props.add(new GlobalProperty("concept.otherNonCoded","5622","Concept id of the concept defining the OTHER NON-CODED concept"));
  props.add(new GlobalProperty("concept.patientDied","1742","Concept id of the concept defining the PATIENT DIED concept"));
  props.add(new GlobalProperty("concept.reasonExitedCare","","Concept id of the concept defining the REASON EXITED CARE concept"));
  props.add(new GlobalProperty("concept.reasonOrderStopped","1812","Concept id of the concept defining the REASON ORDER STOPPED concept"));
  props.add(new GlobalProperty("mail.transport_protocol","smtp","Transport protocol for the messaging engine. Valid values: smtp"));
  props.add(new GlobalProperty("mail.smtp_host","localhost","SMTP host name"));
  props.add(new GlobalProperty("mail.smtp_port","25","SMTP port"));
  props.add(new GlobalProperty("mail.from","info@openmrs.org","Email address to use as the default from address"));
  props.add(new GlobalProperty("mail.debug","false","true/false whether to print debugging information during mailing"));
  props.add(new GlobalProperty("mail.smtp_auth","false","true/false whether the smtp host requires authentication"));
  props.add(new GlobalProperty("mail.user","test","Username of the SMTP user (if smtp_auth is enabled)"));
  props.add(new GlobalProperty("mail.password","test","Password for the SMTP user (if smtp_auth is enabled)"));
  props.add(new GlobalProperty("mail.default_content_type","text/plain","Content type to append to the mail messages"));
  props.add(new GlobalProperty(ModuleConstants.REPOSITORY_FOLDER_PROPERTY,ModuleConstants.REPOSITORY_FOLDER_PROPERTY_DEFAULT,"Name of the folder in which to store the modules"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_ADDRESS_TEMPLATE,DEFAULT_ADDRESS_TEMPLATE,"XML description of address formats"));
  props.add(new GlobalProperty("layout.name.format","short","Format in which to display the person names.  Valid values are short, long"));
  props.add(new GlobalProperty("scheduler.username",SchedulerConstants.SCHEDULER_DEFAULT_USERNAME,"Username for the OpenMRS user that will perform the scheduler activities"));
  props.add(new GlobalProperty("scheduler.password",SchedulerConstants.SCHEDULER_DEFAULT_PASSWORD,"Password for the OpenMRS user that will perform the scheduler activities"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_CONCEPTS_LOCKED,"false","if true, do not allow editing concepts",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_LISTING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for patients in _lists_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_VIEWING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for patients when _viewing individually_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_HEADER_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that will be shown on the patient dashboard"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_LISTING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for users in _lists_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_VIEWING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for users when _viewing individually_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_HEADER_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that will be shown on the user dashboard. (not used in v1.5)"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX,"","WARNING: Using this search property can cause a drop in mysql performance with large patient sets.  A MySQL regular expression for the patient identifier search strings.  The @SEARCH@ string is replaced at runtime with the user's search string.  An empty regex will cause a simply 'like' sql search to be used. Example: ^0*@SEARCH@([A-Z]+-[0-9])?$"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_PREFIX,"","This property is only used if " + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + " is empty.  The string here is prepended to the sql indentifier search string.  The sql becomes \"... where identifier like '<PREFIX><QUERY STRING><SUFFIX>';\".  Typically this value is either a percent sign (%) or empty."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SUFFIX,"","This property is only used if " + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + " is empty.  The string here is prepended to the sql indentifier search string.  The sql becomes \"... where identifier like '<PREFIX><QUERY STRING><SUFFIX>';\".  Typically this value is either a percent sign (%) or empty."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SEARCH_PATTERN,"","If this is empty, the regex or suffix/prefix search is used.  Comma separated list of identifiers to check.  Allows for faster searching of multiple options rather than the slow regex. e.g. @SEARCH@,0@SEARCH@,@SEARCH-1@-@CHECKDIGIT@,0@SEARCH-1@-@CHECKDIGIT@ would turn a request for \"4127\" into a search for \"in ('4127','04127','412-7','0412-7')\""));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_NAME_REGEX,"^[a-zA-Z \\-]+$","Names of the patients must pass this regex. Eg : ^[a-zA-Z \\-]+$ contains only english alphabet letters, spaces, and hyphens. A value of .* or the empty string means no validation is done."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS,String.valueOf(GLOBAL_PROPERTY_PERSON_SEARCH_MAX_RESULTS_DEFAULT_VALUE),"The maximum number of results returned by patient searches"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_GZIP_ENABLED,"false","Set to 'true' to turn on OpenMRS's gzip filter, and have the webapp compress data before sending it to any client that supports it. Generally use this if you are running Tomcat standalone. If you are running Tomcat behind Apache, then you'd want to use Apache to do gzip compression.",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_REPORT_XML_MACROS,"","Macros that will be applied to Report Schema XMLs when they are interpreted. This should be java.util.properties format."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MEDICAL_RECORD_OBSERVATIONS,"1238","The concept id of the MEDICAL_RECORD_OBSERVATIONS concept.  This concept_id is presumed to be the generic grouping (obr) concept in hl7 messages.  An obs_group row is not created for this concept."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PROBLEM_LIST,"1284","The concept id of the PROBLEM LIST concept.  This concept_id is presumed to be the generic grouping (obr) concept in hl7 messages.  An obs_group row is not created for this concept."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOG_LEVEL,"org.openmrs.api:" + LOG_LEVEL_INFO,"Logging levels for log4j.xml. Valid format is class:level,class:level. If class not specified, 'org.openmrs.api' presumed. Valid levels are trace, debug, info, warn, error or fatal"));
  props.add(new GlobalProperty(GP_LOG_LOCATION,"","A directory where the OpenMRS log file appender is stored. The log file name is 'openmrs.log'."));
  props.add(new GlobalProperty(GP_LOG_LAYOUT,"%p - %C{1}.%M(%L) |%d{ISO8601}| %m%n","A log layout pattern which is used by the OpenMRS file appender."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_PATIENT_IDENTIFIER_VALIDATOR,LUHN_IDENTIFIER_VALIDATOR,"This property sets the default patient identifier validator.  The default validator is only used in a handful of (mostly legacy) instances.  For example, it's used to generate the isValidCheckDigit calculated column and to append the string \"(default)\" to the name of the default validator on the editPatientIdentifierType form."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_IMPORTANT_TYPES,"","A comma delimited list of PatientIdentifier names : PatientIdentifier locations that will be displayed on the patient dashboard.  E.g.: TRACnet ID:Rwanda,ELDID:Kenya"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_COMPLEX_OBS_DIR,"complex_obs","Default directory for storing complex obs."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_ENCOUNTER_FORM_OBS_SORT_ORDER,"number","The sort order for the obs listed on the encounter edit form.  'number' sorts on the associated numbering from the form schema.  'weight' sorts on the order displayed in the form schema."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_LOCALE_ALLOWED_LIST,"en, es, fr, it, pt","Comma delimited list of locales allowed for use on system"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_NEWPATIENTFORM_RELATIONSHIPS,"","Comma separated list of the RelationshipTypes to show on the new/short patient form.  The list is defined like '3a, 4b, 7a'.  The number is the RelationshipTypeId and the 'a' vs 'b' part is which side of the relationship is filled in by the user."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_MIN_SEARCH_CHARACTERS,"3","Number of characters user must input before searching is started."));
  props.add(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE,OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE,"Specifies the default locale. You can specify both the language code(ISO-639) and the country code(ISO-3166), e.g. 'en_GB' or just country: e.g. 'en'"));
  props.add(new GlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_WEEK_START_DAY,OpenmrsConstants.GLOBAL_PROPERTY_DEFAULT_WEEK_START_DAY_DEFAULT_VALUE,"First day of the week in the date picker. Domingo/Dimanche/Sunday:0  Lunes/Lundi/Monday:1"));
  props.add(new GlobalProperty(GP_PASSWORD_CANNOT_MATCH_USERNAME_OR_SYSTEMID,"true","Configure whether passwords must not match user's username or system id",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GP_PASSWORD_CUSTOM_REGEX,"","Configure a custom regular expression that a password must match"));
  props.add(new GlobalProperty(GP_PASSWORD_MINIMUM_LENGTH,"8","Configure the minimum length required of all passwords"));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_DIGIT,"true","Configure whether passwords must contain at least one digit",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_NON_DIGIT,"true","Configure whether passwords must contain at least one non-digit",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GP_PASSWORD_REQUIRES_UPPER_AND_LOWER_CASE,"true","Configure whether passwords must contain both upper and lower case characters",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_IGNORE_MISSING_NONLOCAL_PATIENTS,"false","If true, hl7 messages for patients that are not found and are non-local will silently be dropped/ignored",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_SHOW_PATIENT_NAME,"false","Whether or not to display the patient name in the patient dashboard title. Note that enabling this could be security risk if multiple users operate on the same computer.",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_THEME,"","Default theme for users.  OpenMRS ships with themes of 'green', 'orange', 'purple', and 'legacy'"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_HL7_ARCHIVE_DIRECTORY,HL7Constants.HL7_ARCHIVE_DIRECTORY_NAME,"The default name or absolute path for the folder where to write the hl7_in_archives."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_REPORT_BUG_URL,"http://errors.openmrs.org/scrap","The openmrs url where to submit bug reports"));
  props.add(new GlobalProperty(GP_SEARCH_WIDGET_BATCH_SIZE,"200","The maximum number of search results that are returned by an ajax call"));
  props.add(new GlobalProperty(GP_SEARCH_WIDGET_IN_SERIAL_MODE,"false","Specifies whether the search widgets should make ajax requests in serial or parallel order, a value of true is appropriate for implementations running on a slow network connection and vice versa",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GP_SEARCH_WIDGET_DELAY_INTERVAL,"400","Specifies time interval in milliseconds when searching, between keyboard keyup event and triggering the search off, should be higher if most users are slow when typing so as to minimise the load on the server"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_DEFAULT_LOCATION_NAME,"Unknown Location","The name of the location to use as a system default"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_SEARCH_MATCH_MODE,"START","Specifies how patient names are matched while searching patient. Valid values are 'ANYWHERE' or 'START'. Defaults to start if missing or invalid value is present."));
  props.add(new GlobalProperty(GP_ORDER_ENTRY_ORDER_NUMBER_PREFIX,ORDER_NUMBER_DEFAULT_PREFIX,"Specifies the prefix used when creating order numbers"));
  props.add(new GlobalProperty(GP_ENABLE_CONCEPT_MAP_TYPE_MANAGEMENT,"false","Enables or disables management of concept map types",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_ENABLE_VISITS,"true","Set to true to enable the Visits feature. This will replace the 'Encounters' tab with a 'Visits' tab on the dashboard.",BooleanDatatype.class,null));
  props.add(new GlobalProperty(GP_VISIT_ASSIGNMENT_HANDLER,ExistingVisitAssignmentHandler.class.getName(),"Set to the name of the class responsible for assigning encounters to visits."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_APPLICATION_NAME,"OpenMRS","The name of this application, as presented to the user, for example on the login and welcome pages."));
  props.add(new GlobalProperty(GP_ENCOUNTER_TYPE_TO_VISIT_TYPE_MAPPING,"","Specifies how encounter types are mapped to visit types when automatically assigning encounters to visits. e.g 1:1, 2:1, 3:2 in the format encounterTypeId:visitTypeId or encounterTypeUuid:visitTypeUuid or a combination of encounter/visit type uuids and ids e.g 1:759799ab-c9a5-435e-b671-77773ada74e4"));
  props.add(new GlobalProperty(GP_DASHBOARD_PROVIDER_DISPLAY_ENCOUNTER_ROLES,"","A comma-separated list of encounter roles (by name or id). Providers with these roles in an encounter will be displayed on the encounter tab of the patient dashboard."));
  props.add(new GlobalProperty(GP_SEARCH_WIDGET_MAXIMUM_RESULTS,"2000","Specifies the maximum number of results to return from a single search in the search widgets"));
  props.add(new GlobalProperty(GP_DASHBOARD_MAX_NUMBER_OF_ENCOUNTERS_TO_SHOW,"","An integer which, if specified, would determine the maximum number of encounters to display on the encounter tab of the patient dashboard."));
  props.add(new GlobalProperty(GP_VISIT_TYPES_TO_AUTO_CLOSE,"","comma-separated list of the visit type(s) to automatically close"));
  props.add(new GlobalProperty(GP_ALLOWED_FAILED_LOGINS_BEFORE_LOCKOUT,"7","Maximum number of failed logins allowed after which username is locked out"));
  props.add(new GlobalProperty(GP_DEFAULT_CONCEPT_MAP_TYPE,"NARROWER-THAN","Default concept map type which is used when no other is set"));
  props.add(new GlobalProperty(GP_CONCEPT_DRUG_DOSAGE_FORM_CONCEPT_CLASSES,"","A comma-separated list of the allowed concept classes for the dosage form field of the concept drug management form."));
  props.add(new GlobalProperty(GP_CONCEPT_DRUG_ROUTE_CONCEPT_CLASSES,"","A comma-separated list of the allowed concept classes for the route field of the concept drug management form."));
  props.add(new GlobalProperty(GP_CASE_SENSITIVE_NAMES_IN_CONCEPT_NAME_TABLE,"true","Indicates whether names in the concept_name table are case sensitive or not. Setting this to false for MySQL with a case insensitive collation improves search performance."));
  props.add(new GlobalProperty(GP_DASHBOARD_METADATA_CASE_CONVERSION,"","Indicates which type automatic case conversion is applied to program/workflow/state in the patient dashboard. Valid values: lowercase, uppercase, capitalize. If empty no conversion is applied."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_REQUIRE_EMAIL_AS_USERNAME,"false","Indicates whether a username must be a valid e-mail or not.",BooleanDatatype.class,null));
  for (  GlobalProperty gp : ModuleFactory.getGlobalProperties()) {
    props.add(gp);
  }
  return props;
}
