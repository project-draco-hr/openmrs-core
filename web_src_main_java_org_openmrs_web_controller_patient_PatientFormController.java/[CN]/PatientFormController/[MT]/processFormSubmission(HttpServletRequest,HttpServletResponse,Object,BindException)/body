{
  Patient patient=(Patient)object;
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    LocationService ls=Context.getLocationService();
    Object[] objs=null;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter("action");
    if (action.equals(msa.getMessage("Patient.save"))) {
      objs=patient.getIdentifiers().toArray();
      for (int i=0; i < objs.length; i++) {
        if (request.getParameter("identifiers[" + i + "].identifier") == null)         patient.removeIdentifier((PatientIdentifier)objs[i]);
      }
      String[] ids=request.getParameterValues("identifier");
      String[] idTypes=request.getParameterValues("identifierType");
      String[] locs=request.getParameterValues("location");
      String[] idPrefStatus=ServletRequestUtils.getStringParameters(request,"preferred");
      if (ids != null) {
        for (int i=0; i < ids.length; i++) {
          String id=ids[i].trim();
          if (!id.equals("") && !idTypes.equals("")) {
            PatientIdentifier pi=new PatientIdentifier();
            pi.setIdentifier(id);
            pi.setIdentifierType(ps.getPatientIdentifierType(Integer.valueOf(idTypes[i])));
            if (StringUtils.isNotEmpty(locs[i])) {
              pi.setLocation(ls.getLocation(Integer.valueOf(locs[i])));
            }
            if (idPrefStatus != null && idPrefStatus.length > i)             pi.setPreferred(new Boolean(idPrefStatus[i]));
            new PatientIdentifierValidator().validate(pi,errors);
            if (errors.hasErrors()) {
              return showForm(request,response,errors);
            }
            patient.addIdentifier(pi);
          }
        }
      }
      Iterator<PatientIdentifier> identifiers=patient.getIdentifiers().iterator();
      PatientIdentifier currentId=null;
      PatientIdentifier preferredId=null;
      while (identifiers.hasNext()) {
        currentId=identifiers.next();
        if (currentId.isPreferred()) {
          if (preferredId != null) {
            preferredId.setPreferred(false);
          }
          preferredId=currentId;
        }
      }
      if ((preferredId == null) && (currentId != null)) {
        currentId.setPreferred(true);
      }
      String[] add1s=ServletRequestUtils.getStringParameters(request,"address1");
      String[] add2s=ServletRequestUtils.getStringParameters(request,"address2");
      String[] cities=ServletRequestUtils.getStringParameters(request,"cityVillage");
      String[] states=ServletRequestUtils.getStringParameters(request,"stateProvince");
      String[] countries=ServletRequestUtils.getStringParameters(request,"country");
      String[] lats=ServletRequestUtils.getStringParameters(request,"latitude");
      String[] longs=ServletRequestUtils.getStringParameters(request,"longitude");
      String[] pCodes=ServletRequestUtils.getStringParameters(request,"postalCode");
      String[] counties=ServletRequestUtils.getStringParameters(request,"countyDistrict");
      String[] cells=ServletRequestUtils.getStringParameters(request,"neighborhoodCell");
      String[] addPrefStatus=ServletRequestUtils.getStringParameters(request,"preferred");
      String[] startDates=ServletRequestUtils.getStringParameters(request,"startDate");
      String[] endDates=ServletRequestUtils.getStringParameters(request,"endDate");
      if (add1s != null || add2s != null || cities != null || states != null || countries != null || lats != null || longs != null || pCodes != null || counties != null || cells != null || startDates != null || endDates != null) {
        int maxAddrs=0;
        if (add1s != null)         if (add1s.length > maxAddrs)         maxAddrs=add1s.length;
        if (add2s != null)         if (add2s.length > maxAddrs)         maxAddrs=add2s.length;
        if (cities != null)         if (cities.length > maxAddrs)         maxAddrs=cities.length;
        if (states != null)         if (states.length > maxAddrs)         maxAddrs=states.length;
        if (countries != null)         if (countries.length > maxAddrs)         maxAddrs=countries.length;
        if (lats != null)         if (lats.length > maxAddrs)         maxAddrs=lats.length;
        if (longs != null)         if (longs.length > maxAddrs)         maxAddrs=longs.length;
        if (pCodes != null)         if (pCodes.length > maxAddrs)         maxAddrs=pCodes.length;
        if (counties != null)         if (counties.length > maxAddrs)         maxAddrs=counties.length;
        if (cells != null)         if (cells.length > maxAddrs)         maxAddrs=cells.length;
        if (startDates != null)         if (startDates.length > maxAddrs)         maxAddrs=startDates.length;
        if (endDates != null)         if (endDates.length > maxAddrs)         maxAddrs=endDates.length;
        log.debug("There appears to be " + maxAddrs + " addresses that need to be saved");
        for (int i=0; i < maxAddrs; i++) {
          PersonAddress pa=new PersonAddress();
          if (add1s.length >= i + 1)           pa.setAddress1(add1s[i]);
          if (add2s.length >= i + 1)           pa.setAddress2(add2s[i]);
          if (cities.length >= i + 1)           pa.setCityVillage(cities[i]);
          if (states.length >= i + 1)           pa.setStateProvince(states[i]);
          if (countries.length >= i + 1)           pa.setCountry(countries[i]);
          if (lats.length >= i + 1)           pa.setLatitude(lats[i]);
          if (longs.length >= i + 1)           pa.setLongitude(longs[i]);
          if (pCodes.length >= i + 1)           pa.setPostalCode(pCodes[i]);
          if (counties.length >= i + 1)           pa.setCountyDistrict(counties[i]);
          if (cells.length >= i + 1)           pa.setNeighborhoodCell(cells[i]);
          if (addPrefStatus != null && addPrefStatus.length > i)           pa.setPreferred(new Boolean(addPrefStatus[i]));
          if (startDates.length >= i + 1 && StringUtils.isNotBlank(startDates[i]))           pa.setStartDate(Context.getDateFormat().parse(startDates[i]));
          if (endDates.length >= i + 1 && StringUtils.isNotBlank(endDates[i]))           pa.setEndDate(Context.getDateFormat().parse(endDates[i]));
          patient.addAddress(pa);
        }
        Iterator<PersonAddress> addresses=patient.getAddresses().iterator();
        PersonAddress currentAddress=null;
        PersonAddress preferredAddress=null;
        while (addresses.hasNext()) {
          currentAddress=addresses.next();
          if (currentAddress.isPreferred()) {
            if (preferredAddress != null) {
              preferredAddress.setPreferred(false);
            }
            preferredAddress=currentAddress;
          }
        }
        if ((preferredAddress == null) && (currentAddress != null)) {
          currentAddress.setPreferred(true);
        }
      }
      objs=patient.getNames().toArray();
      for (int i=0; i < objs.length; i++) {
        if (request.getParameter("names[" + i + "].givenName") == null)         patient.removeName((PersonName)objs[i]);
      }
      String[] gNames=ServletRequestUtils.getStringParameters(request,"givenName");
      String[] mNames=ServletRequestUtils.getStringParameters(request,"middleName");
      String[] fNamePrefixes=ServletRequestUtils.getStringParameters(request,"familyNamePrefix");
      String[] fNames=ServletRequestUtils.getStringParameters(request,"familyName");
      String[] fName2s=ServletRequestUtils.getStringParameters(request,"familyName2");
      String[] fNameSuffixes=ServletRequestUtils.getStringParameters(request,"familyNameSuffix");
      String[] degrees=ServletRequestUtils.getStringParameters(request,"degree");
      String[] namePrefStatus=ServletRequestUtils.getStringParameters(request,"preferred");
      if (gNames != null) {
        for (int i=0; i < gNames.length; i++) {
          if (!"".equals(gNames[i])) {
            PersonName pn=new PersonName();
            if (namePrefStatus != null && namePrefStatus.length > i)             pn.setPreferred(new Boolean(namePrefStatus[i]));
            if (gNames.length >= i + 1)             pn.setGivenName(gNames[i]);
            if (mNames.length >= i + 1)             pn.setMiddleName(mNames[i]);
            if (fNamePrefixes.length >= i + 1)             pn.setFamilyNamePrefix(fNamePrefixes[i]);
            if (fNames.length >= i + 1)             pn.setFamilyName(fNames[i]);
            if (fName2s.length >= i + 1)             pn.setFamilyName2(fName2s[i]);
            if (fNameSuffixes.length >= i + 1)             pn.setFamilyNameSuffix(fNameSuffixes[i]);
            if (degrees.length >= i + 1)             pn.setDegree(degrees[i]);
            patient.addName(pn);
          }
        }
        Iterator<PersonName> names=patient.getNames().iterator();
        PersonName currentName=null;
        PersonName preferredName=null;
        while (names.hasNext()) {
          currentName=names.next();
          if (currentName.isPreferred()) {
            if (preferredName != null) {
              preferredName.setPreferred(false);
            }
            preferredName=currentName;
          }
        }
        if ((preferredName == null) && (currentName != null)) {
          currentName.setPreferred(true);
        }
      }
      for (      PatientIdentifier pi : patient.getIdentifiers()) {
        if (pi.isVoided())         continue;
        PatientIdentifierType pit=pi.getIdentifierType();
        String identifier=pi.getIdentifier();
        String format=pit.getFormat();
        String formatDescription=pit.getFormatDescription();
        String formatStr=format;
        if (format == null)         formatStr="";
        if (formatDescription != null)         if (formatDescription.length() > 0)         formatStr=formatDescription;
        String[] args={identifier,formatStr};
        try {
          if (format != null)           if (format.length() > 0 && !identifier.matches(format)) {
            log.error("Identifier format is not valid: (" + format + ") "+ identifier);
            String msg=getMessageSourceAccessor().getMessage("error.identifier.formatInvalid",args);
            errors.rejectValue("identifiers",msg);
          }
        }
 catch (        Exception e) {
          log.error("exception thrown with: " + pit.getName() + " "+ identifier);
          log.error("Error while adding patient identifiers to savedIdentifier list",e);
          String msg=getMessageSourceAccessor().getMessage("error.identifier.formatInvalid",args);
          errors.rejectValue("identifiers",msg);
        }
        if (errors.hasErrors())         return showForm(request,response,errors);
      }
    }
  }
  return super.processFormSubmission(request,response,patient,errors);
}
