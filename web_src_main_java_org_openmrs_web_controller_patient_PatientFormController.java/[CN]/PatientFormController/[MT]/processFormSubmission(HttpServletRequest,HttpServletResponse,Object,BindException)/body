{
  if (errors.hasErrors()) {
    return showForm(request,response,errors);
  }
  Patient patient=(Patient)object;
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    LocationService ls=Context.getLocationService();
    Object[] objs=null;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter("action");
    if (action.equals(msa.getMessage("Patient.save"))) {
      updatePersonNames(request,patient);
      updatePersonAddresses(request,patient);
      updatePersonAttributes(request,errors,patient);
      objs=patient.getIdentifiers().toArray();
      for (int i=0; i < objs.length; i++) {
        if (request.getParameter("identifiers[" + i + "].identifier") == null)         patient.removeIdentifier((PatientIdentifier)objs[i]);
      }
      String[] ids=request.getParameterValues("identifier");
      String[] idTypes=request.getParameterValues("identifierType");
      String[] locs=request.getParameterValues("location");
      String[] idPrefStatus=ServletRequestUtils.getStringParameters(request,"preferred");
      if (ids != null) {
        for (int i=0; i < ids.length; i++) {
          String id=ids[i].trim();
          if (!id.equals("") && !idTypes.equals("")) {
            PatientIdentifier pi=new PatientIdentifier();
            pi.setIdentifier(id);
            pi.setIdentifierType(ps.getPatientIdentifierType(Integer.valueOf(idTypes[i])));
            if (StringUtils.isNotEmpty(locs[i])) {
              pi.setLocation(ls.getLocation(Integer.valueOf(locs[i])));
            }
            if (idPrefStatus != null && idPrefStatus.length > i)             pi.setPreferred(new Boolean(idPrefStatus[i]));
            new PatientIdentifierValidator().validate(pi,errors);
            if (errors.hasErrors()) {
              return showForm(request,response,errors);
            }
            patient.addIdentifier(pi);
          }
        }
      }
      Iterator<PatientIdentifier> identifiers=patient.getIdentifiers().iterator();
      PatientIdentifier currentId=null;
      PatientIdentifier preferredId=null;
      while (identifiers.hasNext()) {
        currentId=identifiers.next();
        if (currentId.isPreferred()) {
          if (preferredId != null) {
            preferredId.setPreferred(false);
          }
          preferredId=currentId;
        }
      }
      if ((preferredId == null) && (currentId != null)) {
        currentId.setPreferred(true);
      }
      for (      PatientIdentifier pi : patient.getIdentifiers()) {
        if (pi.isVoided())         continue;
        PatientIdentifierType pit=pi.getIdentifierType();
        String identifier=pi.getIdentifier();
        String format=pit.getFormat();
        String formatDescription=pit.getFormatDescription();
        String formatStr=format;
        if (format == null)         formatStr="";
        if (formatDescription != null)         if (formatDescription.length() > 0)         formatStr=formatDescription;
        String[] args={identifier,formatStr};
        try {
          if (format != null)           if (format.length() > 0 && !identifier.matches(format)) {
            log.error("Identifier format is not valid: (" + format + ") "+ identifier);
            String msg=getMessageSourceAccessor().getMessage("error.identifier.formatInvalid",args);
            errors.rejectValue("identifiers",msg);
          }
        }
 catch (        Exception e) {
          log.error("exception thrown with: " + pit.getName() + " "+ identifier);
          log.error("Error while adding patient identifiers to savedIdentifier list",e);
          String msg=getMessageSourceAccessor().getMessage("error.identifier.formatInvalid",args);
          errors.rejectValue("identifiers",msg);
        }
        if (errors.hasErrors())         return showForm(request,response,errors);
      }
    }
  }
  return super.processFormSubmission(request,response,patient,errors);
}
