{
  PatientService ps=Context.getPatientService();
  UserService us=Context.getUserService();
  PersonService personService=Context.getPersonService();
  List<Relationship> relsToAdd=new ArrayList<Relationship>();
  Random rand=new Random();
  for (  String s : relationships) {
    if (s.indexOf(":") >= 0)     s=s.substring(s.indexOf(":") + 1);
    String[] ss=s.split(",");
    if (ss.length < 5)     throw new IllegalArgumentException("The line '" + s + "' is in the wrong format");
    String userLastName=ss[0];
    String userFirstName=ss[1];
    String username=(userFirstName + userLastName).replaceAll(" ","");
    String relationshipType=ss[2];
    String identifierType=ss[3];
    String identifier=ss[4];
    User user=null;
{
      List<User> users=us.findUsers(userFirstName,userLastName,false);
      if (users.size() == 1)       user=users.get(0);
 else       if (users.size() > 1) {
        throw new IllegalArgumentException("Found " + users.size() + " users named '"+ userLastName+ ", "+ userFirstName+ "'");
      }
    }
    if (user == null) {
      List<User> users=us.findUsers(userFirstName,userLastName,false);
      if (users.size() == 1)       user=users.get(0);
 else       if (users.size() > 1) {
        throw new IllegalArgumentException("Found " + users.size() + " voided users named '"+ userLastName+ ", "+ userFirstName+ "'");
      }
    }
    if (user == null && autoCreateUsers) {
      user=new User();
      PersonName pn=new PersonName(userFirstName,"",userLastName);
      user.addName(pn);
      user.setUsername(username);
      String pass=null;
{
        int length=rand.nextInt(4) + 8;
        char[] password=new char[length];
        for (int x=0; x < length; x++) {
          int randDecimalAsciiVal=rand.nextInt(93) + 33;
          password[x]=(char)randDecimalAsciiVal;
        }
        pass=new String(password);
      }
      if (autoAddRole) {
        Role role=us.getRole(relationshipType);
        if (role != null)         user.addRole(role);
      }
      us.createUser(user,pass);
    }
    if (user == null)     throw new IllegalArgumentException("Can't find user '" + userLastName + ", "+ userFirstName+ "'");
    Person person=personService.getPerson(user);
    RelationshipType relationship=personService.findRelationshipType(relationshipType);
    PatientIdentifierType pit=ps.getPatientIdentifierType(identifierType);
    List<PatientIdentifier> found=ps.getPatientIdentifiers(identifier,pit);
    if (found.size() != 1)     throw new IllegalArgumentException("Found " + found.size() + " patients with identifier '"+ identifier+ "' of type "+ identifierType);
    Person relative=personService.getPerson(found.get(0).getPatient());
    Relationship rel=new Relationship();
    rel.setPersonA(person);
    rel.setRelationshipType(relationship);
    rel.setPersonB(relative);
    relsToAdd.add(rel);
  }
  int addedSoFar=0;
  for (  Relationship rel : relsToAdd) {
    personService.createRelationship(rel);
    ++addedSoFar;
  }
  return addedSoFar;
}
