{
  DatatableRequest datatable=DatatableRequest.parseRequest(request);
  DatatableResponse response=new DatatableResponse(datatable);
  Integer totalVisitsCount=Context.getEncounterService().getEncountersByVisitsAndPatientCount(patient,false,null);
  response.setiTotalRecords(totalVisitsCount);
  Map<String,Object> model=new HashMap<String,Object>();
  model.put("person",patient);
  PortletControllerUtil.addFormToEditAndViewUrlMaps(model);
  @SuppressWarnings("unchecked") Map<Form,String> formToViewUrlMap=(Map<Form,String>)model.get("formToViewUrlMap");
  if (!StringUtils.isBlank(datatable.getsSearch())) {
    Integer filteredVisitsCount=Context.getEncounterService().getEncountersByVisitsAndPatientCount(patient,false,datatable.getsSearch());
    response.setiTotalDisplayRecords(filteredVisitsCount);
  }
 else {
    response.setiTotalDisplayRecords(totalVisitsCount);
  }
  List<Encounter> encounters=Context.getEncounterService().getEncountersByVisitsAndPatient(patient,false,datatable.getsSearch(),datatable.getiDisplayStart(),datatable.getiDisplayLength());
  response.setsColumns("visitId","visitActive","visitType","visitLocation","visitFrom","visitTo","visitIndication","firstInVisit","lastInVisit","encounterId","encounterDate","encounterType","encounterProviders","encounterLocation","encounterEnterer","formViewURL");
  Map<String,String> row=new HashMap<String,String>();
  for (  Encounter encounter : encounters) {
    if (encounter.getVisit() != null) {
      Visit visit=encounter.getVisit();
      row.put("visitId",visit.getId().toString());
      row.put("visitActive",Boolean.toString(isActive(visit.getStartDatetime(),visit.getStopDatetime())));
      row.put("visitType",visit.getVisitType().getName());
      row.put("visitLocation",(visit.getLocation() != null) ? visit.getLocation().getName() : "");
      row.put("visitFrom",Context.getDateFormat().format(visit.getStartDatetime()));
      if (visit.getStopDatetime() != null) {
        row.put("visitTo",Context.getDateFormat().format(visit.getStopDatetime()));
      }
      if (visit.getIndication() != null && visit.getIndication().getName() != null) {
        row.put("visitIndication",visit.getIndication().getName().getName());
      }
      Object[] visitEncounters=visit.getEncounters().toArray();
      if (visitEncounters.length > 0) {
        if (encounter.equals(visitEncounters[0])) {
          row.put("firstInVisit",Boolean.TRUE.toString());
        }
        if (encounter.equals(visitEncounters[visitEncounters.length - 1])) {
          row.put("lastInVisit",Boolean.TRUE.toString());
        }
      }
 else {
        row.put("firstInVisit",Boolean.TRUE.toString());
        row.put("lastInVisit",Boolean.TRUE.toString());
      }
    }
    if (encounter.getId() != null) {
      row.put("encounterId",encounter.getId().toString());
      row.put("encounterDate",Context.getDateFormat().format(encounter.getEncounterDatetime()));
      row.put("encounterType",encounter.getEncounterType().getName());
      row.put("encounterProviders",getProviders(encounter));
      row.put("encounterLocation",(encounter.getLocation() != null) ? encounter.getLocation().getName() : "");
      row.put("encounterEnterer",(encounter.getCreator() != null) ? encounter.getCreator().getPersonName().toString() : "");
      row.put("formViewURL",getViewFormURL(request,formToViewUrlMap,encounter));
    }
    response.addRow(row);
  }
  return response;
}
