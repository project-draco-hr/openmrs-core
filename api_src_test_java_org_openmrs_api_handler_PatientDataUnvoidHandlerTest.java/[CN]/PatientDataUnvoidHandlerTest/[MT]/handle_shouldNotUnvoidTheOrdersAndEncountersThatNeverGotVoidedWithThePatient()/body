{
  Patient patient=Context.getPatientService().getPatient(7);
  EncounterService es=Context.getEncounterService();
  OrderService os=Context.getOrderService();
  Encounter testEncounter=es.getEncountersByPatient(patient).get(0);
  Assert.assertNotNull(testEncounter);
  Assert.assertNull(testEncounter.getDateVoided());
  Assert.assertNull(testEncounter.getVoidedBy());
  Assert.assertNull(testEncounter.getVoidReason());
  es.voidEncounter(testEncounter,"random reason");
  Assert.assertTrue(testEncounter.isVoided());
  Order testOrder=os.getOrdersByPatient(patient).get(0);
  Assert.assertNotNull(testOrder);
  Assert.assertNull(testOrder.getDateVoided());
  Assert.assertNull(testOrder.getVoidedBy());
  Assert.assertNull(testOrder.getVoidReason());
  os.voidOrder(testOrder,"random reason");
  Assert.assertTrue(testOrder.isVoided());
  Thread.sleep(20);
  patient=Context.getPatientService().voidPatient(patient,"Void Reason");
  Assert.assertTrue(patient.isVoided());
  new PatientDataUnvoidHandler().handle(patient,patient.getVoidedBy(),patient.getDateVoided(),null);
  testEncounter=es.getEncounter(testEncounter.getId());
  Assert.assertTrue(testEncounter.isVoided());
  Assert.assertNotNull(testEncounter.getDateVoided());
  Assert.assertNotNull(testEncounter.getVoidedBy());
  Assert.assertNotNull(testEncounter.getVoidReason());
  Assert.assertTrue(testOrder.isVoided());
  Assert.assertNotNull(testOrder.getDateVoided());
  Assert.assertNotNull(testOrder.getVoidedBy());
  Assert.assertNotNull(testOrder.getVoidReason());
}
