{
  if (s == null || s.length() < 4 || s.length() > 24)   throw new HL7Exception("Invalid date '" + s + "'");
  String timeZoneOffset;
  int tzPlus=s.indexOf('+');
  int tzMinus=s.indexOf('-');
  boolean timeZoneFlag=(tzPlus > 0 || tzMinus > 0);
  if (timeZoneFlag) {
    int tzIndex;
    if (tzPlus > 0)     tzIndex=tzPlus;
 else     tzIndex=tzMinus;
    timeZoneOffset=s.substring(tzIndex);
    if (timeZoneOffset.length() != 5)     System.out.println("invalid timestamp");
    s=s.substring(0,tzIndex);
  }
 else   timeZoneOffset=LOCAL_TIMEZONE_OFFSET;
  StringBuffer dateString=new StringBuffer();
  dateString.append(s.substring(0,4));
  if (s.length() >= 6)   dateString.append(s.substring(4,6));
 else   dateString.append("01");
  if (s.length() >= 8)   dateString.append(s.substring(6,8));
 else   dateString.append("01");
  if (s.length() >= 10)   dateString.append(s.substring(8,10));
 else   dateString.append("00");
  if (s.length() >= 12)   dateString.append(s.substring(10,12));
 else   dateString.append("00");
  if (s.length() >= 14)   dateString.append(s.substring(12,14));
 else   dateString.append("00");
  if (s.length() >= 15 && s.charAt(14) != '.')   throw new HL7Exception("Invalid date format '" + s + "'");
 else   dateString.append(".");
  if (s.length() >= 16)   dateString.append(s.substring(15,16));
 else   dateString.append("0");
  if (s.length() >= 17)   dateString.append(s.substring(16,17));
 else   dateString.append("0");
  if (s.length() >= 18)   dateString.append(s.subSequence(17,18));
 else   dateString.append("0");
  dateString.append(timeZoneOffset);
  Date date;
  try {
    date=TIMESTAMP_FORMAT.parse(dateString.toString());
  }
 catch (  ParseException e) {
    throw new HL7Exception("Error parsing date '" + s + "'");
  }
  return date;
}
