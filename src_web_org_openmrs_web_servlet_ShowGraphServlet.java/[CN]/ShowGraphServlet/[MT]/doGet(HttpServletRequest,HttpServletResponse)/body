{
  try {
    Integer patientId=Integer.parseInt(request.getParameter("patientId"));
    Integer conceptId=Integer.parseInt(request.getParameter("conceptId"));
    Integer width=request.getParameter("width") != null ? Integer.parseInt(request.getParameter("width")) : new Integer(500);
    Integer height=request.getParameter("width") != null ? Integer.parseInt(request.getParameter("height")) : new Integer(300);
    String mimeType=request.getParameter("mimeType") != null ? request.getParameter("mimeType") : PNG_MIME_TYPE;
    boolean userSpecifiedMaxRange=request.getParameter("maxRange") != null;
    boolean userSpecifiedMinRange=request.getParameter("minRange") != null;
    double maxRange=request.getParameter("maxRange") != null ? Double.parseDouble(request.getParameter("maxRange")) : 0.0;
    double minRange=request.getParameter("minRange") != null ? Double.parseDouble(request.getParameter("minRange")) : 0.0;
    Patient patient=Context.getPatientService().getPatient(patientId);
    Concept concept=Context.getConceptService().getConcept(conceptId);
    Set<Obs> observations=new HashSet<Obs>();
    String chartTitle, rangeAxisTitle, domainAxisTitle, titleFontSize="";
    if (concept != null) {
      observations=Context.getObsService().getObservations(patient,concept);
      chartTitle=concept.getName(request.getLocale()).getName();
      rangeAxisTitle=chartTitle;
    }
 else {
      chartTitle="Concept " + conceptId + " not found";
      rangeAxisTitle="Value";
    }
    domainAxisTitle="Date";
    TimeSeries series=new TimeSeries(rangeAxisTitle,Day.class);
    TimeSeriesCollection dataset=new TimeSeriesCollection();
    Calendar calendar=Calendar.getInstance();
    for (    Obs obs : observations) {
      if (obs.getValueNumeric() != null) {
        calendar.setTime(obs.getObsDatetime());
        log.debug("Adding value: " + obs.getValueNumeric() + " for "+ calendar.get(Calendar.MONTH)+ "/"+ calendar.get(Calendar.YEAR));
        Day day=new Day(calendar.get(Calendar.DAY_OF_MONTH),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.YEAR));
        series.addOrUpdate(day,obs.getValueNumeric());
      }
    }
    dataset.addSeries(series);
    JFreeChart chart=ChartFactory.createTimeSeriesChart(chartTitle,domainAxisTitle,rangeAxisTitle,dataset,true,true,false);
    Font font=new Font("Arial",Font.BOLD,12);
    TextTitle title=chart.getTitle();
    title.setFont(font);
    chart.setTitle(title);
    XYPlot plot=(XYPlot)chart.getPlot();
    plot.setNoDataMessage("No Data Available");
    XYItemRenderer r=plot.getRenderer();
    if (r instanceof XYLineAndShapeRenderer) {
      XYLineAndShapeRenderer renderer=(XYLineAndShapeRenderer)r;
      renderer.setBaseShapesFilled(true);
      renderer.setBaseShapesVisible(true);
    }
    DateAxis axis=(DateAxis)plot.getDomainAxis();
    axis.setDateFormatOverride(new SimpleDateFormat("MMM-yy"));
    NumberAxis rangeAxis=(NumberAxis)plot.getRangeAxis();
    rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
    if (userSpecifiedMinRange) {
      minRange=(rangeAxis.getLowerBound() < minRange) ? rangeAxis.getLowerBound() : minRange;
    }
    if (userSpecifiedMaxRange) {
      maxRange=(rangeAxis.getUpperBound() > maxRange) ? rangeAxis.getUpperBound() : maxRange;
    }
    rangeAxis.setRange(minRange,maxRange);
    response.setHeader("Pragma","No-cache");
    response.setDateHeader("Expires",0);
    response.setHeader("Cache-Control","no-cache");
    try {
      if (JPG_MIME_TYPE.equalsIgnoreCase(mimeType)) {
        response.setContentType(JPG_MIME_TYPE);
        ChartUtilities.writeChartAsJPEG(response.getOutputStream(),chart,width,height);
      }
 else       if (PNG_MIME_TYPE.equalsIgnoreCase(mimeType)) {
        response.setContentType(PNG_MIME_TYPE);
        ChartUtilities.writeChartAsPNG(response.getOutputStream(),chart,width,height);
      }
 else {
      }
    }
 catch (    IOException e) {
      log.error(e);
    }
  }
 catch (  Exception e) {
    log.error(e);
  }
}
