{
  log.debug("about to save " + obj);
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (Context.isAuthenticated()) {
    ProgramWorkflow wf=(ProgramWorkflow)obj;
    String statesToDelete=request.getParameter("deleteStates");
    Set<Integer> cantBeDeleted=new HashSet<Integer>();
    if (!statesToDelete.equals("")) {
      Map<Integer,ProgramWorkflowState> toRemove=new HashMap<Integer,ProgramWorkflowState>();
      for (StringTokenizer std=new StringTokenizer(statesToDelete,"|"); std.hasMoreTokens(); ) {
        String str=std.nextToken();
        String[] state=str.split(",");
        Integer conceptIdDelete=Integer.valueOf(state[0]);
        ProgramWorkflowState pws=null;
        for (        ProgramWorkflowState s : wf.getStates()) {
          if (s.getConcept().getConceptId().equals(conceptIdDelete)) {
            toRemove.put(conceptIdDelete,s);
            break;
          }
        }
      }
      for (      Map.Entry<Integer,ProgramWorkflowState> remove : toRemove.entrySet()) {
        try {
          wf.removeState(remove.getValue());
          Context.getProgramWorkflowService().updateWorkflow(wf);
          httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Workflow.saved");
          log.debug("removed " + remove);
        }
 catch (        DataIntegrityViolationException e) {
          httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.object.state.inuse.cannot.delete");
          wf.addState(remove.getValue());
          cantBeDeleted.add(remove.getKey());
        }
catch (        APIException e) {
          httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.general");
          wf.addState(remove.getValue());
          cantBeDeleted.add(remove.getKey());
        }
      }
    }
    String statesStr=request.getParameter("newStates");
    if (!statesStr.equals("")) {
      Set<Integer> doneSoFar=new HashSet<Integer>();
      for (StringTokenizer st=new StringTokenizer(statesStr,"|"); st.hasMoreTokens(); ) {
        String str=st.nextToken();
        String[] tmp=str.split(",");
        Integer conceptId=Integer.valueOf(tmp[0]);
        doneSoFar.add(conceptId);
        ProgramWorkflowState pws=null;
        for (        ProgramWorkflowState s : wf.getStates()) {
          if (s.getConcept().getConceptId().equals(conceptId)) {
            pws=s;
            break;
          }
        }
        if (pws == null) {
          pws=new ProgramWorkflowState();
          pws.setConcept(Context.getConceptService().getConcept(conceptId));
          wf.addState(pws);
        }
 else {
          if (pws.isRetired()) {
            pws.setRetired(false);
          }
        }
        pws.setInitial(Boolean.valueOf(tmp[1]));
        pws.setTerminal(Boolean.valueOf(tmp[2]));
      }
      for (      ProgramWorkflowState s : wf.getStates()) {
        if (!doneSoFar.contains(s.getConcept().getConceptId())) {
          s.setRetired(true);
        }
      }
      try {
        Context.getProgramWorkflowService().updateWorkflow(wf);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Workflow.saved");
      }
 catch (      APIException e) {
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.general");
      }
    }
 else {
      for (      ProgramWorkflowState s : wf.getStates()) {
        if (!cantBeDeleted.contains(s.getConcept().getConceptId())) {
          s.setRetired(true);
        }
      }
      Context.getProgramWorkflowService().updateWorkflow(wf);
    }
  }
  view=getSuccessView();
  return new ModelAndView(new RedirectView(view));
}
