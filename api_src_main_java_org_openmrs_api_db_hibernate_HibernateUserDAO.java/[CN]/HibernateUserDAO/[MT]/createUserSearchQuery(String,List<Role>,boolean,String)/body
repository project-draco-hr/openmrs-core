{
  log.debug("name: " + name);
  name=HibernateUtil.escapeSqlWildcards(name,sessionFactory);
  List<String> criteria=new ArrayList<String>();
  int counter=0;
  Map<String,String> namesMap=new HashMap<String,String>();
  if (name != null) {
    name=name.replace(", "," ");
    String[] names=name.split(" ");
    for (    String n : names) {
      if (n != null && n.length() > 0) {
        String key="name" + ++counter;
        String value=n + "%";
        namesMap.put(key,value);
        criteria.add("(user.username like :" + key + " or user.systemId like :"+ key+ " or name.givenName like :"+ key+ " or name.middleName like :"+ key+ " or name.familyName like :"+ key+ " or name.familyName2 like :"+ key+ ")");
      }
    }
  }
  if (includeRetired == false)   criteria.add("user.retired = false");
  String hql=hqlSelectStart;
  boolean searchOnRoles=false;
  if (CollectionUtils.isNotEmpty(roles)) {
    hql+="inner join user.roles as role ";
    searchOnRoles=true;
  }
  if (criteria.size() > 0)   hql+="where ";
  for (Iterator<String> i=criteria.iterator(); i.hasNext(); ) {
    hql+=i.next() + " ";
    if (i.hasNext())     hql+="and ";
  }
  if (searchOnRoles)   hql+=" and role in (:roleList)";
  Query query=sessionFactory.getCurrentSession().createQuery(hql);
  for (  Map.Entry<String,String> e : namesMap.entrySet())   query.setString(e.getKey(),e.getValue());
  if (searchOnRoles) {
    query.setParameterList("roleList",roles);
  }
  return query;
}
