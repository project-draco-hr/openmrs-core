{
  HL7Segment pid=hl7Message.getNextSegment("PID");
  if (pid == null) {
    setFatalError(hl7InQueue,"Expected PID segment",null);
    return;
  }
  HL7Segment pv1=hl7Message.getNextSegment("PV1");
  if (pv1 == null) {
    setFatalError(hl7InQueue,"Expected PV1 segment",null);
    return;
  }
  HL7Segment orc=hl7Message.getNextSegment("ORC");
  if (orc == null) {
    setFatalError(hl7InQueue,"Expected ORC segment",null);
    return;
  }
  User enterer=null;
  try {
    enterer=getEnterer(orc);
  }
 catch (  HL7Exception e) {
    setFatalError(hl7InQueue,"Unable to determine the data enterer",e);
    return;
  }
  Patient patient=null;
  try {
    patient=getPatient(pid);
  }
 catch (  HL7Exception e) {
    setFatalError(hl7InQueue,"Unable to determine the patient",e);
    return;
  }
  User provider=null;
  try {
    provider=getProvider(pv1);
  }
 catch (  HL7Exception e) {
    setFatalError(hl7InQueue,"Unable to determine the provider",e);
    return;
  }
  Form form=null;
  try {
    form=getForm(hl7Message);
  }
 catch (  Exception e) {
    setFatalError(hl7InQueue,"Unable to determine OpenMRS form",e);
    return;
  }
  Encounter encounter=null;
  try {
    encounter=createEncounter(enterer,form,orc,pid,pv1);
  }
 catch (  HL7Exception e) {
    setFatalError(hl7InQueue,"Unable to create encounter",e);
    return;
  }
  Vector<Error> errors=new Vector<Error>();
  HL7Segment obr;
  while ((obr=hl7Message.getNextSegment("OBR")) != null) {
    HL7Segment obx;
    while (hl7Message.hasNextSegment("OBX")) {
      obx=hl7Message.getNextSegment();
      try {
        createObservation(enterer,patient,encounter,provider,obx);
      }
 catch (      HL7Exception e) {
        addError(errors,obx.toString(),"OBX" + obx.getField(1) + " parse error",e.getMessage());
      }
    }
  }
  if (errors != null && errors.size() > 0)   recordErrors(hl7InQueue,errors);
  HL7InArchive hl7InArchive=new HL7InArchive(hl7InQueue);
  context.getHL7Service().createHL7InArchive(hl7InArchive);
  context.getHL7Service().deleteHL7InQueue(hl7InQueue);
}
