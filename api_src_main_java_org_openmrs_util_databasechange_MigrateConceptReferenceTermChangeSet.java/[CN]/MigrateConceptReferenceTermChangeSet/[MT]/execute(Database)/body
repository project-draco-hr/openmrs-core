{
  final JdbcConnection connection=(JdbcConnection)database.getConnection();
  Boolean prevAutoCommit=null;
  PreparedStatement selectTypes=null;
  PreparedStatement batchUpdateMap=null;
  PreparedStatement selectMap=null;
  PreparedStatement updateMapTerm=null;
  PreparedStatement insertTerm=null;
  PreparedStatement updateMapType=null;
  try {
    prevAutoCommit=connection.getAutoCommit();
    connection.setAutoCommit(false);
    Map<String,Integer> typesToIds=new HashMap<String,Integer>();
    selectTypes=connection.prepareStatement("select * from concept_map_type");
    selectTypes.execute();
    ResultSet selectTypeResult=selectTypes.getResultSet();
    while (selectTypeResult.next()) {
      typesToIds.put(selectTypeResult.getString("name").trim().toUpperCase(),selectTypeResult.getInt("concept_map_type_id"));
    }
    selectTypes.close();
    batchUpdateMap=connection.prepareStatement("update concept_reference_map set" + " concept_reference_term_id = concept_map_id," + " source_code = trim(source_code), comment = trim(comment)");
    batchUpdateMap.execute();
    batchUpdateMap.close();
    updateMapTerm=connection.prepareStatement("update concept_reference_map set" + " concept_reference_term_id = ? where concept_map_id = ?");
    insertTerm=connection.prepareStatement("insert into concept_reference_term" + " (concept_reference_term_id, uuid, concept_source_id, code, creator, date_created, description)" + " values (?, ?, ?, ?, ?, ?, ?)");
    updateMapType=connection.prepareStatement("update concept_reference_map set" + " concept_map_type_id = ? where concept_map_id = ?");
    int prevSource=-1;
    String prevSourceCode=null;
    String prevComment=null;
    int prevInsertedTerm=-1;
    selectMap=connection.prepareStatement("select * from concept_reference_map" + " order by source, source_code, uuid");
    selectMap.execute();
    final ResultSet selectMapResult=selectMap.getResultSet();
    while (selectMapResult.next()) {
      final int conceptMapId=selectMapResult.getInt("concept_map_id");
      final int source=selectMapResult.getInt("source");
      final String sourceCode=selectMapResult.getString("source_code");
      final String comment=selectMapResult.getString("comment");
      final int creator=selectMapResult.getInt("creator");
      final Date dateCreated=selectMapResult.getDate("date_created");
      final String uuid=selectMapResult.getString("uuid");
      final Integer mapTypeId=determineMapTypeId(comment,typesToIds);
      final int updatedMapTypeId=(mapTypeId == null) ? typesToIds.get(DEFAULT_CONCEPT_MAP_TYPE) : mapTypeId;
      updateMapType.setInt(1,updatedMapTypeId);
      updateMapType.setInt(2,conceptMapId);
      updateMapType.execute();
      if (updateMapType.getUpdateCount() != 1) {
        throw new CustomChangeException("Failed to set map type: " + mapTypeId + " for map: "+ conceptMapId+ ", updated rows: "+ updateMapType.getUpdateCount());
      }
      if (source == prevSource && (sourceCode == prevSourceCode || (sourceCode != null && sourceCode.equals(prevSourceCode)))) {
        if (mapTypeId == null && comment != null && !comment.equals(prevComment)) {
          log.warn("Lost comment '" + comment + "' for map "+ conceptMapId+ ". Preserved comment "+ prevComment);
        }
        updateMapTerm.setInt(1,prevInsertedTerm);
        updateMapTerm.setInt(2,conceptMapId);
        updateMapTerm.execute();
        if (updateMapTerm.getUpdateCount() != 1) {
          throw new CustomChangeException("Failed to set reference term: " + prevInsertedTerm + " for map: "+ conceptMapId+ ", updated rows: "+ updateMapTerm.getUpdateCount());
        }
      }
 else {
        insertTerm.setInt(1,conceptMapId);
        insertTerm.setString(2,UUID.nameUUIDFromBytes(uuid.getBytes()).toString());
        insertTerm.setInt(3,source);
        insertTerm.setString(4,sourceCode);
        insertTerm.setInt(5,creator);
        insertTerm.setDate(6,dateCreated);
        if (mapTypeId == null) {
          insertTerm.setString(7,comment);
        }
 else {
          insertTerm.setString(7,null);
        }
        insertTerm.execute();
        prevInsertedTerm=conceptMapId;
      }
      prevSource=source;
      prevSourceCode=sourceCode;
      prevComment=comment;
    }
    selectMap.close();
    updateMapType.close();
    updateMapTerm.close();
    insertTerm.close();
    connection.commit();
  }
 catch (  Exception e) {
    try {
      if (connection != null) {
        connection.rollback();
      }
    }
 catch (    Exception ex) {
      log.error("Failed to rollback",ex);
    }
    throw new CustomChangeException(e);
  }
 finally {
    closeStatementQuietly(selectTypes);
    closeStatementQuietly(batchUpdateMap);
    closeStatementQuietly(selectMap);
    closeStatementQuietly(updateMapTerm);
    closeStatementQuietly(insertTerm);
    closeStatementQuietly(updateMapType);
    if (connection != null && prevAutoCommit != null) {
      try {
        connection.setAutoCommit(prevAutoCommit);
      }
 catch (      DatabaseException e) {
        log.error("Failed to reset auto commit",e);
      }
    }
  }
}
