{
  String[] add1s=ServletRequestUtils.getStringParameters(request,"address1");
  String[] add2s=ServletRequestUtils.getStringParameters(request,"address2");
  String[] cities=ServletRequestUtils.getStringParameters(request,"cityVillage");
  String[] states=ServletRequestUtils.getStringParameters(request,"stateProvince");
  String[] countries=ServletRequestUtils.getStringParameters(request,"country");
  String[] lats=ServletRequestUtils.getStringParameters(request,"latitude");
  String[] longs=ServletRequestUtils.getStringParameters(request,"longitude");
  String[] pCodes=ServletRequestUtils.getStringParameters(request,"postalCode");
  String[] counties=ServletRequestUtils.getStringParameters(request,"countyDistrict");
  String[] add3s=ServletRequestUtils.getStringParameters(request,"address3");
  String[] addPrefStatus=ServletRequestUtils.getStringParameters(request,"preferred");
  String[] add6s=ServletRequestUtils.getStringParameters(request,"address6");
  String[] add5s=ServletRequestUtils.getStringParameters(request,"address5");
  String[] add4s=ServletRequestUtils.getStringParameters(request,"address4");
  String[] startDates=ServletRequestUtils.getStringParameters(request,"startDate");
  String[] endDates=ServletRequestUtils.getStringParameters(request,"endDate");
  if (add1s != null || add2s != null || cities != null || states != null || countries != null || lats != null || longs != null || pCodes != null || counties != null || add3s != null || add6s != null || add5s != null || add4s != null || startDates != null || endDates != null) {
    int maxAddrs=0;
    if (add1s != null && add1s.length > maxAddrs) {
      maxAddrs=add1s.length;
    }
    if (add2s != null && add2s.length > maxAddrs) {
      maxAddrs=add2s.length;
    }
    if (cities != null && cities.length > maxAddrs) {
      maxAddrs=cities.length;
    }
    if (states != null && states.length > maxAddrs) {
      maxAddrs=states.length;
    }
    if (countries != null && countries.length > maxAddrs) {
      maxAddrs=countries.length;
    }
    if (lats != null && lats.length > maxAddrs) {
      maxAddrs=lats.length;
    }
    if (longs != null && longs.length > maxAddrs) {
      maxAddrs=longs.length;
    }
    if (pCodes != null && pCodes.length > maxAddrs) {
      maxAddrs=pCodes.length;
    }
    if (counties != null && counties.length > maxAddrs) {
      maxAddrs=counties.length;
    }
    if (add3s != null && add3s.length > maxAddrs) {
      maxAddrs=add3s.length;
    }
    if (add6s != null && add6s.length > maxAddrs) {
      maxAddrs=add6s.length;
    }
    if (add5s != null && add5s.length > maxAddrs) {
      maxAddrs=add5s.length;
    }
    if (add4s != null && add4s.length > maxAddrs) {
      maxAddrs=add4s.length;
    }
    if (startDates != null && startDates.length > maxAddrs) {
      maxAddrs=startDates.length;
    }
    if (endDates != null && endDates.length > maxAddrs) {
      maxAddrs=endDates.length;
    }
    LOGGER.debug("There appears to be " + maxAddrs + " addresses that need to be saved");
    for (int i=0; i < maxAddrs; i++) {
      PersonAddress pa=new PersonAddress();
      if (add1s.length >= i + 1) {
        pa.setAddress1(add1s[i]);
      }
      if (add2s.length >= i + 1) {
        pa.setAddress2(add2s[i]);
      }
      if (cities.length >= i + 1) {
        pa.setCityVillage(cities[i]);
      }
      if (states.length >= i + 1) {
        pa.setStateProvince(states[i]);
      }
      if (countries.length >= i + 1) {
        pa.setCountry(countries[i]);
      }
      if (lats.length >= i + 1) {
        pa.setLatitude(lats[i]);
      }
      if (longs.length >= i + 1) {
        pa.setLongitude(longs[i]);
      }
      if (pCodes.length >= i + 1) {
        pa.setPostalCode(pCodes[i]);
      }
      if (counties.length >= i + 1) {
        pa.setCountyDistrict(counties[i]);
      }
      if (add3s.length >= i + 1) {
        pa.setAddress3(add3s[i]);
      }
      if (addPrefStatus != null && addPrefStatus.length > i) {
        pa.setPreferred(new Boolean(addPrefStatus[i]));
      }
      if (add6s.length >= i + 1) {
        pa.setAddress6(add6s[i]);
      }
      if (add5s.length >= i + 1) {
        pa.setAddress5(add5s[i]);
      }
      if (add4s.length >= i + 1) {
        pa.setAddress4(add4s[i]);
      }
      if (startDates.length >= i + 1 && StringUtils.isNotBlank(startDates[i])) {
        pa.setStartDate(Context.getDateFormat().parse(startDates[i]));
      }
      if (endDates.length >= i + 1 && StringUtils.isNotBlank(endDates[i])) {
        pa.setEndDate(Context.getDateFormat().parse(endDates[i]));
      }
      Errors addressErrors=new BindException(pa,"personAddress");
      new PersonAddressValidator().validate(pa,addressErrors);
      if (addressErrors.hasErrors()) {
        for (        ObjectError error : addressErrors.getAllErrors()) {
          errors.reject(error.getCode(),error.getArguments(),"");
        }
      }
      if (errors.hasErrors()) {
        return;
      }
      person.addAddress(pa);
    }
    Iterator<PersonAddress> addresses=person.getAddresses().iterator();
    PersonAddress currentAddress=null;
    PersonAddress preferredAddress=null;
    while (addresses.hasNext()) {
      currentAddress=addresses.next();
      Errors addressErrors=new BindException(currentAddress,"personAddress");
      new PersonAddressValidator().validate(currentAddress,addressErrors);
      if (addressErrors.hasErrors()) {
        for (        ObjectError error : addressErrors.getAllErrors()) {
          errors.reject(error.getCode(),error.getArguments(),"");
        }
      }
      if (errors.hasErrors()) {
        return;
      }
      if (currentAddress.isPreferred()) {
        if (preferredAddress != null) {
          preferredAddress.setPreferred(false);
        }
        preferredAddress=currentAddress;
      }
    }
    if ((preferredAddress == null) && (currentAddress != null)) {
      currentAddress.setPreferred(true);
    }
  }
}
