{
  if (!Context.isAuthenticated()) {
    errors.reject("auth.invalid");
  }
  if (errors.hasErrors()) {
    return showForm(request,response,errors);
  }
  HttpSession httpSession=request.getSession();
  Person person=(Person)command;
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=request.getParameter("action");
  PersonService ps=Context.getPersonService();
  String linkedProviders="";
  if (action.equals(msa.getMessage("Person.delete")) || action.equals(msa.getMessage("Person.void"))) {
    Collection<Provider> providerCollection=Context.getProviderService().getProvidersByPerson(person);
    if (providerCollection != null && !providerCollection.isEmpty()) {
      for (      Provider provider : providerCollection) {
        linkedProviders=linkedProviders + provider.getName() + ", ";
      }
      linkedProviders=linkedProviders.substring(0,linkedProviders.length() - 2);
    }
  }
  if (action.equals(msa.getMessage("Person.delete"))) {
    try {
      if (!linkedProviders.isEmpty()) {
        errors.reject(Context.getMessageSourceService().getMessage("Person.cannot.delete.linkedTo.providers") + " " + linkedProviders);
      }
      Collection<User> userCollection=Context.getUserService().getUsersByPerson(person,true);
      String linkedUsers="";
      if (userCollection != null && !userCollection.isEmpty()) {
        for (        User user : userCollection) {
          linkedUsers=linkedUsers + user.getSystemId() + ", ";
        }
        linkedUsers=linkedUsers.substring(0,linkedUsers.length() - 2);
      }
      if (!linkedUsers.isEmpty()) {
        errors.reject(Context.getMessageSourceService().getMessage("Person.cannot.delete.linkedTo.users") + " " + linkedUsers);
      }
      if (errors.hasErrors()) {
        return showForm(request,response,errors);
      }
 else {
        ps.purgePerson(person);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Person.deleted");
        return new ModelAndView(new RedirectView("index.htm"));
      }
    }
 catch (    DataIntegrityViolationException e) {
      LOGGER.error("Unable to delete person because of database FK errors: " + person,e);
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"Person.cannot.delete");
      return new ModelAndView(new RedirectView(getSuccessView() + "?personId=" + person.getPersonId().toString()));
    }
  }
 else   if (action.equals(msa.getMessage("Person.void"))) {
    String voidReason=request.getParameter("voidReason");
    if (StringUtils.isBlank(voidReason)) {
      voidReason=msa.getMessage("PersonForm.default.voidReason",null,"Voided from person form",Context.getLocale());
    }
    if (linkedProviders.isEmpty()) {
      ps.voidPerson(person,voidReason);
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Person.voided");
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,Context.getMessageSourceService().getMessage("Person.cannot.void.linkedTo.providers") + " " + linkedProviders);
    }
    return new ModelAndView(new RedirectView(getSuccessView() + "?personId=" + person.getPersonId()));
  }
 else   if (action.equals(msa.getMessage("Person.unvoid"))) {
    ps.unvoidPerson(person);
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Person.unvoided");
    return new ModelAndView(new RedirectView(getSuccessView() + "?personId=" + person.getPersonId()));
  }
 else {
    ps.savePerson(person);
    if (person.getDead()) {
      LOGGER.debug("Person is dead, so let's make sure there's an Obs for it");
      String causeOfDeathConceptId=Context.getAdministrationService().getGlobalProperty("concept.causeOfDeath");
      Concept causeOfDeath=Context.getConceptService().getConcept(causeOfDeathConceptId);
      if (causeOfDeath != null) {
        List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(person,causeOfDeath);
        if (obssDeath != null) {
          if (obssDeath.size() > 1) {
            LOGGER.error("Multiple causes of death (" + obssDeath.size() + ")?  Shouldn't be...");
          }
 else {
            Obs obsDeath=null;
            if (obssDeath.size() == 1) {
              LOGGER.debug("Already has a cause of death, so changing it");
              obsDeath=obssDeath.iterator().next();
            }
 else {
              LOGGER.debug("No cause of death yet, let's create one.");
              obsDeath=new Obs();
              obsDeath.setPerson(person);
              obsDeath.setConcept(causeOfDeath);
              Location location=Context.getLocationService().getDefaultLocation();
              if (location != null) {
                obsDeath.setLocation(location);
              }
 else {
                LOGGER.error("Could not find a suitable location for which to create this new Obs");
              }
            }
            Concept currCause=person.getCauseOfDeath();
            if (currCause == null) {
              LOGGER.debug("Current cause is null, attempting to set to NONE");
              String noneConcept=Context.getAdministrationService().getGlobalProperty("concept.none");
              currCause=Context.getConceptService().getConcept(noneConcept);
            }
            if (currCause != null) {
              LOGGER.debug("Current cause is not null, setting to value_coded");
              obsDeath.setValueCoded(currCause);
              obsDeath.setValueCodedName(currCause.getName());
              Date dateDeath=person.getDeathDate();
              if (dateDeath == null) {
                dateDeath=new Date();
              }
              obsDeath.setObsDatetime(dateDeath);
              String otherConcept=Context.getAdministrationService().getGlobalProperty("concept.otherNonCoded");
              Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
              boolean deathReasonChanged=false;
              if (conceptOther != null) {
                String otherInfo=ServletRequestUtils.getStringParameter(request,"causeOfDeath_other","");
                if (conceptOther.equals(currCause)) {
                  deathReasonChanged=!otherInfo.equals(obsDeath.getValueText());
                  LOGGER.debug("Setting value_text as " + otherInfo);
                  obsDeath.setValueText(otherInfo);
                }
 else {
                  deathReasonChanged=!otherInfo.equals("");
                  LOGGER.debug("New concept is NOT the OTHER concept, so setting to blank");
                  obsDeath.setValueText("");
                }
              }
 else {
                LOGGER.debug("Don't seem to know about an OTHER concept, so deleting value_text");
                obsDeath.setValueText("");
              }
              boolean shouldSaveObs=(null == obsDeath.getId()) || deathReasonChanged;
              if (shouldSaveObs) {
                if (null == obsDeath.getVoidReason()) {
                  obsDeath.setVoidReason("Changed in patient demographics editor");
                }
                Context.getObsService().saveObs(obsDeath,obsDeath.getVoidReason());
              }
            }
 else {
              LOGGER.debug("Current cause is still null - aborting mission");
            }
          }
        }
      }
 else {
        LOGGER.debug("Cause of death is null - should not have gotten here without throwing an error on the form.");
      }
    }
    String view=getSuccessView();
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Person.saved");
    view=view + "?personId=" + person.getPersonId();
    return new ModelAndView(new RedirectView(view));
  }
}
