{
  Map<String,Location> locationNameToId=new HashMap<String,Location>();
  List<Location> locations=Context.getEncounterService().getLocations();
  for (  Location l : locations) {
    locationNameToId.put(l.getName(),l);
  }
  model.put("locationsByName",locationNameToId);
  Map<PatientIdentifier,String> identifierErrors=new HashMap<PatientIdentifier,String>();
  String identifierError="";
  Patient patient=(Patient)model.get("patient");
  for (  PatientIdentifier identifier : patient.getActiveIdentifiers()) {
    try {
      Context.getPatientService().checkPatientIdentifier(identifier);
    }
 catch (    InvalidCheckDigitException icde) {
      log.error("Caugh checkDigit error");
      identifierErrors.put(identifier,"PatientIdentifier.error.checkDigit");
    }
catch (    IdentifierNotUniqueException inue) {
      log.error("Caugh identifier not unique error");
      identifierErrors.put(identifier,"PatientIdentifier.error.notUnique");
    }
catch (    InvalidIdentifierFormatException iife) {
      log.error("Caugh format error");
      identifierErrors.put(identifier,"PatientIdentifier.error.formatInvalid");
    }
catch (    PatientIdentifierException pie) {
      log.error("Caugh general error");
      identifierErrors.put(identifier,"PatientIdentifier.error.general");
    }
  }
  try {
    Context.getPatientService().checkPatientIdentifiers(patient);
  }
 catch (  DuplicateIdentifierException die) {
    log.error("Caugh duplicateIdentifier error");
    identifierError="PatientIdentifier.error.duplicate";
  }
catch (  MissingRequiredIdentifierException mrie) {
    log.error("Caugh missingRequired error");
    identifierError="PatientIdentifier.error.missingRequired";
  }
catch (  InsufficientIdentifiersException iie) {
    log.error("Caugh insufficient identifiers error");
    identifierError="PatientIdentifier.error.insufficientIdentifiers";
  }
catch (  PatientIdentifierException pie) {
    log.error("Caugh general error for patient");
    identifierError="PatientIdentifier.error.general";
  }
  model.put("identifierErrors",identifierErrors);
  model.put("identifierError",identifierError);
}
