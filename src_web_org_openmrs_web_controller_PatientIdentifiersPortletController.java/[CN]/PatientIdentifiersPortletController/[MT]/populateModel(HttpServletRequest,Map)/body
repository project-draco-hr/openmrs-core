{
  if (!model.containsKey("locationsByName")) {
    Map<String,Location> locationNameToId=new HashMap<String,Location>();
    List<Location> locations=Context.getEncounterService().getLocations();
    for (    Location l : locations) {
      locationNameToId.put(l.getName(),l);
    }
    model.put("locationsByName",locationNameToId);
  }
  if (!model.containsKey("identifierErrors") || !model.containsKey("identifierError")) {
    Map<PatientIdentifier,String> identifierErrors=new HashMap<PatientIdentifier,String>();
    String identifierError="";
    Patient patient=(Patient)model.get("patient");
    for (    PatientIdentifier identifier : patient.getActiveIdentifiers()) {
      try {
        Context.getPatientService().checkPatientIdentifier(identifier);
      }
 catch (      InvalidCheckDigitException icde) {
        log.error("Caught checkDigit error",icde);
        identifierErrors.put(identifier,"PatientIdentifier.error.checkDigit");
      }
catch (      IdentifierNotUniqueException inue) {
        log.error("Caught identifier not unique error",inue);
        identifierErrors.put(identifier,"PatientIdentifier.error.notUnique");
      }
catch (      InvalidIdentifierFormatException iife) {
        log.error("Caught format error",iife);
        identifierErrors.put(identifier,"PatientIdentifier.error.formatInvalid");
      }
catch (      PatientIdentifierException pie) {
        log.error("Caught general error",pie);
        identifierErrors.put(identifier,"PatientIdentifier.error.general");
      }
    }
    try {
      Context.getPatientService().checkPatientIdentifiers(patient);
    }
 catch (    DuplicateIdentifierException die) {
      log.error("Caught duplicateIdentifier error",die);
      identifierError="PatientIdentifier.error.duplicate";
    }
catch (    MissingRequiredIdentifierException mrie) {
      log.error("Caught missingRequired error",mrie);
      identifierError="PatientIdentifier.error.missingRequired";
    }
catch (    InsufficientIdentifiersException iie) {
      log.error("Caught insufficient identifiers error",iie);
      identifierError="PatientIdentifier.error.insufficientIdentifiers";
    }
catch (    PatientIdentifierException pie) {
      log.error("Caught general error for patient",pie);
      identifierError="PatientIdentifier.error.general";
    }
    model.put("identifierErrors",identifierErrors);
    model.put("identifierError",identifierError);
  }
}
