{
  for (  Locale locale : locales) {
    ConceptName fullySpecifiedNameInLocale=namesByLocale.get(locale);
    if (StringUtils.hasText(fullySpecifiedNameInLocale.getName())) {
      concept.setFullySpecifiedName(fullySpecifiedNameInLocale);
      if (fullySpecifiedNameInLocale.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale))) {
        concept.setPreferredName(fullySpecifiedNameInLocale);
      }
    }
    ConceptName shortNameInLocale=shortNamesByLocale.get(locale);
    concept.setShortName(shortNameInLocale);
    for (    ConceptName synonym : synonymsByLocale.get(locale)) {
      if (synonym != null && StringUtils.hasText(synonym.getName())) {
        synonym.setLocale(locale);
        if (synonym.getName().equalsIgnoreCase(preferredNamesByLocale.get(locale)) && !synonym.isVoided()) {
          concept.setPreferredName(synonym);
        }
 else         if (!concept.getNames().contains(synonym) && !concept.hasName(synonym.getName(),locale)) {
          concept.addName(synonym);
        }
        if (!synonym.isVoided()) {
          synonym.setVoidReason(null);
        }
 else {
          synonym.setVoidReason(Context.getMessageSourceService().getMessage("general.default.voidReason"));
        }
      }
    }
    for (    ConceptName indexTerm : indexTermsByLocale.get(locale)) {
      if (indexTerm != null && StringUtils.hasText(indexTerm.getName())) {
        if (!concept.getNames().contains(indexTerm) && !concept.hasName(indexTerm.getName(),locale)) {
          indexTerm.setConceptNameType(ConceptNameType.INDEX_TERM);
          indexTerm.setLocale(locale);
          concept.addName(indexTerm);
        }
        if (!indexTerm.isVoided()) {
          indexTerm.setVoidReason(null);
        }
 else         if (indexTerm.isVoided() && !StringUtils.hasText(indexTerm.getVoidReason())) {
          indexTerm.setVoidReason(Context.getMessageSourceService().getMessage("Concept.name.default.voidReason"));
        }
      }
    }
    ConceptDescription descInLocale=descriptionsByLocale.get(locale);
    if (StringUtils.hasLength(descInLocale.getDescription()) && !concept.getDescriptions().contains(descInLocale)) {
      concept.addDescription(descInLocale);
    }
  }
  Set<Integer> mappedTermIds=null;
  for (  ConceptMap map : conceptMappings) {
    if (mappedTermIds == null) {
      mappedTermIds=new HashSet<Integer>();
    }
    if (map.getConceptReferenceTerm().getConceptReferenceTermId() == null) {
      if (map.getConceptMapId() == null) {
        continue;
      }
      concept.removeConceptMapping(map);
    }
 else     if (!mappedTermIds.add(map.getConceptReferenceTerm().getConceptReferenceTermId())) {
      continue;
    }
 else     if (!concept.getConceptMappings().contains(map)) {
      concept.addConceptMapping(map);
    }
  }
  if (!concept.isSet() && concept.getConceptSets() != null) {
    concept.getConceptSets().clear();
  }
  if (!concept.getDatatype().isCoded() && concept.getAnswers(true) != null) {
    concept.getAnswers(true).clear();
  }
  if (concept.getDatatype().getName().equals("Numeric")) {
    ConceptNumeric cn;
    if (concept instanceof ConceptNumeric) {
      cn=(ConceptNumeric)concept;
    }
 else {
      cn=new ConceptNumeric(concept);
    }
    cn.setHiAbsolute(hiAbsolute);
    cn.setLowAbsolute(lowAbsolute);
    cn.setHiCritical(hiCritical);
    cn.setLowCritical(lowCritical);
    cn.setHiNormal(hiNormal);
    cn.setLowNormal(lowNormal);
    cn.setPrecise(precise);
    cn.setDisplayPrecision(displayPrecision);
    cn.setUnits(units);
    concept=cn;
  }
 else   if (concept.getDatatype().getName().equals("Complex")) {
    ConceptComplex complexConcept;
    if (concept instanceof ConceptComplex) {
      complexConcept=(ConceptComplex)concept;
    }
 else {
      complexConcept=new ConceptComplex(concept);
    }
    complexConcept.setHandler(handlerKey);
    concept=complexConcept;
  }
  return concept;
}
