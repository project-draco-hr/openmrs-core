{
  List<Module> dependentModulesStopped=new Vector<Module>();
  if (mod != null) {
    if (!ModuleFactory.isModuleStarted(mod)) {
      return dependentModulesStopped;
    }
    String moduleId=mod.getModuleId();
    if (!isFailedStartup && mod.isMandatory()) {
      throw new MandatoryModuleException(moduleId);
    }
    if (!isFailedStartup && ModuleConstants.CORE_MODULES.containsKey(moduleId)) {
      throw new OpenmrsCoreModuleException(moduleId);
    }
    String modulePackage=mod.getPackageName();
    List<Module> startedModulesCopy=new ArrayList<Module>();
    startedModulesCopy.addAll(getStartedModules());
    for (    Module dependentModule : startedModulesCopy) {
      if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage)) {
        dependentModulesStopped.add(dependentModule);
        dependentModulesStopped.addAll(stopModule(dependentModule,skipOverStartedProperty,isFailedStartup));
      }
    }
    try {
      if (mod.getModuleActivator() != null) {
        mod.getModuleActivator().willStop();
      }
    }
 catch (    Exception e) {
      log.warn("Unable to call module's Activator.willStop() method",e);
    }
    getStartedModulesMap().remove(moduleId);
    if (actualStartupOrder != null) {
      actualStartupOrder.remove(moduleId);
      for (      Module depModule : dependentModulesStopped) {
        actualStartupOrder.remove(depModule.getModuleId());
      }
    }
    if (skipOverStartedProperty == false && !Context.isRefreshingContext()) {
      saveGlobalProperty(moduleId + ".started","false",getGlobalPropertyStartedDescription(moduleId));
    }
    if (getModuleClassLoaderMap().containsKey(mod)) {
      log.debug("Mod was in classloader map.  Removing advice and extensions.");
      try {
        for (        AdvicePoint advice : mod.getAdvicePoints()) {
          Class cls=null;
          try {
            cls=Context.loadClass(advice.getPoint());
            Object aopObject=advice.getClassInstance();
            if (Advisor.class.isInstance(aopObject)) {
              log.debug("adding advisor: " + aopObject.getClass());
              Context.removeAdvisor(cls,(Advisor)aopObject);
            }
 else {
              log.debug("Adding advice: " + aopObject.getClass());
              Context.removeAdvice(cls,(Advice)aopObject);
            }
          }
 catch (          Exception e) {
            log.warn("Could not remove advice point: " + advice.getPoint(),e);
          }
        }
      }
 catch (      Exception e) {
        log.warn("Error while getting advicePoints from module: " + moduleId,e);
      }
      try {
        for (        Extension ext : mod.getExtensions()) {
          String extId=ext.getExtensionId();
          try {
            List<Extension> tmpExtensions=getExtensions(extId);
            tmpExtensions.remove(ext);
            getExtensionMap().put(extId,tmpExtensions);
          }
 catch (          Exception exterror) {
            log.warn("Error while getting extension: " + ext,exterror);
          }
        }
      }
 catch (      Exception e) {
        log.warn("Error while getting extensions from module: " + moduleId,e);
      }
    }
    List<OpenmrsService> services=Context.getModuleOpenmrsServices(modulePackage);
    if (services != null) {
      for (      OpenmrsService service : services) {
        service.onShutdown();
      }
    }
    try {
      if (mod.getModuleActivator() != null) {
        mod.getModuleActivator().stopped();
      }
 else {
        mod.getActivator().shutdown();
      }
    }
 catch (    Exception e) {
      log.warn("Unable to call module's Activator.shutdown() method",e);
    }
    mod.getExtensions().clear();
    mod.setActivator(null);
    mod.setModuleActivator(null);
    mod.disposeAdvicePointsClassInstance();
    ModuleClassLoader cl=removeClassLoader(mod);
    if (cl != null) {
      cl.dispose();
      cl=null;
      File folder=OpenmrsClassLoader.getLibCacheFolder();
      File tmpModuleDir=new File(folder,moduleId);
      try {
        OpenmrsUtil.deleteDirectory(tmpModuleDir);
      }
 catch (      IOException e) {
        log.warn("Unable to delete libcachefolder for " + moduleId);
      }
    }
  }
  return dependentModulesStopped;
}
