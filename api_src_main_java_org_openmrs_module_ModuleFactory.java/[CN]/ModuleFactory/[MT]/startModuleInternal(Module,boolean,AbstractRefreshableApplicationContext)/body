{
  if (module != null) {
    String moduleId=module.getModuleId();
    try {
      String requireVersion=module.getRequireOpenmrsVersion();
      ModuleUtil.checkRequiredVersion(OpenmrsConstants.OPENMRS_VERSION_SHORT,requireVersion);
      if (!requiredModulesStarted(module)) {
        throw new ModuleException(getFailedToStartModuleMessage(module));
      }
      ModuleClassLoader moduleClassLoader=new ModuleClassLoader(module,ModuleFactory.class.getClassLoader());
      getModuleClassLoaderMap().put(module,moduleClassLoader);
      registerProvidedPackages(moduleClassLoader);
      Map<String,List<Extension>> moduleExtensionMap=new HashMap<String,List<Extension>>();
      for (      Extension ext : module.getExtensions()) {
        String extId=ext.getExtensionId();
        List<Extension> tmpExtensions=moduleExtensionMap.get(extId);
        if (tmpExtensions == null) {
          tmpExtensions=new Vector<Extension>();
          moduleExtensionMap.put(extId,tmpExtensions);
        }
        tmpExtensions.add(ext);
      }
      Comparator<Extension> sortOrder=new Comparator<Extension>(){
        @Override public int compare(        Extension e1,        Extension e2){
          return Integer.valueOf(e1.getOrder()).compareTo(Integer.valueOf(e2.getOrder()));
        }
      }
;
      for (      Map.Entry<String,List<Extension>> moduleExtensionEntry : moduleExtensionMap.entrySet()) {
        List<Extension> sortedModuleExtensions=moduleExtensionEntry.getValue();
        Collections.sort(sortedModuleExtensions,sortOrder);
        List<Extension> extensions=getExtensionMap().get(moduleExtensionEntry.getKey());
        if (extensions == null) {
          extensions=new Vector<Extension>();
          getExtensionMap().put(moduleExtensionEntry.getKey(),extensions);
        }
        for (        Extension ext : sortedModuleExtensions) {
          log.debug("Adding to mapping ext: " + ext.getExtensionId() + " ext.class: "+ ext.getClass());
          extensions.add(ext);
        }
      }
      SortedMap<String,String> diffs=SqlDiffFileParser.getSqlDiffs(module);
      try {
        Context.addProxyPrivilege("");
        for (        Map.Entry<String,String> entry : diffs.entrySet()) {
          String version=entry.getKey();
          String sql=entry.getValue();
          if (StringUtils.hasText(sql)) {
            runDiff(module,version,sql);
          }
        }
      }
  finally {
        Context.removeProxyPrivilege("");
      }
      runLiquibase(module);
      getStartedModulesMap().put(moduleId,module);
      if (actualStartupOrder == null) {
        actualStartupOrder=new LinkedHashSet<String>();
      }
      actualStartupOrder.add(moduleId);
      try {
        saveGlobalProperty(moduleId + ".started","true",getGlobalPropertyStartedDescription(moduleId));
        saveGlobalProperty(moduleId + ".mandatory",String.valueOf(module.isMandatory()),getGlobalPropertyMandatoryModuleDescription(moduleId));
      }
 catch (      Exception e) {
        log.debug("Got an error when trying to set the global property on module startup",e);
      }
      if (module.getPrivileges().size() > 0 || module.getGlobalProperties().size() > 0) {
        log.debug("Updating core dataset");
        Context.checkCoreDataset();
      }
      try {
        if (module.getModuleActivator() != null) {
          module.getModuleActivator().willStart();
        }
 else {
          module.getActivator().startup();
        }
      }
 catch (      ModuleException e) {
        throw e;
      }
catch (      Exception e) {
        throw new ModuleException("Error while calling module's Activator.startup()/willStart() method",e);
      }
      module.clearStartupError();
    }
 catch (    Exception e) {
      log.warn("Error while trying to start module: " + moduleId,e);
      module.setStartupErrorMessage("Error while trying to start module",e);
      notifySuperUsersAboutModuleFailure(module);
      try {
        boolean skipOverStartedProperty=false;
        if (e instanceof ModuleMustStartException) {
          skipOverStartedProperty=true;
        }
        stopModule(module,skipOverStartedProperty,true);
      }
 catch (      Exception e2) {
        log.debug("Error while stopping module: " + moduleId,e2);
      }
    }
  }
  if (applicationContext != null) {
    ModuleUtil.refreshApplicationContext(applicationContext,isOpenmrsStartup,module);
  }
  return module;
}
