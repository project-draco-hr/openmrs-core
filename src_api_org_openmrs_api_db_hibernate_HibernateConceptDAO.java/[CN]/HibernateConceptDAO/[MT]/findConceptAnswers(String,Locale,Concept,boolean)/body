{
  String locale=loc.getLanguage().substring(0,2);
  List<String> words=ConceptWord.getUniqueWords(phrase);
  List<ConceptWord> conceptWords=new Vector<ConceptWord>();
  List<Concept> answers=new Vector<Concept>();
  if (concept.getAnswers() != null)   for (  ConceptAnswer conceptAnswer : concept.getAnswers()) {
    answers.add(conceptAnswer.getAnswerConcept());
  }
  if (words.size() > 0 || !answers.isEmpty()) {
    Criteria searchCriteria=sessionFactory.getCurrentSession().createCriteria(ConceptWord.class,"cw1");
    searchCriteria.add(Restrictions.eq("locale",locale));
    if (includeRetired == false) {
      searchCriteria.createAlias("concept","concept");
      searchCriteria.add(Expression.eq("concept.retired",false));
    }
    if (!answers.isEmpty())     searchCriteria.add(Expression.in("cw1.concept",answers));
    if (words.size() > 0) {
      Iterator<String> word=words.iterator();
      searchCriteria.add(Expression.like("word",word.next(),MatchMode.START));
      Conjunction junction=Expression.conjunction();
      while (word.hasNext()) {
        String w=word.next();
        log.debug(w);
        DetachedCriteria crit=DetachedCriteria.forClass(ConceptWord.class).setProjection(Property.forName("concept")).add(Expression.eqProperty("concept","cw1.concept")).add(Restrictions.like("word",w,MatchMode.START)).add(Restrictions.eq("locale",locale));
        junction.add(Subqueries.exists(crit));
      }
      searchCriteria.add(junction);
    }
    searchCriteria.addOrder(Order.asc("synonym"));
    conceptWords=searchCriteria.list();
  }
  return conceptWords;
}
