{
  boolean failedPrivilegeCheck=false;
  Object attributeValue=webRequest.getAttribute(WebConstants.INSUFFICIENT_PRIVILEGES,WebRequest.SCOPE_SESSION);
  if (attributeValue != null) {
    if (Boolean.valueOf(attributeValue.toString().trim())) {
      failedPrivilegeCheck=true;
    }
    webRequest.removeAttribute(WebConstants.INSUFFICIENT_PRIVILEGES,WebRequest.SCOPE_SESSION);
  }
  if (Context.getAuthenticatedUser() != null && failedPrivilegeCheck) {
    model.addAttribute("foundMissingPrivileges",true);
    webRequest.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.insufficientPrivileges",WebRequest.SCOPE_SESSION);
    String deniedPage=null;
    String requiredPrivileges=null;
    String exceptionMsg=null;
    String refererUrl=null;
    if (webRequest.getAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION) != null) {
      String deniedPageTemp=webRequest.getAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(deniedPageTemp))       deniedPage=deniedPageTemp;
    }
    if (webRequest.getAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION) != null) {
      String requiredPrivilegesTemp=webRequest.getAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(requiredPrivilegesTemp))       requiredPrivileges=requiredPrivilegesTemp;
    }
    if (webRequest.getAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION) != null) {
      String exceptionMsgTemp=webRequest.getAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(exceptionMsgTemp))       exceptionMsg=exceptionMsgTemp;
    }
    if (webRequest.getAttribute(WebConstants.REFERER_URL,WebRequest.SCOPE_SESSION) != null) {
      String refererUrlTemp=webRequest.getAttribute(WebConstants.REFERER_URL,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.REFERER_URL,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(refererUrlTemp) && !refererUrlTemp.contains("login."))       refererUrl=refererUrlTemp;
    }
    String alertMessage=null;
    if (requiredPrivileges != null && deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivilegesForPage",new String[]{Context.getAuthenticatedUser().getUsername(),requiredPrivileges,deniedPage},null);
    }
 else     if (exceptionMsg != null && deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.privilegesForPageOnException",new String[]{exceptionMsg,Context.getAuthenticatedUser().getUsername(),deniedPage},null);
    }
 else     if (deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestUnKnownPrivilegesForPage",new String[]{Context.getAuthenticatedUser().getUsername(),deniedPage},null);
    }
 else     if (requiredPrivileges != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivileges",new String[]{Context.getAuthenticatedUser().getUsername(),requiredPrivileges},null);
    }
 else     if (exceptionMsg != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivileges",new String[]{Context.getAuthenticatedUser().getUsername(),exceptionMsg},null);
    }
    String reason=null;
    if (requiredPrivileges != null) {
      reason=Context.getMessageSourceService().getMessage("error.privilegesRequired",new Object[]{requiredPrivileges},null);
    }
 else     if (exceptionMsg != null) {
      reason=exceptionMsg;
    }
 else {
      reason=Context.getMessageSourceService().getMessage("error.extraPrivilegesRequired");
    }
    model.put("alertMessage",JavaScriptUtils.javaScriptEscape(alertMessage));
    model.put("reason",reason);
    model.put("refererUrl",refererUrl);
  }
  return LOGIN_FORM;
}
