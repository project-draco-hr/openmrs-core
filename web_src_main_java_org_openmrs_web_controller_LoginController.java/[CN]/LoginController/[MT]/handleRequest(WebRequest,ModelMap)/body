{
  if (Context.getAuthenticatedUser() != null) {
    model.addAttribute("foundMissingPrivileges",webRequest.getAttribute(WebConstants.FOUND_MISSING_PRIVILEGES,WebRequest.SCOPE_SESSION));
    webRequest.removeAttribute(WebConstants.FOUND_MISSING_PRIVILEGES,WebRequest.SCOPE_SESSION);
    String deniedPage=null;
    String requiredPrivileges=null;
    String exceptionMsg=null;
    if (webRequest.getAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION) != null) {
      String deniedPageTemp=webRequest.getAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.DENIED_PAGE,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(deniedPageTemp))       deniedPage=deniedPageTemp;
    }
    if (webRequest.getAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION) != null) {
      String requiredPrivilegesTemp=webRequest.getAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.REQUIRED_PRIVILEGES,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(requiredPrivilegesTemp))       requiredPrivileges=requiredPrivilegesTemp;
    }
    if (webRequest.getAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION) != null) {
      String exceptionMsgTemp=webRequest.getAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION).toString();
      webRequest.removeAttribute(WebConstants.UNCAUGHT_EXCEPTION_MESSAGE,WebRequest.SCOPE_SESSION);
      if (StringUtils.isNotBlank(exceptionMsgTemp))       exceptionMsg=exceptionMsgTemp;
    }
    String alertMessage=null;
    if (requiredPrivileges != null && deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivilegesForPage",new String[]{Context.getAuthenticatedUser().getUsername(),requiredPrivileges,deniedPage},null);
    }
 else     if (exceptionMsg != null && deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.privilegesForPageOnException",new String[]{exceptionMsg,Context.getAuthenticatedUser().getUsername(),deniedPage},null);
    }
 else     if (deniedPage != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestUnKnownPrivilegesForPage",new String[]{Context.getAuthenticatedUser().getUsername(),deniedPage},null);
    }
 else     if (requiredPrivileges != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivileges",new String[]{Context.getAuthenticatedUser().getUsername(),requiredPrivileges},null);
    }
 else     if (exceptionMsg != null) {
      alertMessage=Context.getMessageSourceService().getMessage("general.alert.requestPrivileges",new String[]{Context.getAuthenticatedUser().getUsername(),exceptionMsg},null);
    }
    if (alertMessage != null) {
      try {
        Context.addProxyPrivilege(PrivilegeConstants.MANAGE_ALERTS);
        Context.addProxyPrivilege(PrivilegeConstants.GET_USERS);
        Context.addProxyPrivilege(PrivilegeConstants.GET_ROLES);
        Role role=Context.getUserService().getRole("System Developer");
        Collection<User> users=Context.getUserService().getUsersByRole(role);
        Context.getAlertService().saveAlert(new Alert(alertMessage,users));
      }
  finally {
        Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_ALERTS);
        Context.removeProxyPrivilege(PrivilegeConstants.GET_USERS);
        Context.removeProxyPrivilege(PrivilegeConstants.GET_ROLES);
      }
    }
  }
  return LOGIN_FORM;
}
