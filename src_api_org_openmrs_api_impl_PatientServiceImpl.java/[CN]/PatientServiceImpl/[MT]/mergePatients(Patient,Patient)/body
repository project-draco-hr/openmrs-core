{
  log.debug("Merging patients: (preferred)" + preferred.getPatientId() + ", (notPreferred) "+ notPreferred.getPatientId());
  if (preferred.getPatientId().equals(notPreferred.getPatientId())) {
    log.debug("Merge operation cancelled: Cannot merge user" + preferred.getPatientId() + " to self");
    throw new APIException("Merge operation cancelled: Cannot merge user " + preferred.getPatientId() + " to self");
  }
  EncounterService es=Context.getEncounterService();
  for (  Encounter e : es.getEncountersByPatient(notPreferred)) {
    e.setPatient(preferred);
    log.debug("Merging encounter " + e.getEncounterId() + " to "+ preferred.getPatientId());
    es.saveEncounter(e);
  }
  for (  PatientIdentifier pi : notPreferred.getIdentifiers()) {
    PatientIdentifier tmpIdentifier=new PatientIdentifier();
    tmpIdentifier.setIdentifier(pi.getIdentifier());
    tmpIdentifier.setIdentifierType(null);
    tmpIdentifier.setLocation(pi.getLocation());
    tmpIdentifier.setPatient(preferred);
    boolean found=false;
    for (    PatientIdentifier preferredIdentifier : preferred.getIdentifiers()) {
      if (preferredIdentifier.getIdentifier() != null && preferredIdentifier.getIdentifier().equals(tmpIdentifier.getIdentifier()) && preferredIdentifier.getIdentifierType() != null && preferredIdentifier.getIdentifierType().equals(tmpIdentifier.getIdentifierType()))       found=true;
    }
    if (!found) {
      tmpIdentifier.setIdentifierType(pi.getIdentifierType());
      tmpIdentifier.setCreator(Context.getAuthenticatedUser());
      tmpIdentifier.setDateCreated(new Date());
      tmpIdentifier.setVoided(false);
      tmpIdentifier.setVoidedBy(null);
      tmpIdentifier.setVoidReason(null);
      tmpIdentifier.setPreferred(false);
      preferred.addIdentifier(tmpIdentifier);
      log.debug("Merging identifier " + tmpIdentifier.getIdentifier() + " to "+ preferred.getPatientId());
    }
  }
  for (  PersonName newName : notPreferred.getNames()) {
    boolean containsName=false;
    for (    PersonName currentName : preferred.getNames()) {
      String given=newName.getGivenName();
      String middle=newName.getMiddleName();
      String family=newName.getFamilyName();
      if ((given != null && given.equals(currentName.getGivenName())) && (middle != null && middle.equals(currentName.getMiddleName())) && (family != null && family.equals(currentName.getFamilyName()))) {
        containsName=true;
      }
    }
    if (!containsName) {
      PersonName tmpName=PersonName.newInstance(newName);
      tmpName.setPersonNameId(null);
      tmpName.setVoided(false);
      tmpName.setVoidedBy(null);
      tmpName.setVoidReason(null);
      tmpName.setPreferred(false);
      preferred.addName(tmpName);
      log.debug("Merging name " + newName.getGivenName() + " to "+ preferred.getPatientId());
    }
  }
  for (  PersonAddress newAddress : notPreferred.getAddresses()) {
    boolean containsAddress=false;
    for (    PersonAddress currentAddress : preferred.getAddresses()) {
      String address1=currentAddress.getAddress1();
      String address2=currentAddress.getAddress2();
      String cityVillage=currentAddress.getCityVillage();
      if ((address1 != null && address1.equals(newAddress.getAddress1())) || (address2 != null && address2.equals(newAddress.getAddress2())) || (cityVillage != null && cityVillage.equals(newAddress.getCityVillage()))) {
        containsAddress=true;
      }
    }
    if (!containsAddress) {
      PersonAddress tmpAddress=(PersonAddress)newAddress.clone();
      tmpAddress.setPersonAddressId(null);
      tmpAddress.setVoided(false);
      tmpAddress.setVoidedBy(null);
      tmpAddress.setVoidReason(null);
      preferred.addAddress(tmpAddress);
      log.debug("Merging address " + newAddress.getPersonAddressId() + " to "+ preferred.getPatientId());
    }
  }
  ProgramWorkflowService programService=Context.getProgramWorkflowService();
  for (  PatientProgram pp : programService.getPatientPrograms(notPreferred,null,null,null,null,null,false)) {
    if (!pp.getVoided()) {
      PatientProgram enroll=pp.copy();
      enroll.setPatient(preferred);
      log.debug("Copying patientProgram " + pp.getPatientProgramId() + " to "+ preferred.getPatientId());
      programService.savePatientProgram(enroll);
    }
  }
  PersonService personService=Context.getPersonService();
  for (  Relationship rel : personService.getRelationshipsByPerson(notPreferred)) {
    if (!rel.isVoided()) {
      Relationship tmpRel=rel.copy();
      if (tmpRel.getPersonA().equals(notPreferred))       tmpRel.setPersonA(preferred);
      if (tmpRel.getPersonB().equals(notPreferred))       tmpRel.setPersonB(preferred);
      log.debug("Copying relationship " + rel.getRelationshipId() + " to "+ preferred.getPatientId());
      personService.saveRelationship(tmpRel);
    }
  }
  ObsService obsService=Context.getObsService();
  for (  Obs obs : obsService.getObservationsByPerson(notPreferred)) {
    if (obs.getEncounter() == null && !obs.isVoided()) {
      obs.setPerson(preferred);
      obsService.saveObs(obs,"Merged from patient #" + notPreferred.getPatientId());
    }
  }
  OrderService os=Context.getOrderService();
  for (  Order o : os.getOrdersByPatient(notPreferred)) {
    if (o.getEncounter() == null && !o.getVoided()) {
      Order tmpOrder=o.copy();
      tmpOrder.setPatient(preferred);
      os.saveOrder(tmpOrder);
    }
  }
  for (  PersonAttribute attr : notPreferred.getAttributes()) {
    if (!attr.isVoided()) {
      PersonAttribute tmpAttr=attr.copy();
      tmpAttr.setPerson(null);
      preferred.addAttribute(tmpAttr);
    }
  }
  if (!"M".equals(preferred.getGender()) && !"F".equals(preferred.getGender()))   preferred.setGender(notPreferred.getGender());
  if (preferred.getBirthdate() == null || preferred.getBirthdate().equals("") || (preferred.getBirthdateEstimated() && !notPreferred.getBirthdateEstimated())) {
    preferred.setBirthdate(notPreferred.getBirthdate());
    preferred.setBirthdateEstimated(notPreferred.getBirthdateEstimated());
  }
  if (preferred.getDeathDate() == null || preferred.getDeathDate().equals(""))   preferred.setDeathDate(notPreferred.getDeathDate());
  if (preferred.getCauseOfDeath() == null || preferred.getCauseOfDeath().equals(""))   preferred.setCauseOfDeath(notPreferred.getCauseOfDeath());
  voidPatient(notPreferred,"Merged with patient #" + preferred.getPatientId());
  savePatient(preferred);
}
