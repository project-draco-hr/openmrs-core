{
  HttpSession httpSession=request.getSession();
  Context context=(Context)httpSession.getAttribute(WebConstants.OPENMRS_CONTEXT_HTTPSESSION_ATTR);
  Concept concept=(Concept)object;
  Locale locale=RequestContextUtils.getLocale(request);
  if (context != null && context.isAuthenticated()) {
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter("action");
    if (!action.equals(msa.getMessage("Concept.delete"))) {
      String isSet=RequestUtils.getStringParameter(request,"conceptSet","");
      if (isSet.equals(""))       concept.setSet(false);
 else       concept.setSet(true);
      log.error("isSet: '" + isSet + "' ");
      log.error("concept.set: '" + concept.isSet() + "'");
      Collection<ConceptSynonym> originalSyns=concept.getSynonyms();
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        String localeName=l.toString();
        log.debug("newSynonyms: " + request.getParameter("newSynonyms_" + localeName));
        String[] tempSyns=request.getParameter("newSynonyms_" + localeName).split(",");
        log.debug("tempSyns: ");
        for (        String s : tempSyns)         log.debug(s);
        Set<ConceptSynonym> parameterSyns=new HashSet<ConceptSynonym>();
        for (        String syn : tempSyns) {
          syn=syn.trim();
          if (!syn.equals(""))           parameterSyns.add(new ConceptSynonym(concept,syn.toUpperCase(),l));
        }
        log.debug("initial originalSyns: ");
        for (        ConceptSynonym s : originalSyns)         log.debug(s);
        Set<ConceptSynonym> originalSynsCopy=new HashSet<ConceptSynonym>();
        originalSynsCopy.addAll(originalSyns);
        for (        ConceptSynonym o : originalSynsCopy) {
          if (o.getLocale().equals(l.getLanguage().substring(0,2)) && !parameterSyns.contains(o)) {
            originalSyns.remove(o);
          }
        }
        for (        ConceptSynonym p : parameterSyns) {
          if (!originalSyns.contains(p)) {
            originalSyns.add(p);
          }
        }
        log.debug("evaluated parameterSyns: ");
        for (        ConceptSynonym s : parameterSyns)         log.debug(s);
        log.debug("evaluated originalSyns: ");
        for (        ConceptSynonym s : originalSyns)         log.debug(s);
      }
      concept.setSynonyms(originalSyns);
      String conceptSets=request.getParameter("conceptSets");
      if (conceptSets == null)       concept.setConceptSets(null);
      int numberOfNamesSpecified=0;
      for (      Locale l : OPENMRS_CONCEPT_LOCALES()) {
        String localeName=l.toString();
        String conceptName=request.getParameter("name_" + localeName).toUpperCase();
        String shortName=request.getParameter("shortName_" + localeName);
        String description=request.getParameter("description_" + localeName);
        if ((shortName.length() > 0 || description.length() > 0) && conceptName.length() < 1) {
          errors.reject("dictionary.error.needName");
        }
        ConceptName cn=concept.getName(l,true);
        if (cn != null) {
          if (conceptName.length() > 0) {
            ++numberOfNamesSpecified;
            cn.setName(conceptName);
            cn.setShortName(shortName);
            cn.setDescription(description);
          }
 else {
            concept.removeName(cn);
          }
        }
 else {
          if (conceptName.length() > 0) {
            ++numberOfNamesSpecified;
            concept.addName(new ConceptName(conceptName,shortName,description,l));
          }
        }
      }
      if (numberOfNamesSpecified == 0) {
        errors.reject("error.names.length");
      }
    }
  }
 else {
    errors.reject("auth.invalid");
  }
  return super.processFormSubmission(request,response,concept,errors);
}
