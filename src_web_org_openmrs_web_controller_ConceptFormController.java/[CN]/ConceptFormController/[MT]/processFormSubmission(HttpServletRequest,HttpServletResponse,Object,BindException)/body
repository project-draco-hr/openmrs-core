{
  Concept concept=(Concept)object;
  ConceptService cs=Context.getConceptService();
  String jumpAction=request.getParameter("jumpAction");
  if (jumpAction != null) {
    Concept newConcept=null;
    if ("previous".equals(jumpAction))     newConcept=cs.getPrevConcept(concept);
 else     if ("next".equals(jumpAction))     newConcept=cs.getNextConcept(concept);
    if (newConcept != null)     return new ModelAndView(new RedirectView(getSuccessView() + "?conceptId=" + newConcept.getConceptId()));
 else     return new ModelAndView(new RedirectView(getSuccessView()));
  }
  if (Context.isAuthenticated()) {
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter("action");
    if (!action.equals(msa.getMessage("Concept.delete"))) {
      Collection<Locale> conceptLocales=cs.getLocalesOfConceptNames();
      String newLocaleSpec=request.getParameter("newLocaleAdded");
      if (newLocaleSpec != null) {
        Locale newLocale=LocaleUtility.fromSpecification(newLocaleSpec);
        conceptLocales.add(newLocale);
      }
      String isSet=ServletRequestUtils.getStringParameter(request,"conceptSet","");
      if (isSet.equals(""))       concept.setSet(false);
 else       concept.setSet(true);
      log.debug("isSet: '" + isSet + "' ");
      log.debug("concept.set: '" + concept.isSet() + "'");
      int numberOfNewConceptNames=0;
      Collection<ConceptName> originalSyns=concept.getNames();
      if (originalSyns == null)       originalSyns=new HashSet<ConceptName>();
      for (      Locale l : conceptLocales) {
        String localeName=l.toString();
        log.debug("newSynonyms: " + request.getParameter("newSynonyms_" + localeName));
        String[] tempSyns=request.getParameter("newSynonyms_" + localeName).split(",");
        log.debug("tempSyns: ");
        for (        String s : tempSyns)         log.debug(s);
        Set<ConceptName> parameterSyns=new HashSet<ConceptName>();
        for (        String syn : tempSyns) {
          syn=syn.trim();
          if (!syn.equals("")) {
            ConceptName anotherSynonym=new ConceptName(syn.toUpperCase(),l);
            anotherSynonym.setConcept(concept);
            parameterSyns.add(anotherSynonym);
          }
        }
        if (log.isDebugEnabled()) {
          log.debug("initial originalSyns: ");
          for (          ConceptName s : originalSyns)           log.debug(s);
        }
        Set<ConceptName> originalSynsCopy=new HashSet<ConceptName>();
        originalSynsCopy.addAll(originalSyns);
        for (        ConceptName o : originalSynsCopy) {
          if (o.getLocale().equals(l) && !parameterSyns.contains(o)) {
            originalSyns.remove(o);
          }
          if (log.isDebugEnabled()) {
            log.debug("evaluated parameterSyns: ");
            for (            ConceptName s : parameterSyns)             log.debug(s);
            log.debug("evaluated originalSyns: ");
            for (            ConceptName s : originalSyns)             log.debug(s);
          }
        }
        for (        ConceptName p : parameterSyns) {
          if (!originalSyns.contains(p)) {
            originalSyns.add(p);
            ++numberOfNewConceptNames;
          }
        }
        log.debug("evaluated parameterSyns: ");
        for (        ConceptName s : parameterSyns)         log.debug(s);
        log.debug("evaluated originalSyns: ");
        for (        ConceptName s : originalSyns)         log.debug(s);
      }
      concept.setNames(originalSyns);
      String conceptSets=request.getParameter("conceptSets");
      if (conceptSets == null)       concept.setConceptSets(null);
      User currentUser=Context.getAuthenticatedUser();
      int numberOfNamesSpecified=0;
      for (      Locale l : conceptLocales) {
        String localeName=l.toString();
        String conceptName=request.getParameter("name_" + localeName);
        String shortName=request.getParameter("shortName_" + localeName);
        String description=request.getParameter("description_" + localeName);
        if ((shortName.length() > 0 || description.length() > 0) && conceptName.length() < 1) {
          errors.reject("dictionary.error.needName");
        }
        ConceptName preferredName=concept.getPreferredName(l);
        if (preferredName != null) {
          if (conceptName.length() > 0) {
            ++numberOfNamesSpecified;
            preferredName.setName(conceptName);
          }
 else {
            concept.removeName(preferredName);
          }
        }
 else {
          if (conceptName.length() > 0) {
            ++numberOfNamesSpecified;
            preferredName=new ConceptName(conceptName,l);
            concept.setPreferredName(l,preferredName);
            ++numberOfNewConceptNames;
          }
        }
        if (shortName.length() > 0) {
          ConceptName conceptShortName=new ConceptName(shortName,l);
          concept.setShortName(l,conceptShortName);
          ++numberOfNewConceptNames;
        }
        if (description.length() > 0) {
          ConceptDescription cd=concept.getDescription(l,true);
          if (cd != null) {
            if (!cd.getDescription().equals(description)) {
              cd.setDescription(description);
              cd.setChangedBy(currentUser);
              cd.setDateChanged(new Date());
            }
          }
 else {
            cd=new ConceptDescription(description,l);
            concept.addDescription(cd);
          }
        }
      }
      if (numberOfNamesSpecified == 0) {
        errors.reject("error.names.length");
      }
      int i=0;
      List<ConceptMap> conceptMappingsToDelete=new ArrayList<ConceptMap>();
      Collection<ConceptMap> currentConceptMappings=concept.getConceptMappings();
      if (currentConceptMappings != null) {
        for (        ConceptMap mapping : currentConceptMappings) {
          String sourceCode=request.getParameter("conceptMappings[" + i++ + "].sourceCode");
          if (sourceCode == null) {
            if (currentConceptMappings.contains(mapping))             conceptMappingsToDelete.add(mapping);
          }
        }
      }
      String[] sourceCodes=ServletRequestUtils.getStringParameters(request,"newConceptMappingSourceCode");
      String[] sources=ServletRequestUtils.getStringParameters(request,"newConceptMappingSource");
      for (int x=0; x < sourceCodes.length; x++) {
        String sourceCode=sourceCodes[x];
        if (sourceCode.length() == 0)         break;
        String sourceString=sources[x];
        if (sourceCode.length() < 1 || sourceString.length() < 1)         continue;
        ConceptMap newConceptMap=new ConceptMap();
        newConceptMap.setSourceCode(sourceCode);
        ConceptSource source=cs.getConceptSource(Integer.valueOf(sourceString));
        newConceptMap.setSource(source);
        concept.addConceptMapping(newConceptMap);
      }
      currentConceptMappings=concept.getConceptMappings();
      if (currentConceptMappings != null) {
        concept.getConceptMappings().removeAll(conceptMappingsToDelete);
      }
    }
  }
 else {
    errors.reject("auth.invalid");
  }
  return super.processFormSubmission(request,response,concept,errors);
}
