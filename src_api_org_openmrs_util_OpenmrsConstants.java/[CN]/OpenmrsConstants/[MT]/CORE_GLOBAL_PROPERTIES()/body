{
  List<GlobalProperty> props=new Vector<GlobalProperty>();
  props.add(new GlobalProperty("use_patient_attribute.tribe","true","Indicates whether or not the 'tribe' attribute is shown when viewing/searching for patients"));
  props.add(new GlobalProperty("use_patient_attribute.healthCenter","false","Indicates whether or not the 'health center' attribute is shown when viewing/searching for patients"));
  props.add(new GlobalProperty("use_patient_attribute.mothersName","false","Indicates whether or not mother's name is able to be added/viewed for a patient"));
  props.add(new GlobalProperty("new_patient_form.showRelationships","false","true/false whether or not to show the relationship editor on the addPatient.htm screen"));
  props.add(new GlobalProperty("dashboard.overview.showConcepts","","Comma delimited list of concepts ids to show on the patient dashboard overview tab"));
  props.add(new GlobalProperty("dashboard.encounters.viewWhere","newWindow","Defines how the 'View Encounter' link should act. Known values: 'sameWindow', 'newWindow', 'oneNewWindow'"));
  props.add(new GlobalProperty("dashboard.encounters.showEmptyFields","true","true/false whether or not to show empty fields on the 'View Encounter' window"));
  props.add(new GlobalProperty("dashboard.encounters.usePages","smart","true/false/smart on how to show the pages on the 'View Encounter' window.  'smart' means that if > 50% of the fields have page numbers defined, show data in pages"));
  props.add(new GlobalProperty("dashboard.encounters.showViewLink","true","true/false whether or not to show the 'View Encounter' link on the patient dashboard"));
  props.add(new GlobalProperty("dashboard.encounters.showEditLink","true","true/false whether or not to show the 'Edit Encounter' link on the patient dashboard"));
  props.add(new GlobalProperty("dashboard.relationships.show_types","","Types of relationships separated by commas.  Doctor/Patient,Parent/Child"));
  props.add(new GlobalProperty("dashboard.regimen.displayDrugSetIds","ANTIRETROVIRAL DRUGS,TUBERCULOSIS TREATMENT DRUGS","Drug sets that appear on the Patient Dashboard Regimen tab. Comma separated list of name of concepts that are defined as drug sets."));
  props.add(new GlobalProperty("concept.weight","5089","Concept id of the concept defining the WEIGHT concept"));
  props.add(new GlobalProperty("concept.cd4_count","5497","Concept id of the concept defining the CD4 count concept"));
  props.add(new GlobalProperty("concept.causeOfDeath","5002","Concept id of the concept defining the CAUSE OF DEATH concept"));
  props.add(new GlobalProperty("concept.none","1107","Concept id of the concept defining the NONE concept"));
  props.add(new GlobalProperty("concept.otherNonCoded","5622","Concept id of the concept defining the OTHER NON-CODED concept"));
  props.add(new GlobalProperty("concept.patientDied","1742","Concept id of the concept defining the PATIEND DIED concept"));
  props.add(new GlobalProperty("concept.reasonExitedCare","1811","Concept id of the concept defining the REASON EXITED CARE concept"));
  props.add(new GlobalProperty("concept.reasonOrderStopped","1812","Concept id of the concept defining the REASON ORDER STOPPED concept"));
  props.add(new GlobalProperty("mail.transport_protocol","smtp","Transport protocol for the messaging engine. Valid values: smtp"));
  props.add(new GlobalProperty("mail.smtp_host","localhost","SMTP host name"));
  props.add(new GlobalProperty("mail.smtp_port","25","SMTP port"));
  props.add(new GlobalProperty("mail.from","info@openmrs.org","Email address to use as the default from address"));
  props.add(new GlobalProperty("mail.debug","false","true/false whether to print debugging information during mailing"));
  props.add(new GlobalProperty("mail.smtp_auth","false","true/false whether the smtp host requires authentication"));
  props.add(new GlobalProperty("mail.user","test","Username of the SMTP user (if smtp_auth is enabled)"));
  props.add(new GlobalProperty("mail.password","test","Password for the SMTP user (if smtp_auth is enabled)"));
  props.add(new GlobalProperty("mail.default_content_type","text/plain","Content type to append to the mail messages"));
  props.add(new GlobalProperty(ModuleConstants.REPOSITORY_FOLDER_PROPERTY,ModuleConstants.REPOSITORY_FOLDER_PROPERTY_DEFAULT,"Name of the folder in which to store the modules"));
  props.add(new GlobalProperty("layout.address.format","general","Format in which to display the person addresses.  Valid values are general, kenya, rwanda, usa, and lesotho"));
  props.add(new GlobalProperty("layout.name.format","short","Format in which to display the person names.  Valid values are short, full"));
  props.add(new GlobalProperty("scheduler.username",SchedulerConstants.SCHEDULER_USERNAME,"Username for the OpenMRS user that will perform the scheduler activities"));
  props.add(new GlobalProperty("scheduler.password",SchedulerConstants.SCHEDULER_PASSWORD,"Password for the OpenMRS user that will perform the scheduler activities"));
  props.add(new GlobalProperty(GP_CONCEPTS_LOCKED,"false","true/false whether or not concepts can be edited in this database."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_LISTING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for patients in _lists_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_VIEWING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for patients when _viewing individually_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_LISTING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for users in _lists_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_USER_VIEWING_ATTRIBUTES,"","A comma delimited list of PersonAttributeType names that should be displayed for users when _viewing individually_"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX,"^0*@SEARCH@([A-Z]+-[0-9])?$","A MySQL regular expression for the patient identifier search strings.  The @SEARCH@ string is replaced at runtime with the user's search string.  An empty regex will cause a simply 'like' sql search to be used"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_PREFIX,"","This property is only used if " + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + " is empty.  The string here is prepended to the sql indentifier search string.  The sql becomes \"... where identifier like '<PREFIX><QUERY STRING><SUFFIX>';\".  Typically this value is either a percent sign (%) or empty."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SUFFIX,"%","This property is only used if " + GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX + " is empty.  The string here is prepended to the sql indentifier search string.  The sql becomes \"... where identifier like '<PREFIX><QUERY STRING><SUFFIX>';\".  Typically this value is either a percent sign (%) or empty."));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_PATIENT_SEARCH_MAX_RESULTS,"1000","The maximum number of results returned by patient searches"));
  props.add(new GlobalProperty(GLOBAL_PROPERTY_GZIP_ENABLED,"false","Set to 'true' to turn on OpenMRS's gzip filter, and have the webapp compress data before sending it to any client that supports it. Generally use this if you are running Tomcat standalone. If you are running Tomcat behind Apache, then you'd want to use Apache to do gzip compression."));
  for (  GlobalProperty gp : ModuleFactory.getGlobalProperties()) {
    props.add(gp);
  }
  return props;
}
