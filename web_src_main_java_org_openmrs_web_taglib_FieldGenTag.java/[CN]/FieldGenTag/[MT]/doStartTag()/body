{
  if (type == null) {
    type="";
  }
  if (formFieldName == null) {
    formFieldName="";
  }
  if (formFieldName.length() > 0) {
    FieldGenHandler handler=getHandlerByClassName(type);
    if (handler != null) {
      handler.setFieldGenTag(this);
      handler.run();
    }
 else {
      StringBuilder output=new StringBuilder("Cannot handle type [" + type + "]. Please add a module to handle this type.");
      if (type.equals("char") || type.indexOf("java.lang.Character") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        if (startVal.length() > 1) {
          startVal=startVal.substring(0,1);
        }
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_CHAR_LENGTH : fieldLength;
        output.setLength(0);
        output.append("<input type=\"text\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName).append("\" value=\"");
        output.append(startVal).append("\" size=\"").append(fieldLength).append("\" maxlength=\"1\" />");
      }
 else       if (type.equals("int") || type.indexOf("java.lang.Integer") >= 0 || type.equals("long") || type.indexOf("java.lang.Long") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_INT_LENGTH : fieldLength;
        output.setLength(0);
        output.append("<input type=\"text\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName).append("\" value=\"");
        output.append(startVal).append("\" size=\"").append(fieldLength).append("\" />");
      }
 else       if (type.equals("float") || type.indexOf("java.lang.Float") >= 0 || type.equals("double") || type.indexOf("java.lang.Double") >= 0 || type.indexOf("java.lang.Number") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal;
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_FLOAT_LENGTH : fieldLength;
        output.setLength(0);
        output.append("<input type=\"text\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName).append("\" value=\"");
        output.append(startVal).append("\" size=\"").append(fieldLength).append("\" />");
      }
 else       if (type.equals("boolean") || type.indexOf("java.lang.Boolean") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal.toLowerCase();
        if ("false".equals(startVal) || "0".equals(startVal)) {
          startVal="false";
        }
        if ("true".equals(startVal) || "1".equals(startVal)) {
          startVal="true";
        }
        if ("unknown".equals(startVal) || "?".equals(startVal)) {
          startVal="unknown";
        }
        String forceInputType=this.parameterMap != null ? (String)this.parameterMap.get("forceInputType") : null;
        String isNullable=this.parameterMap != null ? (String)this.parameterMap.get("isNullable") : null;
        String trueLabel=this.parameterMap != null ? (String)this.parameterMap.get("trueLabel") : null;
        String falseLabel=this.parameterMap != null ? (String)this.parameterMap.get("falseLabel") : null;
        String unknownLabel=this.parameterMap != null ? (String)this.parameterMap.get("unknownLabel") : null;
        if (forceInputType == null) {
          forceInputType="";
        }
        if ("checkbox".equals(forceInputType)) {
          output.setLength(0);
          output.append("<input type=\"checkbox\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
          output.append("\" value=\"true\"").append(("true".equals(startVal) ? " checked" : "")).append("/> ");
        }
 else {
          if (isNullable == null) {
            isNullable="";
          }
          if (trueLabel == null) {
            trueLabel=Context.getMessageSourceService().getMessage("general.yes");
          }
          if (falseLabel == null) {
            falseLabel=Context.getMessageSourceService().getMessage("general.no");
          }
          if (unknownLabel == null) {
            unknownLabel=Context.getMessageSourceService().getMessage("general.unknown");
          }
          if ("false".equalsIgnoreCase(isNullable) || "f".equalsIgnoreCase(isNullable) || "0".equals(isNullable)) {
            output.setLength(0);
            output.append("<input type=\"radio\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
            output.append("_f\" value=\"false\"").append(("false".equals(startVal) ? " checked" : "")).append("/> ");
            output.append(falseLabel);
            output.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            output.append("<input type=\"radio\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
            output.append("_t\" value=\"true\"").append(("true".equals(startVal) ? " checked" : "")).append("/> ");
            output.append(trueLabel);
          }
 else {
            output.setLength(0);
            output.append("<input type=\"radio\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
            output.append("_f\" value=\"false\"").append(("false".equals(startVal) ? " checked" : "")).append("/> ");
            output.append(falseLabel);
            output.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            output.append("<input type=\"radio\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
            output.append("_t\" value=\"true\"").append(("true".equals(startVal) ? " checked" : "")).append("/> ");
            output.append(trueLabel);
            output.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            output.append("<input type=\"radio\" name=\"").append(formFieldName).append("\" id=\"").append(formFieldName);
            output.append("_u\" value=\"unknown\"").append(("unknown".equals(startVal) ? " checked" : "")).append("/> ");
            output.append(unknownLabel);
          }
        }
      }
 else       if (type.indexOf("$") >= 0) {
        String className=type;
        Class cls=null;
        try {
          cls=Class.forName(className);
        }
 catch (        Exception e) {
          cls=null;
          log.error("Could not instantiate class for this enum of class name [" + className + "] in FieldGenTag");
        }
        if (cls != null && cls.isEnum()) {
          Object[] enumConstants=cls.getEnumConstants();
          if (enumConstants != null && enumConstants.length > 0) {
            String startVal="";
            if (val != null) {
              startVal=val.toString();
            }
            log.debug("val is " + val);
            log.debug("val.toString is " + startVal);
            if (startVal == null) {
              startVal="";
            }
            output.setLength(0);
            output.append("<select name=\"").append(formFieldName).append("\" id=\"").append(formFieldName).append("\">");
            StringBuilder options=new StringBuilder();
            for (int i=0; i < enumConstants.length; i++) {
              options.append("<option value=\"").append(enumConstants[i].toString()).append("\"").append(startVal.equals(enumConstants[i].toString()) ? " selected" : "").append(">").append(enumConstants[i].toString()).append("</option>");
            }
            output.append(options.toString());
            output.append("</select> ");
          }
        }
      }
 else       if (type.equals("dropDownList")) {
        String startVal="";
        if (val != null) {
          startVal=StringEscapeUtils.escapeHtml(val.toString());
        }
        String items=this.parameterMap != null ? (String)this.parameterMap.get("items") : null;
        output.setLength(0);
        output.append("<select name=\"").append(formFieldName).append("\" id=\"").append(formFieldName).append("\">");
        if (items != null && !items.isEmpty()) {
          StringBuilder options=new StringBuilder();
          for (          String item : items.split(",")) {
            String escapedItem=StringEscapeUtils.escapeHtml(item);
            escapedItem=StringEscapeUtils.escapeJavaScript(escapedItem);
            options.append("<option value=\"").append(escapedItem).append("\"").append(startVal.equals(escapedItem) ? " selected" : "").append(">").append(escapedItem).append("</option>");
          }
          output.append(options.toString());
        }
        output.append("</select> ");
      }
      try {
        pageContext.getOut().write(output.toString());
      }
 catch (      IOException e) {
        log.error(e);
      }
    }
  }
  if (url == null) {
    url="default.field";
  }
  if (!url.endsWith("field")) {
    url+=".field";
  }
  url="/fieldGen/" + url;
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.type",type);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.formFieldName",formFieldName);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.parameters",OpenmrsUtil.parseParameterList(parameters));
  HashMap<String,Object> hmParamMap=(HashMap<String,Object>)pageContext.getRequest().getAttribute("org.openmrs.fieldGen.parameterMap");
  if (hmParamMap == null) {
    hmParamMap=new HashMap<String,Object>();
  }
  if (this.parameterMap != null) {
    hmParamMap.putAll(this.parameterMap);
  }
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.parameterMap",hmParamMap);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.object",val);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.request",pageContext.getRequest());
  try {
    pageContext.include(this.url);
  }
 catch (  ServletException e) {
    log.error("ServletException while trying to include a file in FieldGenTag",e);
  }
catch (  IOException e) {
    log.error("IOException while trying to include a file in FieldGenTag",e);
  }
  resetValues();
  return SKIP_BODY;
}
