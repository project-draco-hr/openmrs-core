{
  List<Patient> patients=new Vector<Patient>();
  if (attributes.size() > 0) {
    String select="select distinct p1 from Patient p1, Patient p2";
    String where=" where p1 <> p2 ";
    String orderBy=" order by ";
    Class patient=Patient.class;
    Set<String> patientFieldNames=new HashSet<String>(patient.getDeclaredFields().length);
    for (    Field f : patient.getDeclaredFields()) {
      patientFieldNames.add(f.getName());
      log.debug(f.getName());
    }
    Class person=Person.class;
    Set<String> personFieldNames=new HashSet<String>(person.getDeclaredFields().length);
    for (    Field f : person.getDeclaredFields()) {
      personFieldNames.add(f.getName());
      log.debug(f.getName());
    }
    Class personName=PersonName.class;
    Set<String> personNameFieldNames=new HashSet<String>(personName.getDeclaredFields().length);
    for (    Field f : personName.getDeclaredFields()) {
      personNameFieldNames.add(f.getName());
      log.debug(f.getName());
    }
    Class identifier=PatientIdentifier.class;
    Set<String> identifierFieldNames=new HashSet<String>(identifier.getDeclaredFields().length);
    for (    Field f : identifier.getDeclaredFields()) {
      identifierFieldNames.add(f.getName());
      log.debug(f.getName());
    }
    if (!attributes.contains("includeVoided")) {
      where+="and p1.voided = false and p2.voided = false ";
    }
    for (    String s : attributes) {
      if (patientFieldNames.contains(s)) {
        where+=" and p1." + s + " = p2."+ s;
        orderBy+="p1." + s + ", ";
      }
 else       if (personFieldNames.contains(s)) {
        if (!select.contains("Person ")) {
          select+=", Person person1, Person person2";
          where+=" and p1.patientId = person1.personId and p2.patientId = person2.personId ";
        }
        where+=" and person1." + s + " = person2."+ s;
        orderBy+="person1." + s + ", ";
      }
 else       if (personNameFieldNames.contains(s)) {
        if (!select.contains("PersonName")) {
          select+=", PersonName pn1, PersonName pn2";
          where+=" and p1 = pn1.person and p2 = pn2.person ";
        }
        where+=" and pn1." + s + " = pn2."+ s;
        orderBy+="pn1." + s + ", ";
      }
 else       if (identifierFieldNames.contains(s)) {
        if (!select.contains("PatientIdentifier")) {
          select+=", PatientIdentifier pi1, PatientIdentifier pi2";
          where+=" and p1 = pi1.patient and p2 = pi2.patient ";
        }
        where+=" and pi1." + s + " = pi2."+ s;
        orderBy+="pi1." + s + ", ";
      }
 else {
        log.warn("Unidentified attribute: " + s);
      }
    }
    int index=orderBy.lastIndexOf(", ");
    orderBy=orderBy.substring(0,index);
    select=select + where + orderBy;
    Query query=sessionFactory.getCurrentSession().createQuery(select);
    patients=query.list();
  }
  return patients;
}
