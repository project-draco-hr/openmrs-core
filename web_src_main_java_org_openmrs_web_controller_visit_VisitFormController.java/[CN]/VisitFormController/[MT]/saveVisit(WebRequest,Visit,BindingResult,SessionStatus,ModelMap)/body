{
  List<Attribute> toVoid=new ArrayList<Attribute>();
  for (  VisitAttributeType vat : (List<VisitAttributeType>)model.get("visitAttributeTypes")) {
    AttributeHandler<?> handler=Context.getAttributeService().getHandler(vat);
    for (Iterator<String> iter=request.getParameterNames(); iter.hasNext(); ) {
      String paramName=iter.next();
      if (paramName.startsWith("attribute." + vat.getId())) {
        String afterPrefix=paramName.substring(("attribute." + vat.getId()).length());
        String paramValue=request.getParameter(paramName);
        if (afterPrefix.startsWith(".new[")) {
          if (StringUtils.hasText(paramValue)) {
            if (AttributeUtil.isValidValue(handler,paramValue)) {
              VisitAttribute va=new VisitAttribute();
              va.setAttributeType(vat);
              va.setSerializedValue(paramValue);
              visit.addAttribute(va);
            }
 else {
              result.rejectValue("activeAttributes","attribute.error.invalid",new Object[]{vat.getName()},"Illegal value for " + vat.getName());
            }
          }
        }
 else         if (afterPrefix.startsWith(".existing[")) {
          Integer existingAttributeId=getFromSquareBrackets(afterPrefix);
          VisitAttribute existing=findAttributeById(visit,existingAttributeId);
          if (existing == null)           throw new RuntimeException("Visit was modified between page load and submit. Try again.");
          if (!StringUtils.hasText(paramValue)) {
            toVoid.add(existing);
          }
 else           if (!existing.getSerializedValue().equals(paramValue)) {
            if (AttributeUtil.isValidValue(handler,paramValue)) {
              toVoid.add(existing);
              VisitAttribute newVal=new VisitAttribute();
              newVal.setAttributeType(vat);
              newVal.setSerializedValue(paramValue);
              visit.addAttribute(newVal);
            }
 else {
              result.rejectValue("activeAttributes","attribute.error.invalid",new Object[]{vat.getName()},"Illegal value for " + vat.getName());
            }
          }
        }
      }
    }
  }
  new VisitValidator().validate(visit,result);
  if (!result.hasErrors()) {
    for (    Attribute<?> attr : toVoid)     voidAttribute(attr);
    try {
      Context.getVisitService().saveVisit(visit);
      if (log.isDebugEnabled())       log.debug("Saved visit: " + visit.toString());
      request.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Visit.saved",WebRequest.SCOPE_SESSION);
      return "redirect:" + VISIT_FORM_URL + ".form?visitId="+ visit.getVisitId();
    }
 catch (    APIException e) {
      log.warn("Error while saving visit(s)",e);
      request.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"Visit.save.error",WebRequest.SCOPE_SESSION);
    }
  }
  return VISIT_FORM;
}
