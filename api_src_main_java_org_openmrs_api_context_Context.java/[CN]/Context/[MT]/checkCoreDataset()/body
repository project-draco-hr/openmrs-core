{
  try {
    Context.addProxyPrivilege(PrivilegeConstants.MANAGE_ROLES);
    Set<String> currentRoleNames=new HashSet<String>();
    for (    Role role : Context.getUserService().getAllRoles()) {
      currentRoleNames.add(role.getRole().toUpperCase());
    }
    Map<String,String> map=OpenmrsUtil.getCoreRoles();
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      String roleName=entry.getKey();
      if (!currentRoleNames.contains(roleName.toUpperCase())) {
        Role role=new Role();
        role.setRole(roleName);
        role.setDescription(entry.getValue());
        Context.getUserService().saveRole(role);
      }
    }
  }
 catch (  Exception e) {
    log.error("Error while setting core roles for openmrs system",e);
  }
 finally {
    Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_ROLES);
  }
  try {
    Context.addProxyPrivilege(PrivilegeConstants.MANAGE_PRIVILEGES);
    Set<String> currentPrivilegeNames=new HashSet<String>();
    for (    Privilege privilege : Context.getUserService().getAllPrivileges()) {
      currentPrivilegeNames.add(privilege.getPrivilege().toUpperCase());
    }
    Map<String,String> map=OpenmrsUtil.getCorePrivileges();
    for (    Map.Entry<String,String> entry : map.entrySet()) {
      String privilegeName=entry.getKey();
      if (!currentPrivilegeNames.contains(privilegeName.toUpperCase())) {
        Privilege p=new Privilege();
        p.setPrivilege(privilegeName);
        p.setDescription(entry.getValue());
        Context.getUserService().savePrivilege(p);
      }
    }
  }
 catch (  Exception e) {
    log.error("Error while setting core privileges",e);
  }
 finally {
    Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_PRIVILEGES);
  }
  try {
    Context.addProxyPrivilege(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES);
    Context.addProxyPrivilege(PrivilegeConstants.VIEW_GLOBAL_PROPERTIES);
    Set<String> currentPropNames=new HashSet<String>();
    Map<String,GlobalProperty> propsMissingDescription=new HashMap<String,GlobalProperty>();
    Map<String,GlobalProperty> propsMissingDatatype=new HashMap<String,GlobalProperty>();
    for (    GlobalProperty prop : Context.getAdministrationService().getAllGlobalProperties()) {
      currentPropNames.add(prop.getProperty().toUpperCase());
      if (prop.getDescription() == null) {
        propsMissingDescription.put(prop.getProperty().toUpperCase(),prop);
      }
      if (prop.getDatatypeClassname() == null) {
        propsMissingDatatype.put(prop.getProperty().toUpperCase(),prop);
      }
    }
    for (    GlobalProperty coreProp : OpenmrsConstants.CORE_GLOBAL_PROPERTIES()) {
      String corePropName=coreProp.getProperty().toUpperCase();
      if (!currentPropNames.contains(corePropName)) {
        Context.getAdministrationService().saveGlobalProperty(coreProp);
        currentPropNames.add(corePropName);
      }
 else {
        GlobalProperty propToUpdate=propsMissingDescription.get(corePropName);
        if (propToUpdate != null) {
          propToUpdate.setDescription(coreProp.getDescription());
          Context.getAdministrationService().saveGlobalProperty(propToUpdate);
        }
        propToUpdate=propsMissingDatatype.get(corePropName);
        if (propToUpdate != null && coreProp.getDatatypeClassname() != null) {
          propToUpdate.setDatatypeClassname(coreProp.getDatatypeClassname());
          propToUpdate.setDatatypeConfig(coreProp.getDatatypeConfig());
          propToUpdate.setPreferredHandlerClassname(coreProp.getPreferredHandlerClassname());
          propToUpdate.setHandlerConfig(coreProp.getHandlerConfig());
          Context.getAdministrationService().saveGlobalProperty(propToUpdate);
        }
      }
    }
  }
 catch (  Exception e) {
    log.error("Error while setting core global properties",e);
  }
 finally {
    Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES);
    Context.removeProxyPrivilege(PrivilegeConstants.VIEW_GLOBAL_PROPERTIES);
  }
  AdministrationService as=Context.getAdministrationService();
  Boolean disableValidation=Boolean.valueOf(as.getGlobalProperty(OpenmrsConstants.GP_DISABLE_VALIDATION,"false"));
  ValidateUtil.setDisableValidation(disableValidation);
}
