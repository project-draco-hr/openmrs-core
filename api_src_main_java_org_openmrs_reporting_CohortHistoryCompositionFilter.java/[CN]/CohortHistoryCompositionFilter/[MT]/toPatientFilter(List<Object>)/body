{
  log.debug("Starting with " + phrase);
  List<Object> use=new ArrayList<Object>();
  for (ListIterator<Object> i=phrase.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof List)     use.add(toPatientFilter((List<Object>)o));
 else     if (o instanceof Integer)     use.add(getHistory().getSearchHistory().get((Integer)o - 1));
 else     use.add(o);
  }
  log.debug("Base case with " + use);
  boolean invertTheNext=false;
  for (ListIterator<Object> i=use.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof BooleanOperator) {
      if ((BooleanOperator)o == BooleanOperator.NOT) {
        i.remove();
        invertTheNext=!invertTheNext;
      }
 else {
        if (invertTheNext)         throw new RuntimeException("Can't have NOT AND. Test() should have failed");
      }
    }
 else {
      if (invertTheNext) {
        i.set(new InversePatientFilter((PatientFilter)o));
        invertTheNext=false;
      }
    }
  }
  log.debug("Finished with NOTs: " + use);
  if (use.size() == 1) {
    return (PatientFilter)use.get(0);
  }
  BooleanOperator bo=BooleanOperator.AND;
  List<PatientFilter> args=new ArrayList<PatientFilter>();
  for (  Object o : use)   if (o instanceof BooleanOperator)   bo=(BooleanOperator)o;
 else   args.add((PatientFilter)o);
  return new CompoundPatientFilter(bo,args);
}
