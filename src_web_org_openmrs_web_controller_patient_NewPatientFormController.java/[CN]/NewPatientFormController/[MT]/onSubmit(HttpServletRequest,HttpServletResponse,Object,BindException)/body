{
  HttpSession httpSession=request.getSession();
  log.debug("\nNOW GOING THROUGH ONSUBMIT METHOD.......................................\n\n");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=false;
    String action=request.getParameter("action");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage("general.cancel"))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"general.canceled");
      return new ModelAndView(new RedirectView("addPerson.htm?personType=patient"));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug("Checking new name: " + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug("The address to add/check: " + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString()))         duplicate=true;
      }
      if (log.isDebugEnabled())       log.debug("The duplicate address:  " + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=shortPatient.getAddress();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug("patient addresses: " + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new HashSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    patient.addIdentifiers(newIdentifiers);
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    if (shortPatient.getTribe() == "" || shortPatient.getTribe() == null)     patient.setTribe(null);
 else {
      Tribe t=ps.getTribe(Integer.valueOf(shortPatient.getTribe()));
      patient.setTribe(t);
    }
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes("patient","viewing")) {
      String value=request.getParameter(type.getPersonAttributeTypeId().toString());
      patient.addAttribute(new PersonAttribute(type,value));
    }
    Patient newPatient=null;
    try {
      newPatient=ps.updatePatient(patient);
    }
 catch (    InvalidIdentifierFormatException iife) {
      log.error(iife);
      patient.removeIdentifier(iife.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.formatInvalid");
      isError=true;
    }
catch (    InvalidCheckDigitException icde) {
      log.error(icde);
      patient.removeIdentifier(icde.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.checkDigit");
      isError=true;
    }
catch (    IdentifierNotUniqueException inue) {
      log.error(inue);
      patient.removeIdentifier(inue.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.notUnique");
      isError=true;
    }
catch (    DuplicateIdentifierException die) {
      log.error(die);
      patient.removeIdentifier(die.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.duplicate");
      isError=true;
    }
catch (    InsufficientIdentifiersException iie) {
      log.error(iie);
      patient.removeIdentifier(iie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.insufficientIdentifiers");
      isError=true;
    }
catch (    PatientIdentifierException pie) {
      log.error(pie);
      patient.removeIdentifier(pie.getPatientIdentifier());
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.general");
      isError=true;
    }
    if (!isError) {
      String[] personAs=request.getParameterValues("personA");
      String[] types=request.getParameterValues("relationshipType");
      Person person=personService.getPerson(patient);
      List<Relationship> relationships;
      List<Person> newPersonAs=new Vector<Person>();
      if (person != null)       relationships=personService.getRelationships(person);
 else       relationships=new Vector<Relationship>();
      if (personAs != null) {
        for (int x=0; x < personAs.length; x++) {
          String personAString=personAs[x];
          String typeString=types[x];
          if (personAString != null && personAString.length() > 0 && typeString != null && typeString.length() > 0) {
            Person personA=personService.getPerson(Integer.valueOf(personAString));
            RelationshipType type=personService.getRelationshipType(Integer.valueOf(typeString));
            newPersonAs.add(personA);
            boolean found=false;
            for (            Relationship rel : relationships) {
              if (rel.getPersonA().equals(person))               found=true;
              if (rel.getPersonA().equals(personA)) {
                rel.setRelationshipType(type);
                found=true;
              }
            }
            if (!found) {
              Relationship r=new Relationship(personA,person,type);
              relationships.add(r);
            }
          }
        }
      }
      for (      Relationship rel : relationships) {
        if (newPersonAs.contains(rel.getPersonA()) || person.equals(rel.getPersonA()))         personService.updateRelationship(rel);
 else         personService.deleteRelationship(rel);
      }
      if (patient.getDead()) {
        log.debug("Patient is dead, so let's make sure there's an Obs for it");
        String codProp=Context.getAdministrationService().getGlobalProperty("concept.causeOfDeath");
        Concept causeOfDeath=Context.getConceptService().getConceptByIdOrName(codProp);
        if (causeOfDeath != null) {
          Set<Obs> obssDeath=Context.getObsService().getObservations(patient,causeOfDeath,false);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error("Multiple causes of death (" + obssDeath.size() + ")?  Shouldn't be...");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug("Already has a cause of death, so changing it");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug("No cause of death yet, let's create one.");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getEncounterService().getLocationByName("Unknown Location");
                if (loc == null)                 loc=Context.getEncounterService().getLocation(new Integer(1));
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error("Could not find a suitable location for which to create this new Obs");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug("Current cause is null, attempting to set to NONE");
                String noneConcept=Context.getAdministrationService().getGlobalProperty("concept.none");
                currCause=Context.getConceptService().getConceptByIdOrName(noneConcept);
              }
              if (currCause != null) {
                log.debug("Current cause is not null, setting to value_coded");
                obsDeath.setValueCoded(currCause);
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty("concept.otherNonCoded");
                Concept conceptOther=Context.getConceptService().getConceptByIdOrName(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,"causeOfDeath_other","");
                    log.debug("Setting value_text as " + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug("New concept is NOT the OTHER concept, so setting to blank");
                    obsDeath.setValueText("");
                  }
                }
 else {
                  log.debug("Don't seem to know about an OTHER concept, so deleting value_text");
                  obsDeath.setValueText("");
                }
                Context.getObsService().updateObs(obsDeath);
              }
 else {
                log.debug("Current cause is still null - aborting mission");
              }
            }
          }
        }
 else {
          log.debug("Cause of death is null - should not have gotten here without throwing an error on the form.");
        }
      }
    }
    if (isError) {
      log.error("Had an error during processing. Redirecting to " + this.getFormView());
      return this.showForm(request,response,errors);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Patient.saved");
      return new ModelAndView(new RedirectView(view + "?patientId=" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}
