{
  HttpSession httpSession=request.getSession();
  log.debug("\nNOW GOING THROUGH ONSUBMIT METHOD.......................................\n\n");
  if (Context.isAuthenticated()) {
    PatientService ps=Context.getPatientService();
    PersonService personService=Context.getPersonService();
    ShortPatientModel shortPatient=(ShortPatientModel)obj;
    String view=getSuccessView();
    boolean isError=errors.hasErrors();
    String action=request.getParameter("action");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    if (action != null && action.equals(msa.getMessage("general.cancel"))) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"general.canceled");
      return new ModelAndView(new RedirectView("addPerson.htm?personType=patient"));
    }
    Patient patient=null;
    if (shortPatient.getPatientId() != null) {
      patient=ps.getPatient(shortPatient.getPatientId());
      if (patient == null) {
        try {
          Person p=personService.getPerson(shortPatient.getPatientId());
          Context.clearSession();
          patient=new Patient(p);
        }
 catch (        ObjectRetrievalFailureException noUserEx) {
        }
      }
    }
    if (patient == null)     patient=new Patient();
    boolean duplicate=false;
    PersonName newName=shortPatient.getName();
    if (log.isDebugEnabled())     log.debug("Checking new name: " + newName.toString());
    for (    PersonName pn : patient.getNames()) {
      if (((pn.getGivenName() == null && newName.getGivenName() == null) || OpenmrsUtil.nullSafeEquals(pn.getGivenName(),newName.getGivenName())) && ((pn.getMiddleName() == null && newName.getMiddleName() == null) || OpenmrsUtil.nullSafeEquals(pn.getMiddleName(),newName.getMiddleName())) && ((pn.getFamilyName() == null && newName.getFamilyName() == null) || OpenmrsUtil.nullSafeEquals(pn.getFamilyName(),newName.getFamilyName())))       duplicate=true;
    }
    if (!duplicate) {
      if (patient.getPersonName() != null)       patient.getPersonName().setPreferred(false);
      newName.setPersonNameId(null);
      newName.setPreferred(true);
      newName.setUuid(null);
      patient.addName(newName);
    }
    if (log.isDebugEnabled())     log.debug("The address to add/check: " + shortPatient.getAddress());
    if (shortPatient.getAddress() != null && !shortPatient.getAddress().isBlank()) {
      duplicate=false;
      for (      PersonAddress pa : patient.getAddresses()) {
        if (pa.toString().equals(shortPatient.getAddress().toString())) {
          duplicate=true;
          pa.setPreferred(true);
        }
 else {
          pa.setPreferred(false);
        }
      }
      if (log.isDebugEnabled())       log.debug("The duplicate address:  " + duplicate);
      if (!duplicate) {
        PersonAddress newAddress=(PersonAddress)shortPatient.getAddress().clone();
        newAddress.setPersonAddressId(null);
        newAddress.setPreferred(true);
        newAddress.setUuid(null);
        patient.addAddress(newAddress);
      }
    }
    if (log.isDebugEnabled())     log.debug("patient addresses: " + patient.getAddresses());
    if (patient.getIdentifiers() == null)     patient.setIdentifiers(new TreeSet<PatientIdentifier>());
    for (    PatientIdentifier pi : patient.getIdentifiers()) {
      pi.setPreferred(pref.equals(pi.getIdentifier() + pi.getIdentifierType().getPatientIdentifierTypeId()));
    }
    for (    PersonAttributeType type : personService.getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING)) {
      String paramName=type.getPersonAttributeTypeId().toString();
      String value=request.getParameter(paramName);
      if (value != null) {
        PersonAttribute attribute=new PersonAttribute(type,value);
        try {
          Object hydratedObject=attribute.getHydratedObject();
          if (hydratedObject == null || "".equals(hydratedObject.toString())) {
            attribute.setValue("");
          }
 else           if (hydratedObject instanceof Attributable) {
            attribute.setValue(((Attributable)hydratedObject).serialize());
          }
 else           if (!hydratedObject.getClass().getName().equals(type.getFormat()))           throw new APIException();
        }
 catch (        APIException e) {
          errors.rejectValue("attributeMap[" + type.getName() + "]","Invalid value for " + type.getName() + ": '"+ value+ "'");
          log.warn("Got an invalid value: " + value + " while setting personAttributeType id #"+ paramName,e);
          attribute.setValue("");
        }
        patient.addAttribute(attribute);
      }
    }
    for (    PatientIdentifier identifier : newIdentifiers) {
      identifier.setPatient(patient);
      for (      PatientIdentifier currentIdentifier : patient.getActiveIdentifiers()) {
        if (currentIdentifier.equals(identifier)) {
          patient.removeIdentifier(currentIdentifier);
          Context.evictFromSession(currentIdentifier);
        }
      }
    }
    patient.addIdentifiers(newIdentifiers);
    List<PatientIdentifier> newIdentifiersList=new Vector<PatientIdentifier>();
    newIdentifiersList.addAll(newIdentifiers);
    for (    PatientIdentifier identifier : patient.getIdentifiers()) {
      if (!newIdentifiersList.contains(identifier)) {
        identifier.setVoided(true);
        identifier.setVoidReason("Removed from new patient screen");
      }
    }
    patient.setBirthdate(shortPatient.getBirthdate());
    patient.setBirthdateEstimated(shortPatient.getBirthdateEstimated());
    patient.setGender(shortPatient.getGender());
    patient.setDead(shortPatient.getDead());
    if (patient.isDead()) {
      patient.setDeathDate(shortPatient.getDeathDate());
      patient.setCauseOfDeath(shortPatient.getCauseOfDeath());
    }
 else {
      patient.setDeathDate(null);
      patient.setCauseOfDeath(null);
    }
    Patient newPatient=null;
    if (!isError) {
      try {
        newPatient=ps.savePatient(patient);
      }
 catch (      InvalidIdentifierFormatException iife) {
        log.error(iife);
        patient.removeIdentifier(iife.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.formatInvalid");
        isError=true;
      }
catch (      InvalidCheckDigitException icde) {
        log.error(icde);
        patient.removeIdentifier(icde.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.checkDigit");
        isError=true;
      }
catch (      IdentifierNotUniqueException inue) {
        log.error(inue);
        patient.removeIdentifier(inue.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.notUnique");
        isError=true;
      }
catch (      DuplicateIdentifierException die) {
        log.error(die);
        patient.removeIdentifier(die.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.duplicate");
        isError=true;
      }
catch (      InsufficientIdentifiersException iie) {
        log.error(iie);
        patient.removeIdentifier(iie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"PatientIdentifier.error.insufficientIdentifiers");
        isError=true;
      }
catch (      PatientIdentifierException pie) {
        log.error(pie);
        patient.removeIdentifier(pie.getPatientIdentifier());
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,pie.getMessage());
        isError=true;
      }
      if (patient.getDead()) {
        log.debug("Patient is dead, so let's make sure there's an Obs for it");
        String codProp=Context.getAdministrationService().getGlobalProperty("concept.causeOfDeath");
        Concept causeOfDeath=Context.getConceptService().getConcept(codProp);
        if (causeOfDeath != null) {
          List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,causeOfDeath);
          if (obssDeath != null) {
            if (obssDeath.size() > 1) {
              log.error("Multiple causes of death (" + obssDeath.size() + ")?  Shouldn't be...");
            }
 else {
              Obs obsDeath=null;
              if (obssDeath.size() == 1) {
                log.debug("Already has a cause of death, so changing it");
                obsDeath=obssDeath.iterator().next();
              }
 else {
                log.debug("No cause of death yet, let's create one.");
                obsDeath=new Obs();
                obsDeath.setPerson(patient);
                obsDeath.setConcept(causeOfDeath);
                Location loc=Context.getLocationService().getDefaultLocation();
                if (loc != null)                 obsDeath.setLocation(loc);
 else                 log.error("Could not find a suitable location for which to create this new Obs");
              }
              Concept currCause=patient.getCauseOfDeath();
              if (currCause == null) {
                log.debug("Current cause is null, attempting to set to NONE");
                String noneConcept=Context.getAdministrationService().getGlobalProperty("concept.none");
                currCause=Context.getConceptService().getConcept(noneConcept);
              }
              if (currCause != null) {
                log.debug("Current cause is not null, setting to value_coded");
                obsDeath.setValueCoded(currCause);
                obsDeath.setValueCodedName(currCause.getName());
                Date dateDeath=patient.getDeathDate();
                if (dateDeath == null)                 dateDeath=new Date();
                obsDeath.setObsDatetime(dateDeath);
                String otherConcept=Context.getAdministrationService().getGlobalProperty("concept.otherNonCoded");
                Concept conceptOther=Context.getConceptService().getConcept(otherConcept);
                if (conceptOther != null) {
                  if (conceptOther.equals(currCause)) {
                    String otherInfo=ServletRequestUtils.getStringParameter(request,"causeOfDeath_other","");
                    log.debug("Setting value_text as " + otherInfo);
                    obsDeath.setValueText(otherInfo);
                  }
 else {
                    log.debug("New concept is NOT the OTHER concept, so setting to blank");
                    obsDeath.setValueText("");
                  }
                }
 else {
                  log.debug("Don't seem to know about an OTHER concept, so deleting value_text");
                  obsDeath.setValueText("");
                }
                Context.getObsService().saveObs(obsDeath,null);
              }
 else {
                log.debug("Current cause is still null - aborting mission");
              }
            }
          }
        }
 else {
          log.debug("Cause of death is null - should not have gotten here without throwing an error on the form.");
        }
      }
    }
    if (!isError && !errors.hasErrors()) {
      Map<String,Relationship> relationships=getRelationshipsMap(patient,request);
      for (      Relationship relationship : relationships.values()) {
        if (relationship.getPersonA() != null && relationship.getPersonB() != null)         personService.saveRelationship(relationship);
      }
    }
    if (isError || errors.hasErrors()) {
      log.error("Had an error during processing. Redirecting to " + this.getFormView());
      Map<String,Object> model=new HashMap<String,Object>();
      model.put(getCommandName(),new ShortPatientModel(patient));
      Context.evictFromSession(patient);
      return this.showForm(request,response,errors,model);
    }
 else {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"Patient.saved");
      return new ModelAndView(new RedirectView(view + "?patientId=" + newPatient.getPatientId()));
    }
  }
 else {
    return new ModelAndView(new RedirectView(getFormView()));
  }
}
