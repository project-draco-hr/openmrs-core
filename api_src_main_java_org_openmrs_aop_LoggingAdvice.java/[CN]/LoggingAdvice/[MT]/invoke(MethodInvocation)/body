{
  Method method=invocation.getMethod();
  String name=method.getName();
  boolean isSetterTypeOfMethod=OpenmrsUtil.stringStartsWith(name,SETTER_METHOD_PREFIXES);
  boolean logGetter=!isSetterTypeOfMethod && log.isDebugEnabled();
  boolean logSetter=isSetterTypeOfMethod && log.isInfoEnabled();
  long startTime=System.currentTimeMillis();
  Logging loggingAnnotation=null;
  if (logGetter || logSetter) {
    loggingAnnotation=method.getAnnotation(Logging.class);
    if (loggingAnnotation != null && loggingAnnotation.ignore()) {
      logGetter=false;
      logSetter=false;
    }
  }
  if (logGetter || logSetter) {
    StringBuilder output=new StringBuilder();
    output.append("In method ").append(method.getDeclaringClass().getSimpleName()).append(".").append(name);
    if (loggingAnnotation == null || loggingAnnotation.ignoreAllArgumentValues() == false) {
      int x;
      Class<?>[] types=method.getParameterTypes();
      Object[] values=invocation.getArguments();
      List<Integer> argsToIgnore=new ArrayList<Integer>();
      if (loggingAnnotation != null && loggingAnnotation.ignoredArgumentIndexes().length > 0) {
        for (        int argIndexToIgnore : loggingAnnotation.ignoredArgumentIndexes())         argsToIgnore.add(argIndexToIgnore);
      }
      output.append(". Arguments: ");
      for (x=0; x < types.length; x++) {
        output.append(types[x].getSimpleName()).append("=");
        if (argsToIgnore.contains(x))         output.append("<Arg value ignored>");
 else         output.append(values[x]);
        output.append(", ");
      }
    }
    if (logGetter)     log.debug(output.toString());
 else     if (logSetter)     log.info(output.toString());
  }
  try {
    return invocation.proceed();
  }
 catch (  Exception e) {
    if (logGetter || logSetter) {
      String username;
      User user=Context.getAuthenticatedUser();
      if (user == null) {
        username="Guest (Not logged in)";
      }
 else {
        username=user.getUsername();
        if (username == null || username.length() == 0)         username=user.getSystemId();
      }
      log.error(String.format("An error occurred while executing this method.\nCurrent user: %s\nError message: %s",username,e.getMessage()),e);
    }
    throw e;
  }
 finally {
    if (logGetter || logSetter) {
      StringBuilder output=new StringBuilder();
      output.append("Exiting method ").append(name);
      if (log.isDebugEnabled())       output.append(". execution time: " + (System.currentTimeMillis() - startTime)).append(" ms");
      if (logGetter)       log.debug(output.toString());
 else       if (logSetter)       log.info(output.toString());
    }
  }
}
