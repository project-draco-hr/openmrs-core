{
  StartModule startModuleAnnotation=testContext.getTestClass().getAnnotation(StartModule.class);
  if (startModuleAnnotation != null) {
    if (!lastClassRun.equals(testContext.getTestClass().getSimpleName())) {
      lastClassRun=testContext.getTestClass().getSimpleName();
      if (!Context.isSessionOpen())       Context.openSession();
      ModuleUtil.shutdown();
      String modulesToLoad=StringUtils.join(startModuleAnnotation.value()," ");
      Properties props=BaseContextSensitiveTest.runtimeProperties;
      props.setProperty(ModuleConstants.RUNTIMEPROPERTY_MODULE_LIST_TO_LOAD,modulesToLoad);
      try {
        ModuleUtil.startup(props);
      }
 catch (      Exception e) {
        System.out.println("Error while starting modules: ");
        e.printStackTrace(System.out);
        throw e;
      }
      Assert.assertTrue("Some of the modules did not start successfully for " + testContext.getTestClass().getSimpleName() + ". Only "+ ModuleFactory.getStartedModules().size()+ " modules started instead of "+ startModuleAnnotation.value().length,startModuleAnnotation.value().length <= ModuleFactory.getStartedModules().size());
      GenericApplicationContext ctx=new GenericApplicationContext(testContext.getApplicationContext());
      XmlBeanDefinitionReader xmlReader=new XmlBeanDefinitionReader(ctx);
      Enumeration<URL> list=OpenmrsClassLoader.getInstance().getResources("moduleApplicationContext.xml");
      while (list.hasMoreElements()) {
        xmlReader.loadBeanDefinitions(new UrlResource(list.nextElement()));
      }
      boolean useSystemClassLoader=Context.isUseSystemClassLoader();
      Context.setUseSystemClassLoader(false);
      try {
        ctx.refresh();
      }
  finally {
        Context.setUseSystemClassLoader(useSystemClassLoader);
      }
    }
  }
}
