{
  log.debug("Entering formBackingObject()");
  List<PersonListItem> personList=new Vector<PersonListItem>();
  if (Context.isAuthenticated()) {
    PersonService ps=Context.getPersonService();
    Integer userId=Context.getAuthenticatedUser().getUserId();
    invalidAgeFormat=false;
    HashMap<String,String> person=getParametersFromRequest(request);
    String gender=person.get(GENDER);
    String name=person.get(NAME);
    String birthdate=person.get(BIRTHDATE);
    String age=person.get(AGE);
    log.debug("name: " + name + " birthdate: "+ birthdate+ " age: "+ age+ " gender: "+ gender);
    if (!name.equals("") || !birthdate.equals("") || !age.equals("")|| !gender.equals("")) {
      log.info(userId + "|" + name+ "|"+ birthdate+ "|"+ age+ "|"+ gender);
      Integer d=null;
      birthdate=birthdate.trim();
      age=age.trim();
      int birthyear=-1;
      try {
        if (birthdate.length() > 0) {
          Date birthdateFormatted=(Date)Context.getDateFormat().parse(birthdate);
          Calendar calender=Calendar.getInstance();
          calender.setTime(birthdateFormatted);
          birthyear=calender.get(Calendar.YEAR);
        }
      }
 catch (      ParseException e) {
        if (log.isDebugEnabled()) {
          log.debug("Parse exception occurred : " + e);
        }
        invalidAgeFormat=true;
      }
      if (birthyear != -1) {
        d=Integer.valueOf(birthyear);
      }
 else       if (age.length() > 0) {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        d=c.get(Calendar.YEAR);
        try {
          d=d - Integer.parseInt(age);
        }
 catch (        NumberFormatException e) {
          invalidAgeFormat=true;
        }
      }
      if (gender.length() < 1) {
        person.put("gender",null);
      }
      personList=new Vector<PersonListItem>();
      for (      Person p : ps.getSimilarPeople(name,d,gender)) {
        personList.add(PersonListItem.createBestMatch(p));
      }
    }
  }
  log.debug("Returning personList of size: " + personList.size() + " from formBackingObject");
  return personList;
}
