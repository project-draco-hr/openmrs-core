{
  String returnPage=request.getParameter("returnPage");
  if (returnPage == null) {
    throw new IllegalArgumentException("must specify a returnPage parameter in a call to enroll()");
  }
  String patientIdStr=request.getParameter("patientId");
  String programIdStr=request.getParameter("programId");
  String enrollmentDateStr=request.getParameter("dateEnrolled");
  String locationIdStr=request.getParameter("locationId");
  String completionDateStr=request.getParameter("dateCompleted");
  log.debug("enroll " + patientIdStr + " in "+ programIdStr+ " on "+ enrollmentDateStr);
  ProgramWorkflowService pws=Context.getProgramWorkflowService();
  CustomDateEditor cde=new CustomDateEditor(Context.getDateFormat(),true,10);
  cde.setAsText(enrollmentDateStr);
  Date enrollmentDate=(Date)cde.getValue();
  cde.setAsText(completionDateStr);
  Date completionDate=(Date)cde.getValue();
  Patient patient=Context.getPatientService().getPatient(Integer.valueOf(patientIdStr));
  Location location;
  try {
    location=Context.getLocationService().getLocation(Integer.valueOf(locationIdStr));
  }
 catch (  Exception e) {
    location=null;
  }
  Program program=pws.getProgram(Integer.valueOf(programIdStr));
  if (!pws.getPatientPrograms(patient,program,null,completionDate,enrollmentDate,null,false).isEmpty())   request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"Program.error.already");
 else {
    if (enrollmentDate == null) {
      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"Program.error.enrollmentDateRequired");
    }
 else {
      PatientProgram pp=new PatientProgram();
      pp.setPatient(patient);
      pp.setLocation(location);
      pp.setProgram(program);
      pp.setDateEnrolled(enrollmentDate);
      pp.setDateCompleted(completionDate);
      for (      ProgramWorkflow workflow : program.getAllWorkflows()) {
        String stateIdStr=request.getParameter("initialState." + workflow.getProgramWorkflowId());
        if (StringUtils.hasText(stateIdStr)) {
          Integer stateId=Integer.valueOf(stateIdStr);
          ProgramWorkflowState state=workflow.getState(stateId);
          log.debug("Transitioning to state: " + state);
          pp.transitionToState(state,enrollmentDate);
        }
      }
      try {
        ValidateUtil.validate(pp);
        Context.getProgramWorkflowService().savePatientProgram(pp);
      }
 catch (      APIException e) {
        request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,e.getMessage());
      }
    }
  }
  return new ModelAndView(new RedirectView(returnPage));
}
