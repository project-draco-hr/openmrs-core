{
  if (birthyear == null)   birthyear=0;
  Set<Person> people=new LinkedHashSet<Person>();
  name=name.replaceAll("  "," ");
  name=name.replace(", "," ");
  String[] names=name.split(" ");
  StringBuilder q=new StringBuilder("select p from Person p left join p.names as pname where p.personVoided = false and pname.voided = false and ");
  if (names.length == 1) {
    q.append("(").append(" soundex(pname.givenName) = soundex(:n1)").append(" or soundex(pname.middleName) = soundex(:n1)").append(" or soundex(pname.familyName) = soundex(:n1) ").append(" or soundex(pname.familyName2) = soundex(:n1) ").append(")");
  }
 else   if (names.length == 2) {
    q.append("(").append(" case").append("  when pname.givenName is null then 1").append("  when pname.givenName = '' then 1").append("  when soundex(pname.givenName) = soundex(:n1) then 4").append("  when soundex(pname.givenName) = soundex(:n2) then 3").append("  else 0 ").append(" end").append(" + ").append(" case").append("  when pname.middleName is null then 1").append("  when pname.middleName = '' then 1").append("  when soundex(pname.middleName) = soundex(:n1) then 3").append("  when soundex(pname.middleName) = soundex(:n2) then 4").append("  else 0 ").append(" end").append(" + ").append(" case").append("  when pname.familyName is null then 1").append("  when pname.familyName = '' then 1").append("  when soundex(pname.familyName) = soundex(:n1) then 3").append("  when soundex(pname.familyName) = soundex(:n2) then 4").append("  else 0 ").append(" end").append(" +").append(" case").append("  when pname.familyName2 is null then 1").append("  when pname.familyName2 = '' then 1").append("  when soundex(pname.familyName2) = soundex(:n1) then 3").append("  when soundex(pname.familyName2) = soundex(:n2) then 4").append("  else 0 ").append(" end").append(") > 6");
  }
 else   if (names.length == 3) {
    q.append("(").append(" case").append("  when pname.givenName is null then 0").append("  when soundex(pname.givenName) = soundex(:n1) then 3").append("  when soundex(pname.givenName) = soundex(:n2) then 2").append("  when soundex(pname.givenName) = soundex(:n3) then 1").append("  else 0 ").append(" end").append(" + ").append(" case").append("  when pname.middleName is null then 0").append("  when soundex(pname.middleName) = soundex(:n1) then 2").append("  when soundex(pname.middleName) = soundex(:n2) then 3").append("  when soundex(pname.middleName) = soundex(:n3) then 1").append("  else 0").append(" end").append(" + ").append(" case").append("  when pname.familyName is null then 0").append("  when soundex(pname.familyName) = soundex(:n1) then 1").append("  when soundex(pname.familyName) = soundex(:n2) then 2").append("  when soundex(pname.familyName) = soundex(:n3) then 3").append("  else 0").append(" end").append(" +").append(" case").append("  when pname.familyName2 is null then 0").append("  when soundex(pname.familyName2) = soundex(:n1) then 1").append("  when soundex(pname.familyName2) = soundex(:n2) then 2").append("  when soundex(pname.familyName2) = soundex(:n3) then 3").append("  else 0").append(" end").append(") >= 5");
  }
 else {
    q.append("(").append(" case").append("  when pname.givenName is null then 0");
    for (int i=0; i < names.length; i++) {
      q.append("  when soundex(pname.givenName) = soundex(:n").append(i + 1).append(") then 1");
    }
    q.append("  else 0").append(" end").append(")").append("+").append("(").append(" case").append("  when pname.middleName is null then 0");
    for (int i=0; i < names.length; i++) {
      q.append("  when soundex(pname.middleName) = soundex(:n").append(i + 1).append(") then 1");
    }
    q.append("  else 0").append(" end").append(")").append("+").append("(").append(" case").append("  when pname.familyName is null then 0");
    for (int i=0; i < names.length; i++) {
      q.append("  when soundex(pname.familyName) = soundex(:n").append(i + 1).append(") then 1");
    }
    q.append("  else 0").append(" end").append(")").append("+").append("(").append(" case").append("  when pname.familyName2 is null then 0");
    for (int i=0; i < names.length; i++) {
      q.append("  when soundex(pname.familyName2) = soundex(:n").append(i + 1).append(") then 1");
    }
    q.append("  else 0").append(" end").append(") >= ").append((int)(names.length * .75));
  }
  String birthdayMatch=" (year(p.birthdate) between " + (birthyear - 1) + " and "+ (birthyear + 1)+ " or p.birthdate is null) ";
  String genderMatch=" (p.gender = :gender or p.gender = '') ";
  if (birthyear != 0 && gender != null) {
    q.append(" and (" + birthdayMatch + "and "+ genderMatch+ ") ");
  }
 else   if (birthyear != 0) {
    q.append(" and " + birthdayMatch);
  }
 else   if (gender != null) {
    q.append(" and " + genderMatch);
  }
  q.append(" order by pname.givenName asc,").append(" pname.middleName asc,").append(" pname.familyName asc").append(" pname.familyName2 asc");
  String qStr=q.toString();
  Query query=sessionFactory.getCurrentSession().createQuery(qStr);
  for (int nameIndex=0; nameIndex < names.length; nameIndex++) {
    query.setString("n" + (nameIndex + 1),names[nameIndex]);
  }
  if (qStr.contains(":gender"))   query.setString("gender",gender);
  people.addAll(query.list());
  return people;
}
