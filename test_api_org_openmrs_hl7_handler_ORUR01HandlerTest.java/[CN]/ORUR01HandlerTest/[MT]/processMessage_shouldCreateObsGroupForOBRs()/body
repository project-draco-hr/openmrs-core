{
  ObsService obsService=Context.getObsService();
  String hl7string="MSH|^~\\&|FORMENTRY|AMRS.ELD|HL7LISTENER|AMRS.ELD|20080226103553||ORU^R01|OD9PWqcD9g0NKn81rvSD|P|2.5|1||||||||66^AMRS.ELD.FORMID\r" + "PID|||3^^^^||John^Doe^||\r" + "PV1||O|1^Unknown Location||||1^Super User (1-8)|||||||||||||||||||||||||||||||||||||20080205|||||||V\r"+ "ORC|RE||||||||20080226103428|1^Super User\r"+ "OBR|1|||1238^MEDICAL RECORD OBSERVATIONS^99DCT\r"+ "OBX|1|DT|1592^MISSED RETURNED VISIT DATE^99DCT||20080201|||||||||20080205\r"+ "OBR|2|||1726^FOLLOW-UP ACTION^99DCT\r"+ "OBX|1|CWE|1558^PATIENT CONTACT METHOD^99DCT|1|1555^PHONE^99DCT|||||||||20080205\r"+ "OBX|2|NM|1553^NUMBER OF ATTEMPTS^99DCT|1|1|||||||||20080205\r"+ "OBX|3|NM|1554^SUCCESSFUL^99DCT|1|1|||||||||20080205";
  Message hl7message=parser.parse(hl7string);
  router.processMessage(hl7message);
  Patient patient=new Patient(3);
  Context.clearSession();
  List<Obs> obsForPatient2=obsService.getObservationsByPerson(patient);
  assertNotNull(obsForPatient2);
  assertTrue("There should be some obs created for #3",obsForPatient2.size() > 0);
  Concept returnVisitDateConcept=new Concept(1592);
  Calendar cal=new GregorianCalendar();
  cal.set(2008,Calendar.FEBRUARY,1,0,0,0);
  Date returnVisitDate=cal.getTime();
  List<Obs> returnVisitDateObsForPatient2=obsService.getObservationsByPersonAndConcept(patient,returnVisitDateConcept);
  assertEquals("There should be a return visit date",1,returnVisitDateObsForPatient2.size());
  Obs firstObs=(Obs)returnVisitDateObsForPatient2.toArray()[0];
  cal.setTime(firstObs.getValueDatetime());
  cal.clear(Calendar.HOUR);
  cal.clear(Calendar.MINUTE);
  cal.clear(Calendar.SECOND);
  cal.clear(Calendar.MILLISECOND);
  assertEquals("The date should be the 1st",returnVisitDate.toString(),cal.getTime().toString());
  Concept contactMethod=new Concept(1558);
  Concept phoneContact=Context.getConceptService().getConcept(1555);
  List<Obs> contactMethodObsForPatient2=obsService.getObservationsByPersonAndConcept(patient,contactMethod);
  assertEquals("There should be a contact method",1,contactMethodObsForPatient2.size());
  Obs firstContactMethodObs=(Obs)contactMethodObsForPatient2.toArray()[0];
  assertEquals("The contact method should be phone",phoneContact,firstContactMethodObs.getValueCoded());
  Obs obsGroup=firstContactMethodObs.getObsGroup();
  assertNotNull("Their should be a grouping obs",obsGroup);
  assertNotNull("Their should be an associated encounter",firstContactMethodObs.getEncounter());
  List<Integer> groupedConceptIds=new Vector<Integer>();
  groupedConceptIds.add(1558);
  groupedConceptIds.add(1553);
  groupedConceptIds.add(1554);
  assertEquals(5,obsForPatient2.size());
  int groupedObsCount=0;
  for (  Obs obs : obsForPatient2) {
    if (groupedConceptIds.contains(obs.getConcept().getConceptId())) {
      groupedObsCount+=1;
      assertEquals("All of the parent groups should match",obsGroup,obs.getObsGroup());
    }
  }
  assertEquals(3,groupedObsCount);
}
