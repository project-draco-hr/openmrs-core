{
  Collection<MimeType> mimeTypes=new HashSet<MimeType>();
  MimeType m1=new MimeType();
  MimeType m2=new MimeType();
  m1.setMimeType("test1");
  m2.setMimeType("test2");
  mimeTypes.add(m1);
  mimeTypes.add(m2);
  assertTrue("Both types should have been added",mimeTypes.size() == 2);
  assertTrue("The first mimetype should be in the list",mimeTypes.contains(m1));
  MimeType mimeType=new MimeType();
  mimeType.setMimeType("testing");
  mimeType.setDescription("desc");
  as.createMimeType(mimeType);
  MimeType newMimeType=obsService.getMimeType(mimeType.getMimeTypeId());
  assertNotNull(newMimeType);
  mimeTypes=obsService.getMimeTypes();
  assertNotNull(mimeTypes);
  boolean found=false;
  for (Iterator<MimeType> i=mimeTypes.iterator(); i.hasNext(); ) {
    MimeType mimeType2=i.next();
    assertNotNull(mimeType);
    assertTrue(mimeType.equals(mimeType2) == (mimeType.getMimeTypeId().equals(mimeType2.getMimeTypeId())));
    if (mimeType.equals(mimeType2))     found=true;
  }
  assertTrue(found);
  newMimeType.setMimeType("another test");
  as.updateMimeType(newMimeType);
  MimeType newerMimeType=obsService.getMimeType(newMimeType.getMimeTypeId());
  assertTrue(newerMimeType.getMimeType().equals(newMimeType.getMimeType()));
  as.deleteMimeType(newerMimeType);
  assertNull(obsService.getMimeType(newMimeType.getMimeTypeId()));
}
