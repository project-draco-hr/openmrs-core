{
  Map<String,Object> resultsMap=new HashMap<String,Object>();
  List<Object> objectList=new ArrayList<Object>();
  List<Locale> searchLocales=Context.getAdministrationService().getSearchLocales();
  if (log.isDebugEnabled()) {
    StringBuffer searchLocalesString=new StringBuffer();
    for (    Locale loc : searchLocales) {
      searchLocalesString.append(loc.toString() + " ");
    }
    log.debug("searching locales: " + searchLocalesString);
  }
  if (includeClassNames == null) {
    includeClassNames=new ArrayList<String>();
  }
  if (excludeClassNames == null) {
    excludeClassNames=new ArrayList<String>();
  }
  if (includeDatatypeNames == null) {
    includeDatatypeNames=new ArrayList<String>();
  }
  if (excludeDatatypeNames == null) {
    excludeDatatypeNames=new ArrayList<String>();
  }
  try {
    ConceptService cs=Context.getConceptService();
    if (!StringUtils.isBlank(phrase)) {
      List<ConceptClass> includeClasses=new ArrayList<ConceptClass>();
      for (      String name : includeClassNames) {
        if (!"".equals(name)) {
          includeClasses.add(cs.getConceptClassByName(name));
        }
      }
      List<ConceptClass> excludeClasses=new ArrayList<ConceptClass>();
      for (      String name : excludeClassNames) {
        if (!"".equals(name)) {
          excludeClasses.add(cs.getConceptClassByName(name));
        }
      }
      List<ConceptDatatype> includeDatatypes=new ArrayList<ConceptDatatype>();
      for (      String name : includeDatatypeNames) {
        if (!"".equals(name)) {
          includeDatatypes.add(cs.getConceptDatatypeByName(name));
        }
      }
      List<ConceptDatatype> excludeDatatypes=new ArrayList<ConceptDatatype>();
      for (      String name : excludeDatatypeNames) {
        if (!"".equals(name)) {
          excludeDatatypes.add(cs.getConceptDatatypeByName(name));
        }
      }
      int matchCount=0;
      if (getMatchCount) {
        matchCount+=cs.getCountOfConcepts(phrase,searchLocales,includeRetired,includeClasses,excludeClasses,includeDatatypes,excludeDatatypes,null);
        if (phrase.matches("\\d+")) {
          Concept c=cs.getConcept(Integer.valueOf(phrase));
          if (c != null && (!c.isRetired() || includeRetired)) {
            matchCount++;
          }
        }
      }
      if (matchCount > 0 || !getMatchCount) {
        objectList.addAll(findBatchOfConcepts(phrase,includeRetired,includeClassNames,excludeClassNames,includeDatatypeNames,excludeDatatypeNames,start,length));
      }
      resultsMap.put("count",matchCount);
      resultsMap.put("objectList",objectList);
    }
 else {
      resultsMap.put("count",0);
      objectList.add(Context.getMessageSourceService().getMessage("searchWidget.noMatchesFound"));
    }
  }
 catch (  Exception e) {
    log.error("Error while searching for concepts",e);
    objectList.clear();
    objectList.add(Context.getMessageSourceService().getMessage("Concept.search.error") + " - " + e.getMessage());
    resultsMap.put("count",0);
    resultsMap.put("objectList",objectList);
  }
  return resultsMap;
}
