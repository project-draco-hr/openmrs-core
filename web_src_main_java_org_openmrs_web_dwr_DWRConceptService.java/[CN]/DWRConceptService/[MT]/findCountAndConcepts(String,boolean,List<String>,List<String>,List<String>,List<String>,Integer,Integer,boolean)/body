{
  Map<String,Object> resultsMap=new HashMap<String,Object>();
  Vector<Object> objectList=new Vector<Object>();
  User currentUser=Context.getAuthenticatedUser();
  Locale defaultLocale=Context.getLocale();
  List<Locale> localesToSearchOn=null;
  if (currentUser != null)   localesToSearchOn=currentUser.getProficientLocales();
  if (localesToSearchOn == null)   localesToSearchOn=new Vector<Locale>();
  if (localesToSearchOn.size() == 0) {
    localesToSearchOn.add(defaultLocale);
    if (!"".equals(defaultLocale.getCountry())) {
      localesToSearchOn.add(new Locale(defaultLocale.getLanguage()));
    }
  }
  if (log.isDebugEnabled()) {
    StringBuffer searchLocalesString=new StringBuffer();
    for (    Locale loc : localesToSearchOn) {
      searchLocalesString.append(loc.toString() + " ");
    }
    log.debug("searching locales: " + searchLocalesString);
  }
  if (includeClassNames == null)   includeClassNames=new Vector<String>();
  if (excludeClassNames == null)   excludeClassNames=new Vector<String>();
  if (includeDatatypeNames == null)   includeDatatypeNames=new Vector<String>();
  if (excludeDatatypeNames == null)   excludeDatatypeNames=new Vector<String>();
  try {
    ConceptService cs=Context.getConceptService();
    List<ConceptClass> includeClasses=new Vector<ConceptClass>();
    for (    String name : includeClassNames)     if (!"".equals(name))     includeClasses.add(cs.getConceptClassByName(name));
    List<ConceptClass> excludeClasses=new Vector<ConceptClass>();
    for (    String name : excludeClassNames)     if (!"".equals(name))     excludeClasses.add(cs.getConceptClassByName(name));
    List<ConceptDatatype> includeDatatypes=new Vector<ConceptDatatype>();
    for (    String name : includeDatatypeNames)     if (!"".equals(name))     includeDatatypes.add(cs.getConceptDatatypeByName(name));
    List<ConceptDatatype> excludeDatatypes=new Vector<ConceptDatatype>();
    for (    String name : excludeDatatypeNames)     if (!"".equals(name))     excludeDatatypes.add(cs.getConceptDatatypeByName(name));
    int matchCount=0;
    if (getMatchCount) {
      matchCount+=cs.getCountOfConcepts(phrase,localesToSearchOn,includeRetired,includeClasses,excludeClasses,includeDatatypes,excludeDatatypes,null);
      if (phrase.matches("\\d+")) {
        Concept c=cs.getConcept(Integer.valueOf(phrase));
        if (c != null && (!c.isRetired() || includeRetired))         matchCount++;
      }
      if (matchCount > 0 || !getMatchCount) {
        objectList.addAll(findBatchOfConcepts(phrase,includeRetired,includeClassNames,excludeClassNames,includeDatatypeNames,excludeDatatypeNames,start,length));
      }
      resultsMap.put("count",matchCount);
      resultsMap.put("objectList",objectList);
    }
 else {
      resultsMap.put("count",0);
      objectList.add(Context.getMessageSourceService().getMessage("searchWidget.noMatchesFound"));
    }
  }
 catch (  Exception e) {
    log.error("Error while searching for concepts",e);
    objectList.clear();
    objectList.add(Context.getMessageSourceService().getMessage("Concept.search.error") + " - " + e.getMessage());
    resultsMap.put("count",0);
    resultsMap.put("objectList",objectList);
  }
  return resultsMap;
}
