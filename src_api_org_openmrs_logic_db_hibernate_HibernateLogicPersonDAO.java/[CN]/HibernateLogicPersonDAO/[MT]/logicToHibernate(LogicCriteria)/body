{
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Person.class);
  String attr="";
  boolean notOperator=false;
  boolean asOf=false;
  Date indexDate=Calendar.getInstance().getTime();
  while (logicCriteria != null) {
    if (logicCriteria.getOperator() == null && logicCriteria.getRightOperand() instanceof String) {
      String token=(String)logicCriteria.getRightOperand();
      if (token.equalsIgnoreCase("GENDER"))       attr="gender";
 else       if (token.equalsIgnoreCase("BIRTHDATE"))       attr="birthdate";
 else       if (token.equalsIgnoreCase("BIRTHDATE ESTIMATED"))       attr="birthdateEstimated";
 else       if (token.equalsIgnoreCase("DEAD"))       attr="dead";
 else       if (token.equalsIgnoreCase("DEATH DATE"))       attr="deathDate";
 else       if (token.equalsIgnoreCase("CAUSE OF DEATH"))       attr="causeOfDeath";
 else {
        log.error("Illegal or unsupported token:" + token);
        break;
      }
    }
 else     if (logicCriteria.getOperator() == Operator.AFTER || logicCriteria.getOperator() == Operator.GT) {
      Criterion c=Restrictions.gt(attr,logicCriteria.getRightOperand());
      if (notOperator)       c=Restrictions.not(c);
      criteria.add(c);
    }
 else     if (logicCriteria.getOperator() == Operator.GTE) {
      Criterion c=Restrictions.ge(attr,logicCriteria.getRightOperand());
      if (notOperator)       c=Restrictions.not(c);
      criteria.add(c);
    }
 else     if (logicCriteria.getOperator() == Operator.AND) {
    }
 else     if (logicCriteria.getOperator() == Operator.BEFORE || logicCriteria.getOperator() == Operator.LT) {
      Criterion c=Restrictions.lt(attr,logicCriteria.getRightOperand());
      if (notOperator)       c=Restrictions.not(c);
      criteria.add(c);
    }
 else     if (logicCriteria.getOperator() == Operator.LTE) {
      Criterion c=Restrictions.le(attr,logicCriteria.getRightOperand());
      if (notOperator)       c=Restrictions.not(c);
      criteria.add(c);
    }
 else     if (logicCriteria.getOperator() == Operator.CONTAINS || logicCriteria.getOperator() == Operator.EQUALS) {
      Criterion c=Restrictions.eq(attr,logicCriteria.getRightOperand());
      if (notOperator)       c=Restrictions.not(c);
      criteria.add(c);
    }
 else     if (logicCriteria.getOperator() == Operator.EXISTS) {
    }
 else     if (logicCriteria.getOperator() == Operator.FIRST) {
      criteria.addOrder(Order.asc(attr)).setMaxResults(1);
    }
 else     if (logicCriteria.getOperator() == Operator.LAST) {
      criteria.addOrder(Order.desc(attr)).setMaxResults(1);
    }
 else     if (logicCriteria.getOperator() == Operator.NOT) {
      notOperator=!notOperator;
    }
 else     if (logicCriteria.getOperator() == Operator.OR) {
    }
 else     if (logicCriteria.getOperator() == Operator.ASOF && logicCriteria.getRightOperand() instanceof Date) {
      indexDate=(Date)logicCriteria.getRightOperand();
      asOf=true;
    }
 else     if (logicCriteria.getOperator() == Operator.WITHIN && logicCriteria.getRightOperand() instanceof Duration) {
      Duration duration=(Duration)logicCriteria.getRightOperand();
      Calendar within=Calendar.getInstance();
      within.setTime(indexDate);
      if (duration.getUnits() == Duration.Units.YEARS) {
        within.roll(Calendar.YEAR,-duration.getDuration().intValue());
      }
 else       if (duration.getUnits() == Duration.Units.MONTHS) {
        within.roll(Calendar.MONTH,-duration.getDuration().intValue());
      }
 else       if (duration.getUnits() == Duration.Units.WEEKS) {
        within.roll(Calendar.WEEK_OF_YEAR,-duration.getDuration().intValue());
      }
 else       if (duration.getUnits() == Duration.Units.DAYS) {
        within.roll(Calendar.DAY_OF_YEAR,-duration.getDuration().intValue());
      }
 else       if (duration.getUnits() == Duration.Units.MINUTES) {
        within.roll(Calendar.MINUTE,-duration.getDuration().intValue());
      }
 else       if (duration.getUnits() == Duration.Units.SECONDS) {
        within.roll(Calendar.SECOND,-duration.getDuration().intValue());
      }
      if (attr.equals("deathDate"))       criteria.add(Restrictions.ge(attr,within.getTime()));
 else       criteria.add(Restrictions.ge("birthdate",within.getTime()));
    }
    if (logicCriteria.getLeftOperand() instanceof LogicCriteria)     logicCriteria=(LogicCriteria)logicCriteria.getLeftOperand();
 else     logicCriteria=null;
  }
  if (asOf) {
    if (attr.equals("deathdate"))     criteria.add(Restrictions.le(attr,indexDate));
 else     criteria.add(Restrictions.le("birthdate",indexDate));
  }
  return criteria;
}
