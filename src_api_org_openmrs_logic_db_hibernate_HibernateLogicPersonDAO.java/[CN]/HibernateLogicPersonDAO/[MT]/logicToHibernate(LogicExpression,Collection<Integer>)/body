{
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Person.class);
  Date indexDate=Calendar.getInstance().getTime();
  Operator transformOperator=null;
  LogicTransform transform=expression.getTransform();
  Integer numResults=null;
  if (transform != null) {
    transformOperator=transform.getTransformOperator();
    numResults=transform.getNumResults();
  }
  if (numResults == null) {
    numResults=1;
  }
  if (transformOperator == Operator.DISTINCT) {
    criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
  }
  Criterion c=this.getCriterion(expression,indexDate);
  if (c != null) {
    criteria.add(c);
  }
  List<Person> results=new ArrayList<Person>();
  criteria.add(Restrictions.in("personId",personIds));
  results.addAll(criteria.list());
  if (transformOperator == Operator.FIRST || transformOperator == Operator.LAST) {
    HashMap<Integer,ArrayList<Person>> nResultMap=new HashMap<Integer,ArrayList<Person>>();
    for (    Person currResult : results) {
      Integer currPersonId=currResult.getPersonId();
      ArrayList<Person> prevResults=nResultMap.get(currPersonId);
      if (prevResults == null) {
        prevResults=new ArrayList<Person>();
        nResultMap.put(currPersonId,prevResults);
      }
      if (prevResults.size() < numResults) {
        prevResults.add(currResult);
      }
    }
    if (nResultMap.values().size() > 0) {
      results.clear();
      for (      ArrayList<Person> currPatientPerson : nResultMap.values()) {
        results.addAll(currPatientPerson);
      }
    }
  }
  return results;
}
