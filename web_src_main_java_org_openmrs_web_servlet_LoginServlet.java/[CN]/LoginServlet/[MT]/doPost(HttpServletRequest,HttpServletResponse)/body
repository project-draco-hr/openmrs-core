{
  HttpSession httpSession=request.getSession();
  String ipAddress=request.getRemoteAddr();
  Integer loginAttempts=loginAttemptsByIP.get(ipAddress);
  if (loginAttempts == null) {
    loginAttempts=1;
  }
  loginAttempts++;
  boolean lockedOut=false;
  Integer allowedLockoutAttempts=100;
  String allowedLockoutAttemptsGP=Context.getAdministrationService().getGlobalProperty(GP_ALLOWED_LOGIN_ATTEMPTS_PER_IP,"100");
  try {
    allowedLockoutAttempts=Integer.valueOf(allowedLockoutAttemptsGP.trim());
  }
 catch (  NumberFormatException nfe) {
    log.error("Unable to format '" + allowedLockoutAttemptsGP + "' from global property "+ GP_ALLOWED_LOGIN_ATTEMPTS_PER_IP+ " as an integer");
  }
  if (allowedLockoutAttempts > 0 && loginAttempts > allowedLockoutAttempts) {
    lockedOut=true;
    Date lockedOutTime=lockoutDateByIP.get(ipAddress);
    if (lockedOutTime != null && System.currentTimeMillis() - lockedOutTime.getTime() > 300000) {
      lockedOut=false;
      loginAttempts=0;
      lockoutDateByIP.put(ipAddress,null);
    }
 else {
      lockoutDateByIP.put(ipAddress,new Date());
    }
  }
  String redirect=determineRedirect(request);
  if (lockedOut) {
    httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.login.tooManyAttempts");
  }
 else {
    try {
      String username=request.getParameter("uname");
      String password=request.getParameter("pw");
      if (username == null || username.length() == 0) {
        throw new ContextAuthenticationException("Unable to authenticate with an empty username");
      }
      Context.authenticate(username,password);
      if (Context.isAuthenticated()) {
        httpSession.setAttribute("loginAttempts",0);
        User user=Context.getAuthenticatedUser();
        if (user.getUserProperties() != null) {
          if (user.getUserProperties().containsKey(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE)) {
            String localeString=user.getUserProperty(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE);
            Locale locale=WebUtil.normalizeLocale(localeString);
            if (locale != null) {
              OpenmrsCookieLocaleResolver oclr=new OpenmrsCookieLocaleResolver();
              oclr.setLocale(request,response,locale);
            }
          }
        }
        if (new UserProperties(user.getUserProperties()).isSupposedToChangePassword()) {
          httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"User.password.change");
          redirect=request.getContextPath() + "/changePassword.form";
        }
        if (Context.getLocale() == null) {
          Context.setLocale(LocaleUtility.getDefaultLocale());
        }
        CurrentUsers.addUser(httpSession,user);
        if (log.isDebugEnabled()) {
          log.debug("Redirecting after login to: " + redirect);
          log.debug("Locale address: " + request.getLocalAddr());
        }
        response.sendRedirect(redirect);
        httpSession.setAttribute(WebConstants.OPENMRS_CLIENT_IP_HTTPSESSION_ATTR,request.getLocalAddr());
        httpSession.removeAttribute(WebConstants.OPENMRS_LOGIN_REDIRECT_HTTPSESSION_ATTR);
        loginAttemptsByIP.remove(ipAddress);
        return;
      }
    }
 catch (    ContextAuthenticationException e) {
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.password.invalid");
    }
  }
  loginAttemptsByIP.put(ipAddress,loginAttempts);
  httpSession.setAttribute(WebConstants.OPENMRS_LOGIN_REDIRECT_HTTPSESSION_ATTR,redirect);
  response.sendRedirect(request.getContextPath() + "/login.htm");
}
