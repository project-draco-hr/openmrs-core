{
  HttpSession httpSession=request.getSession();
  Context context=(Context)httpSession.getAttribute(WebConstants.OPENMRS_CONTEXT_HTTPSESSION_ATTR);
  Patient patient=(Patient)object;
  if (context != null && context.isAuthenticated()) {
    FormEntryService ps=context.getFormEntryService();
    Object[] objs=null;
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String action=request.getParameter("action");
    if (!action.equals(msa.getMessage("Patient.delete"))) {
      objs=patient.getIdentifiers().toArray();
      for (int i=0; i < objs.length; i++) {
        if (request.getParameter("identifiers[" + i + "].identifier") == null)         patient.removeIdentifier((PatientIdentifier)objs[i]);
      }
      String[] ids=request.getParameterValues("identifier");
      String[] idTypes=request.getParameterValues("identifierType");
      String[] locs=request.getParameterValues("location");
      if (ids != null) {
        for (int i=0; i < ids.length; i++) {
          String id=ids[i].trim();
          if (!id.equals("") && !idTypes.equals("")) {
            PatientIdentifier pi=new PatientIdentifier();
            pi.setIdentifier(id);
            pi.setIdentifierType(ps.getPatientIdentifierType(Integer.valueOf(idTypes[i])));
            pi.setLocation(ps.getLocation(Integer.valueOf(locs[i])));
            patient.addIdentifier(pi);
          }
        }
      }
      String[] add1s=RequestUtils.getStringParameters(request,"address1");
      String[] add2s=RequestUtils.getStringParameters(request,"address2");
      String[] cities=RequestUtils.getStringParameters(request,"cityVillage");
      String[] states=RequestUtils.getStringParameters(request,"stateProvince");
      String[] countries=RequestUtils.getStringParameters(request,"country");
      String[] lats=RequestUtils.getStringParameters(request,"latitude");
      String[] longs=RequestUtils.getStringParameters(request,"longitude");
      if (add1s != null) {
        for (int i=0; i < add1s.length; i++) {
          if (add1s[i] != "") {
            PatientAddress pa=new PatientAddress();
            if (add1s.length >= i + 1)             pa.setAddress1(add1s[i]);
            if (add2s.length >= i + 1)             pa.setAddress2(add2s[i]);
            if (cities.length >= i + 1)             pa.setCityVillage(cities[i]);
            if (states.length >= i + 1)             pa.setStateProvince(states[i]);
            if (countries.length >= i + 1)             pa.setCountry(countries[i]);
            if (lats.length >= i + 1)             pa.setLatitude(lats[i]);
            if (longs.length >= i + 1)             pa.setLongitude(longs[i]);
            patient.addAddress(pa);
          }
        }
      }
      objs=patient.getNames().toArray();
      for (int i=0; i < objs.length; i++) {
        if (request.getParameter("names[" + i + "].givenName") == null)         patient.removeName((PatientName)objs[i]);
      }
      String[] gNames=RequestUtils.getStringParameters(request,"givenName");
      String[] mNames=RequestUtils.getStringParameters(request,"middleName");
      String[] fNamePrefixes=RequestUtils.getStringParameters(request,"familyNamePrefix");
      String[] fNames=RequestUtils.getStringParameters(request,"familyName");
      String[] fName2s=RequestUtils.getStringParameters(request,"familyName2");
      String[] fNameSuffixes=RequestUtils.getStringParameters(request,"familyNameSuffix");
      String[] degrees=RequestUtils.getStringParameters(request,"degree");
      if (gNames != null) {
        for (int i=0; i < gNames.length; i++) {
          if (gNames[i] != "") {
            PatientName pn=new PatientName();
            pn.setPreferred(false);
            if (gNames.length >= i + 1)             pn.setGivenName(gNames[i]);
            if (mNames.length >= i + 1)             pn.setMiddleName(mNames[i]);
            if (fNamePrefixes.length >= i + 1)             pn.setFamilyNamePrefix(fNamePrefixes[i]);
            if (fNames.length >= i + 1)             pn.setFamilyName(fNames[i]);
            if (fName2s.length >= i + 1)             pn.setFamilyName2(fName2s[i]);
            if (fNameSuffixes.length >= i + 1)             pn.setFamilyNameSuffix(fNameSuffixes[i]);
            if (degrees.length >= i + 1)             pn.setDegree(degrees[i]);
            patient.addName(pn);
          }
        }
      }
      if (patient.getNames().size() < 1)       errors.rejectValue("patient.names","Patient.names.length");
      if (patient.isVoided())       ValidationUtils.rejectIfEmptyOrWhitespace(errors,"voidReason","error.null");
      if (patient.isDead() && (patient.getCauseOfDeath() == null || patient.getCauseOfDeath().equals("")))       errors.rejectValue("causeOfDeath","Patient.dead.causeOfDeathNull");
    }
  }
  return super.processFormSubmission(request,response,patient,errors);
}
