{
  log.debug("setting conceptSets with text: " + text);
  if (StringUtils.hasText(text)) {
    ConceptService cs=Context.getConceptService();
    String[] conceptIds=text.split(" ");
    List<Integer> requestConceptIds=new Vector<Integer>();
    for (    String id : conceptIds) {
      id=id.trim();
      if (!id.equals("") && !requestConceptIds.contains(Integer.valueOf(id)))       requestConceptIds.add(Integer.valueOf(id));
    }
    List<Integer> originalConceptSetIds=new ArrayList<Integer>(originalConceptSets.size());
    Collection<ConceptSet> copyOfOriginalConceptSets=new ArrayList<ConceptSet>(originalConceptSets);
    for (    ConceptSet origConceptSet : copyOfOriginalConceptSets) {
      if (!requestConceptIds.contains(origConceptSet.getConcept().getConceptId()))       originalConceptSets.remove(origConceptSet);
      originalConceptSetIds.add(origConceptSet.getConcept().getConceptId());
    }
    for (int x=0; x < requestConceptIds.size(); x++) {
      Integer requestConceptId=requestConceptIds.get(x);
      if (!originalConceptSetIds.contains(requestConceptId)) {
        originalConceptSets.add(new ConceptSet(cs.getConcept(requestConceptId),new Double(x)));
      }
 else {
        for (        ConceptSet conceptSet : originalConceptSets) {
          if (conceptSet.getConcept().getConceptId().equals(requestConceptId)) {
            conceptSet.setSortWeight(new Double(x));
          }
        }
      }
    }
  }
 else {
    originalConceptSets.clear();
  }
  setValue(originalConceptSets);
}
