{
  Patient patient=Context.getPatientService().getPatient(7);
  Assert.assertFalse(patient.isVoided());
  List<Encounter> encounters=Context.getEncounterService().getEncountersByPatient(patient);
  List<Obs> observations=Context.getObsService().getObservationsByPerson(patient);
  List<Order> orders=Context.getOrderService().getAllOrdersByPatient(patient);
  Assert.assertTrue(CollectionUtils.isNotEmpty(encounters));
  Assert.assertTrue(CollectionUtils.isNotEmpty(observations));
  Assert.assertTrue(CollectionUtils.isNotEmpty(orders));
  for (  Encounter encounter : encounters) {
    Assert.assertNull(encounter.getDateVoided());
    Assert.assertNull(encounter.getVoidedBy());
    Assert.assertNull(encounter.getVoidReason());
  }
  for (  Obs obs : observations) {
    Assert.assertNull(obs.getDateVoided());
    Assert.assertNull(obs.getVoidedBy());
    Assert.assertNull(obs.getVoidReason());
  }
  for (  Order order : orders) {
    Assert.assertNull(order.getDateVoided());
    Assert.assertNull(order.getVoidedBy());
    Assert.assertNull(order.getVoidReason());
  }
  new PatientDataVoidHandler().handle(patient,new User(1),new Date(),"voidReason");
  for (  Encounter encounter : encounters) {
    Assert.assertTrue(encounter.isVoided());
    Assert.assertNotNull(encounter.getDateVoided());
    Assert.assertNotNull(encounter.getVoidedBy());
    Assert.assertNotNull(encounter.getVoidReason());
  }
  for (  Obs obs : observations) {
    Assert.assertTrue(obs.isVoided());
    Assert.assertNotNull(obs.getDateVoided());
    Assert.assertNotNull(obs.getVoidedBy());
    Assert.assertNotNull(obs.getVoidReason());
  }
  for (  Order order : orders) {
    Assert.assertTrue(order.isVoided());
    Assert.assertNotNull(order.getDateVoided());
    Assert.assertNotNull(order.getVoidedBy());
    Assert.assertNotNull(order.getVoidReason());
  }
  encounters=Context.getEncounterService().getEncountersByPatient(patient);
  observations=Context.getObsService().getObservationsByPerson(patient);
  Assert.assertTrue(CollectionUtils.isEmpty(encounters));
  Assert.assertTrue(CollectionUtils.isEmpty(observations));
}
