{
  Set<String> propsToIgnore=new HashSet<String>();
  if (ignoreList != null) {
    for (    String s : ignoreList.split(",")) {
      s=s.trim();
      if (s.length() != 0) {
        propsToIgnore.add(propertyPrefix + s);
      }
    }
  }
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  HttpServletResponse response=(HttpServletResponse)pageContext.getResponse();
  for (  GlobalProperty prop : Context.getAdministrationService().getGlobalPropertiesByPrefix(propertyPrefix)) {
    if (prop != null && StringUtils.isBlank(prop.getPropertyValue()) && !propsToIgnore.contains(prop.getProperty())) {
      pageContext.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.configurationRequired");
      try {
        log.info("Configuration not complete, missing property (" + prop.getProperty() + ").  Redirecting to page: "+ request.getContextPath()+ configurationPage);
        response.sendRedirect(request.getContextPath() + configurationPage);
        return SKIP_PAGE;
      }
 catch (      IllegalStateException ise) {
        log.warn("Unable to forward request.  It is likely that a response was already committed. ",ise);
      }
catch (      IOException e) {
        log.error("An error occurred in tag",e);
        throw new JspException(e);
      }
    }
  }
  return SKIP_BODY;
}
