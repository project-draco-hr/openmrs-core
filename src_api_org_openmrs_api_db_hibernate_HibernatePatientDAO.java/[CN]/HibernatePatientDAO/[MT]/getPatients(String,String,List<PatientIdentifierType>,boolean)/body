{
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Patient.class);
  criteria.createAlias("names","name");
  criteria.addOrder(Order.asc("name.givenName"));
  criteria.addOrder(Order.asc("name.middleName"));
  criteria.addOrder(Order.asc("name.familyName"));
  criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY);
  if (name != null) {
    name=name.replaceAll("  "," ");
    name=name.replace(", "," ");
    String[] names=name.split(" ");
    String nameSoFar=names[0];
    for (int i=0; i < names.length; i++) {
      String n=names[i];
      if (n != null && n.length() > 0) {
        LogicalExpression oneNameSearch=getNameSearch(n);
        LogicalExpression searchExpression=oneNameSearch;
        if (i > 0) {
          nameSoFar+=" " + n;
          LogicalExpression fullNameSearch=getNameSearch(nameSoFar);
          searchExpression=Expression.or(oneNameSearch,fullNameSearch);
        }
        criteria.add(searchExpression);
      }
    }
  }
  if (identifier != null || identifierTypes.size() > 0) {
    criteria.createAlias("identifiers","ids");
    criteria.add(Expression.eq("ids.voided",false));
    if (identifier != null) {
      if (matchIdentifierExactly) {
        criteria.add(Expression.eq("ids.identifier",identifier));
      }
 else {
        AdministrationService adminService=Context.getAdministrationService();
        String regex=adminService.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_IDENTIFIER_REGEX,"");
        String patternSearch=adminService.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SEARCH_PATTERN,"");
        if (Pattern.matches("^\\^.{1}\\*.*$",regex)) {
          String padding=regex.substring(regex.indexOf("^") + 1,regex.indexOf("*"));
          Pattern pattern=Pattern.compile("^" + padding + "+");
          identifier=pattern.matcher(identifier).replaceFirst("");
        }
        if (StringUtils.hasLength(patternSearch)) {
          List<String> searchPatterns=new ArrayList<String>();
          for (          String pattern : patternSearch.split(","))           searchPatterns.add(replaceSearchString(pattern,identifier));
          criteria.add(Expression.in("ids.identifier",searchPatterns));
        }
 else         if (regex.equals("") || HibernateUtil.isHSQLDialect(sessionFactory)) {
          String prefix=adminService.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_IDENTIFIER_PREFIX,"");
          String suffix=adminService.getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PATIENT_IDENTIFIER_SUFFIX,"");
          StringBuffer likeString=new StringBuffer(prefix).append(identifier).append(suffix);
          criteria.add(Expression.like("ids.identifier",likeString.toString()));
        }
 else {
          regex=replaceSearchString(regex,identifier);
          criteria.add(Restrictions.sqlRestriction("identifier regexp ?",regex,Hibernate.STRING));
        }
      }
    }
    if (identifierTypes.size() > 0) {
      criteria.add(Expression.in("ids.identifierType",identifierTypes));
    }
  }
  criteria.add(Expression.eq("voided",false));
  criteria.setFirstResult(0);
  criteria.setMaxResults(HibernatePersonDAO.getMaximumSearchResults());
  return criteria.list();
}
