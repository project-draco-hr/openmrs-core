{
  String obsId=request.getParameter("obsId");
  String view=request.getParameter("view");
  String download=request.getParameter("download");
  HttpSession session=request.getSession();
  if (obsId == null || obsId.length() == 0) {
    session.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"error.null");
    return;
  }
  if (!Context.hasPrivilege(PrivilegeConstants.VIEW_OBS)) {
    session.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"Privilege required: " + PrivilegeConstants.VIEW_OBS);
    session.setAttribute(WebConstants.OPENMRS_LOGIN_REDIRECT_HTTPSESSION_ATTR,request.getRequestURI() + "?" + request.getQueryString());
    response.sendRedirect(request.getContextPath() + "/login.htm");
    return;
  }
  Obs complexObs=Context.getObsService().getComplexObs(Integer.valueOf(obsId),view);
  ComplexData cd=complexObs.getComplexData();
  Object data=cd.getData();
  if (null != download) {
    response.setHeader("Content-Disposition","attachment; filename=" + cd.getTitle());
    response.setHeader("Pragma","no-cache");
  }
  String mimeType=cd.getMimeType();
  if (null != mimeType) {
    response.setHeader("Content-Type",mimeType);
  }
  Long length=cd.getLength();
  if (length != null) {
    response.setHeader("Content-Length",String.valueOf(length));
    response.setHeader("Accept-Ranges","bytes");
  }
  if (data instanceof byte[]) {
    ByteArrayInputStream stream=new ByteArrayInputStream((byte[])data);
    OpenmrsUtil.copyFile(stream,response.getOutputStream());
  }
 else   if (RenderedImage.class.isAssignableFrom(data.getClass())) {
    RenderedImage img=(RenderedImage)data;
    String[] parts=cd.getTitle().split("\\.");
    String extension="jpg";
    if (parts.length > 0) {
      extension=parts[parts.length - 1];
    }
    ImageIO.write(img,extension,response.getOutputStream());
  }
 else   if (InputStream.class.isAssignableFrom(data.getClass())) {
    InputStream stream=(InputStream)data;
    OpenmrsUtil.copyFile(stream,response.getOutputStream());
    stream.close();
  }
 else {
    throw new ServletException("Couldn't serialize complex obs data for obsId=" + obsId + " of type "+ data.getClass());
  }
}
