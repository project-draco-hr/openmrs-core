{
  PersonAddress personAddress=new PersonAddress();
  personAddress.setStartDate(null);
  personAddress.setEndDate(null);
  String longString="too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text too long text";
  personAddress.setAddress1(longString);
  personAddress.setAddress2(longString);
  personAddress.setCityVillage(longString);
  personAddress.setStateProvince(longString);
  personAddress.setPostalCode(longString);
  personAddress.setCountry(longString);
  personAddress.setLatitude(longString);
  personAddress.setLongitude(longString);
  personAddress.setVoidReason(longString);
  personAddress.setCountyDistrict(longString);
  personAddress.setAddress3(longString);
  personAddress.setAddress4(longString);
  personAddress.setAddress5(longString);
  personAddress.setAddress6(longString);
  personAddress.setAddress7(longString);
  personAddress.setAddress8(longString);
  personAddress.setAddress9(longString);
  personAddress.setAddress10(longString);
  personAddress.setAddress11(longString);
  personAddress.setAddress12(longString);
  personAddress.setAddress13(longString);
  personAddress.setAddress14(longString);
  personAddress.setAddress15(longString);
  Errors errors=new BindException(personAddress,"personAddress");
  validator.validate(personAddress,errors);
  Assert.assertEquals(true,errors.hasFieldErrors("address1"));
  Assert.assertEquals(true,errors.hasFieldErrors("address2"));
  Assert.assertEquals(true,errors.hasFieldErrors("cityVillage"));
  Assert.assertEquals(true,errors.hasFieldErrors("stateProvince"));
  Assert.assertEquals(true,errors.hasFieldErrors("postalCode"));
  Assert.assertEquals(true,errors.hasFieldErrors("country"));
  Assert.assertEquals(true,errors.hasFieldErrors("latitude"));
  Assert.assertEquals(true,errors.hasFieldErrors("longitude"));
  Assert.assertEquals(true,errors.hasFieldErrors("voidReason"));
  Assert.assertEquals(true,errors.hasFieldErrors("countyDistrict"));
  Assert.assertEquals(true,errors.hasFieldErrors("address3"));
  Assert.assertEquals(true,errors.hasFieldErrors("address4"));
  Assert.assertEquals(true,errors.hasFieldErrors("address5"));
  Assert.assertEquals("address6 missing in errors",true,errors.hasFieldErrors("address6"));
  Assert.assertEquals("address7 missing in errors",true,errors.hasFieldErrors("address7"));
  Assert.assertEquals("address8 missing in errors",true,errors.hasFieldErrors("address8"));
  Assert.assertEquals("address9 missing in errors",true,errors.hasFieldErrors("address9"));
  Assert.assertEquals("address10 missing in errors",true,errors.hasFieldErrors("address10"));
  Assert.assertEquals("address11 missing in errors",true,errors.hasFieldErrors("address11"));
  Assert.assertEquals("address12 missing in errors",true,errors.hasFieldErrors("address12"));
  Assert.assertEquals("address13 missing in errors",true,errors.hasFieldErrors("address13"));
  Assert.assertEquals("address14 missing in errors",true,errors.hasFieldErrors("address14"));
  Assert.assertEquals("address15 missing in errors",true,errors.hasFieldErrors("address15"));
}
