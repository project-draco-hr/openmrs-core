{
  if (Context.isAuthenticated()) {
    Patient patient=null;
    if (patientId != null) {
      try {
        patient=Context.getPatientService().getPatient(patientId);
      }
 catch (      ClassCastException ex) {
      }
      if (patient == null) {
        Person toPromote=Context.getPersonService().getPerson(patientId);
        if (toPromote == null)         throw new IllegalArgumentException("No patient or person with the given id");
        patient=new Patient(toPromote);
      }
    }
 else {
      patient=new Patient();
      String name=request.getParameter("addName");
      if (!StringUtils.isBlank(name)) {
        String gender=request.getParameter("addGender");
        String date=request.getParameter("addBirthdate");
        String age=request.getParameter("addAge");
        PersonFormController.getMiniPerson(patient,name,gender,date,age);
      }
    }
    ShortPatientModel patientModel=new ShortPatientModel(patient);
    model.addAttribute("patientModel",patientModel);
    model.addAttribute("relationshipsMap",getRelationshipsMap(patient,request));
    List<PatientIdentifierType> pits=Context.getPatientService().getAllPatientIdentifierTypes();
    boolean identifierLocationUsed=false;
    for (    PatientIdentifierType pit : pits) {
      if (pit.getLocationBehavior() == null || pit.getLocationBehavior() == LocationBehavior.REQUIRED) {
        identifierLocationUsed=true;
      }
    }
    model.addAttribute("identifierTypes",pits);
    model.addAttribute("identifierLocationUsed",identifierLocationUsed);
    model.addAttribute("locations",Context.getLocationService().getAllLocations());
    model.addAttribute("defaultLocation",(LocationUtility.getUserDefaultLocation() != null) ? LocationUtility.getUserDefaultLocation() : LocationUtility.getDefaultLocation());
    if (patient.getPersonName() != null && patient.getPersonName().getId() != null)     model.addAttribute("personNameCache",PersonName.newInstance(patient.getPersonName()));
 else     model.addAttribute("personNameCache",new PersonName());
    if (patient.getPersonAddress() != null && patient.getPersonAddress().getId() != null)     model.addAttribute("personAddressCache",patient.getPersonAddress().clone());
 else     model.addAttribute("personAddressCache",new PersonAddress());
    String propCause=Context.getAdministrationService().getGlobalProperty("concept.causeOfDeath");
    Concept conceptCause=Context.getConceptService().getConcept(propCause);
    String causeOfDeathOther="";
    if (conceptCause != null && patient.getPatientId() != null) {
      List<Obs> obssDeath=Context.getObsService().getObservationsByPersonAndConcept(patient,conceptCause);
      if (obssDeath.size() == 1) {
        Obs obsDeath=obssDeath.iterator().next();
        causeOfDeathOther=obsDeath.getValueText();
        if (causeOfDeathOther == null) {
          log.debug("cod is null, so setting to empty string");
          causeOfDeathOther="";
        }
 else {
          log.debug("cod is valid: " + causeOfDeathOther);
        }
      }
 else {
        log.debug("obssDeath is wrong size: " + obssDeath.size());
      }
    }
 else {
      log.debug("No concept cause found");
    }
    model.addAttribute("causeOfDeathOther",causeOfDeathOther);
  }
  return SHORT_PATIENT_FORM_URL;
}
