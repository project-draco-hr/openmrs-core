{
  if (Context.isAuthenticated()) {
    new ShortPatientFormValidator().validate(patientModel,result);
    if (result.hasErrors())     return SHORT_PATIENT_FORM_URL;
    Patient patient=null;
    patient=getPatientFromFormData(patientModel);
    Errors patientErrors=new BindException(patient,"patient");
    patientValidator.validate(patient,patientErrors);
    if (patientErrors.hasErrors()) {
      for (      ObjectError error : patientErrors.getAllErrors())       result.reject(error.getCode(),error.getArguments(),"Validation errors found");
      return SHORT_PATIENT_FORM_URL;
    }
    boolean foundChanges=hasPersonNameOrAddressChanged(patient,personNameCache,personAddressCache);
    try {
      patient=Context.getPatientService().savePatient(patient);
      request.setAttribute(WebConstants.OPENMRS_MSG_ATTR,Context.getMessageSourceService().getMessage("Patient.saved"),WebRequest.SCOPE_SESSION);
      saveDeathInfo(patientModel,request);
      if (!patient.getVoided()) {
        Map<String,Relationship> relationships=getRelationshipsMap(patientModel,request);
        for (        Relationship relationship : relationships.values()) {
          if (relationship.getPersonA() != null && relationship.getPersonB() != null)           Context.getPersonService().saveRelationship(relationship);
        }
      }
    }
 catch (    APIException e) {
      log.error("Error occurred while attempting to save patient",e);
      request.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,Context.getMessageSourceService().getMessage("Patient.save.error"),WebRequest.SCOPE_SESSION);
      if (!foundChanges)       return SHORT_PATIENT_FORM_URL;
    }
    return "redirect:" + PATIENT_DASHBOARD_URL + "?patientId="+ patient.getPatientId();
  }
  return FIND_PATIENT_PAGE;
}
