{
  HttpSession httpSession=request.getSession();
  Context context=(Context)httpSession.getAttribute(WebConstants.OPENMRS_CONTEXT_HTTPSESSION_ATTR);
  List<ConceptProposal> cpList=new Vector<ConceptProposal>();
  Map<String,List<ConceptProposal>> origText=new HashMap<String,List<ConceptProposal>>();
  if (context != null && context.isAuthenticated()) {
    ConceptService cs=context.getConceptService();
    log.debug("tmp value: " + request.getParameter("includeCompleted"));
    boolean b=new Boolean(request.getParameter("includeCompleted"));
    log.debug("b value: " + b);
    cpList=cs.getConceptProposals(b);
  }
  for (  ConceptProposal cp : cpList) {
    List<ConceptProposal> matchingProposals=origText.get(cp.getOriginalText());
    if (matchingProposals == null)     matchingProposals=new Vector<ConceptProposal>();
    matchingProposals.add(cp);
    origText.put(cp.getOriginalText(),matchingProposals);
  }
  boolean asc=new Boolean("asc".equals(request.getParameter("sortOrder")));
  String sortOn=request.getParameter("sortOn");
  if (sortOn == null)   sortOn="occurences";
  TreeMap<List<ConceptProposal>,Integer> cpMap=new TreeMap<List<ConceptProposal>,Integer>();
  if (sortOn.equals("occurences"))   cpMap=new TreeMap<List<ConceptProposal>,Integer>(new CompareListSize(asc));
 else   cpMap=new TreeMap<List<ConceptProposal>,Integer>(new CompareListText(asc));
  for (  List<ConceptProposal> matchingProposals : origText.values()) {
    cpMap.put(matchingProposals,matchingProposals.size());
  }
  return cpMap;
}
