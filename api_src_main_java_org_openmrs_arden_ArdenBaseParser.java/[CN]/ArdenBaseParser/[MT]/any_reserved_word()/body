{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST any_reserved_word_AST=null;
  try {
switch (LA(1)) {
case AND:
{
        AST tmp321_AST=null;
        tmp321_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp321_AST);
        match(AND);
        any_reserved_word_AST=(AST)currentAST.root;
        break;
      }
case IS:
{
      AST tmp322_AST=null;
      tmp322_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp322_AST);
      match(IS);
      any_reserved_word_AST=(AST)currentAST.root;
      break;
    }
case ARE:
{
    AST tmp323_AST=null;
    tmp323_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp323_AST);
    match(ARE);
    any_reserved_word_AST=(AST)currentAST.root;
    break;
  }
case WAS:
{
  AST tmp324_AST=null;
  tmp324_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp324_AST);
  match(WAS);
  any_reserved_word_AST=(AST)currentAST.root;
  break;
}
case WERE:
{
AST tmp325_AST=null;
tmp325_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp325_AST);
match(WERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case COUNT:
{
AST tmp326_AST=null;
tmp326_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp326_AST);
match(COUNT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IN:
{
AST tmp327_AST=null;
tmp327_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp327_AST);
match(IN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THE:
{
AST tmp328_AST=null;
tmp328_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp328_AST);
match(THE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THAN:
{
AST tmp329_AST=null;
tmp329_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp329_AST);
match(THAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FROM:
{
AST tmp330_AST=null;
tmp330_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp330_AST);
match(FROM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BEFORE:
{
AST tmp331_AST=null;
tmp331_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp331_AST);
match(BEFORE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AFTER:
{
AST tmp332_AST=null;
tmp332_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp332_AST);
match(AFTER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AGO:
{
AST tmp333_AST=null;
tmp333_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp333_AST);
match(AGO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AT:
{
AST tmp334_AST=null;
tmp334_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp334_AST);
match(AT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OF:
{
AST tmp335_AST=null;
tmp335_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp335_AST);
match(OF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WRITE:
{
AST tmp336_AST=null;
tmp336_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp336_AST);
match(WRITE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BE:
{
AST tmp337_AST=null;
tmp337_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp337_AST);
match(BE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LET:
{
AST tmp338_AST=null;
tmp338_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp338_AST);
match(LET);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEAR:
{
AST tmp339_AST=null;
tmp339_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp339_AST);
match(YEAR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEARS:
{
AST tmp340_AST=null;
tmp340_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp340_AST);
match(YEARS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IF:
{
AST tmp341_AST=null;
tmp341_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp341_AST);
match(IF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IT:
{
AST tmp342_AST=null;
tmp342_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp342_AST);
match(IT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEY:
{
AST tmp343_AST=null;
tmp343_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp343_AST);
match(THEY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NOT:
{
AST tmp344_AST=null;
tmp344_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp344_AST);
match(NOT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OR:
{
AST tmp345_AST=null;
tmp345_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp345_AST);
match(OR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEN:
{
AST tmp346_AST=null;
tmp346_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp346_AST);
match(THEN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTH:
{
AST tmp347_AST=null;
tmp347_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp347_AST);
match(MONTH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTHS:
{
AST tmp348_AST=null;
tmp348_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp348_AST);
match(MONTHS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIME:
{
AST tmp349_AST=null;
tmp349_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp349_AST);
match(TIME);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIMES:
{
AST tmp350_AST=null;
tmp350_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp350_AST);
match(TIMES);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITHIN:
{
AST tmp351_AST=null;
tmp351_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp351_AST);
match(WITHIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case READ:
{
AST tmp352_AST=null;
tmp352_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp352_AST);
match(READ);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MINIMUM:
{
AST tmp353_AST=null;
tmp353_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp353_AST);
match(MINIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MIN:
{
AST tmp354_AST=null;
tmp354_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp354_AST);
match(MIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAXIMUM:
{
AST tmp355_AST=null;
tmp355_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp355_AST);
match(MAXIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAX:
{
AST tmp356_AST=null;
tmp356_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp356_AST);
match(MAX);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LAST:
{
AST tmp357_AST=null;
tmp357_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp357_AST);
match(LAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
AST tmp358_AST=null;
tmp358_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp358_AST);
match(FIRST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
AST tmp359_AST=null;
tmp359_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp359_AST);
match(EARLIEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
AST tmp360_AST=null;
tmp360_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp360_AST);
match(LATEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EVENT:
{
AST tmp361_AST=null;
tmp361_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp361_AST);
match(EVENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WHERE:
{
AST tmp362_AST=null;
tmp362_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp362_AST);
match(WHERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXIST:
{
AST tmp363_AST=null;
tmp363_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp363_AST);
match(EXIST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXISTS:
{
AST tmp364_AST=null;
tmp364_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp364_AST);
match(EXISTS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PAST:
{
AST tmp365_AST=null;
tmp365_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp365_AST);
match(PAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVERAGE:
{
AST tmp366_AST=null;
tmp366_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp366_AST);
match(AVERAGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVG:
{
AST tmp367_AST=null;
tmp367_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp367_AST);
match(AVG);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SUM:
{
AST tmp368_AST=null;
tmp368_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp368_AST);
match(SUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MEDIAN:
{
AST tmp369_AST=null;
tmp369_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp369_AST);
match(MEDIAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CONCLUDE:
{
AST tmp370_AST=null;
tmp370_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp370_AST);
match(CONCLUDE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSE:
{
AST tmp371_AST=null;
tmp371_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp371_AST);
match(ELSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSEIF:
{
AST tmp372_AST=null;
tmp372_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp372_AST);
match(ELSEIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ENDIF:
{
AST tmp373_AST=null;
tmp373_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp373_AST);
match(ENDIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TRUE:
{
AST tmp374_AST=null;
tmp374_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp374_AST);
match(TRUE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FALSE:
{
AST tmp375_AST=null;
tmp375_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp375_AST);
match(FALSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DATA:
{
AST tmp376_AST=null;
tmp376_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp376_AST);
match(DATA);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LOGIC:
{
AST tmp377_AST=null;
tmp377_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp377_AST);
match(LOGIC);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ACTION:
{
AST tmp378_AST=null;
tmp378_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp378_AST);
match(ACTION);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CALL:
{
AST tmp379_AST=null;
tmp379_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp379_AST);
match(CALL);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITH:
{
AST tmp380_AST=null;
tmp380_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp380_AST);
match(WITH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TO:
{
AST tmp381_AST=null;
tmp381_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp381_AST);
match(TO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ANY:
{
AST tmp382_AST=null;
tmp382_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp382_AST);
match(ANY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case RESEARCH:
{
AST tmp383_AST=null;
tmp383_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp383_AST);
match(RESEARCH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DAY:
{
AST tmp384_AST=null;
tmp384_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp384_AST);
match(DAY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SECOND:
{
AST tmp385_AST=null;
tmp385_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp385_AST);
match(SECOND);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OCCUR:
{
AST tmp386_AST=null;
tmp386_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp386_AST);
match(OCCUR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PURPOSE:
{
AST tmp387_AST=null;
tmp387_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp387_AST);
match(PURPOSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PRESENT:
{
AST tmp388_AST=null;
tmp388_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp388_AST);
match(PRESENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NUMBER:
{
AST tmp389_AST=null;
tmp389_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp389_AST);
match(NUMBER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case KNOWLEDGE:
{
AST tmp390_AST=null;
tmp390_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp390_AST);
match(KNOWLEDGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PRIORITY:
{
AST tmp391_AST=null;
tmp391_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp391_AST);
match(PRIORITY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case GREATER:
{
AST tmp392_AST=null;
tmp392_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp392_AST);
match(GREATER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAINTENANCE:
{
AST tmp393_AST=null;
tmp393_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp393_AST);
match(MAINTENANCE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
default :
if ((LA(1) == LESS)) {
AST tmp394_AST=null;
tmp394_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp394_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
}
 else if ((LA(1) == LESS)) {
AST tmp395_AST=null;
tmp395_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp395_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_26);
}
 else {
throw ex;
}
}
returnAST=any_reserved_word_AST;
}
