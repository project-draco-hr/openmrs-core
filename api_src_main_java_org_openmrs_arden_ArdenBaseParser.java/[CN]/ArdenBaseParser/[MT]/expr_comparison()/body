{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expr_comparison_AST=null;
  try {
    expr_string();
    astFactory.addASTChild(currentAST,returnAST);
{
switch (LA(1)) {
case GT:
case GTE:
case LT:
case LTE:
case EQUALS:
case LITERAL_EQ:
case LITERAL_LT:
case LITERAL_GT:
case LITERAL_LE:
case LITERAL_GE:
case NE:
case LITERAL_NE:
{
{
            simple_comp_op();
            astFactory.addASTChild(currentAST,returnAST);
            expr_string();
            astFactory.addASTChild(currentAST,returnAST);
          }
          break;
        }
case IS:
case ARE:
case WAS:
case WERE:
{
{
          is();
          main_comp_op();
          astFactory.addASTChild(currentAST,returnAST);
        }
        break;
      }
case AND:
case AT:
case OR:
case THEN:
case WHERE:
case CONCLUDE:
case CALL:
case SEMI:
case ID:
case COMMA:
case RPAREN:
case ACTION_OP:
case LITERAL_MERGE:
case LITERAL_SORT:
case LITERAL_SEQTO:
{
      break;
    }
default :
{
    throw new NoViableAltException(LT(1),getFilename());
  }
}
}
expr_comparison_AST=(AST)currentAST.root;
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_59);
}
 else {
throw ex;
}
}
returnAST=expr_comparison_AST;
}
