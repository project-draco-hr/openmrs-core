{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST from_of_func_op_AST=null;
  try {
switch (LA(1)) {
case MINIMUM:
case MIN:
{
{
switch (LA(1)) {
case MINIMUM:
{
              AST tmp467_AST=null;
              tmp467_AST=astFactory.create(LT(1));
              astFactory.addASTChild(currentAST,tmp467_AST);
              match(MINIMUM);
              break;
            }
case MIN:
{
            AST tmp468_AST=null;
            tmp468_AST=astFactory.create(LT(1));
            astFactory.addASTChild(currentAST,tmp468_AST);
            match(MIN);
            break;
          }
default :
{
          throw new NoViableAltException(LT(1),getFilename());
        }
    }
  }
  from_of_func_op_AST=(AST)currentAST.root;
  break;
}
case MAXIMUM:
case MAX:
{
{
switch (LA(1)) {
case MAXIMUM:
{
      AST tmp469_AST=null;
      tmp469_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp469_AST);
      match(MAXIMUM);
      break;
    }
case MAX:
{
    AST tmp470_AST=null;
    tmp470_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp470_AST);
    match(MAX);
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
from_of_func_op_AST=(AST)currentAST.root;
break;
}
case LAST:
{
{
AST tmp471_AST=null;
tmp471_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp471_AST);
match(LAST);
}
from_of_func_op_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
{
AST tmp472_AST=null;
tmp472_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp472_AST);
match(FIRST);
}
from_of_func_op_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
{
AST tmp473_AST=null;
tmp473_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp473_AST);
match(EARLIEST);
}
from_of_func_op_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
{
AST tmp474_AST=null;
tmp474_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp474_AST);
match(LATEST);
}
from_of_func_op_AST=(AST)currentAST.root;
break;
}
case TRUE:
case FALSE:
case OF:
case NULL:
case INTLIT:
case ID:
case STRING_LITERAL:
case LPAREN:
case ARDEN_CURLY_BRACKETS:
case TERM_LITERAL:
{
from_of_func_op_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_36);
}
 else {
throw ex;
}
}
returnAST=from_of_func_op_AST;
}
