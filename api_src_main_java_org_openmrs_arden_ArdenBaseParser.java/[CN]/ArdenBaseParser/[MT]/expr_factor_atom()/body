{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expr_factor_atom_AST=null;
  try {
switch (LA(1)) {
case ID:
{
        AST tmp624_AST=null;
        tmp624_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp624_AST);
        match(ID);
        expr_factor_atom_AST=(AST)currentAST.root;
        break;
      }
case LPAREN:
{
      match(LPAREN);
      expr();
      astFactory.addASTChild(currentAST,returnAST);
      match(RPAREN);
      expr_factor_atom_AST=(AST)currentAST.root;
      break;
    }
case INTLIT:
{
{
      AST tmp627_AST=null;
      tmp627_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp627_AST);
      match(INTLIT);
{
switch (LA(1)) {
case MINUS:
{
{
              int _cnt333=0;
              _loop333:               do {
                if ((LA(1) == MINUS)) {
                  AST tmp628_AST=null;
                  tmp628_AST=astFactory.create(LT(1));
                  astFactory.makeASTRoot(currentAST,tmp628_AST);
                  match(MINUS);
                  AST tmp629_AST=null;
                  tmp629_AST=astFactory.create(LT(1));
                  astFactory.addASTChild(currentAST,tmp629_AST);
                  match(INTLIT);
                }
 else {
                  if (_cnt333 >= 1) {
                    break _loop333;
                  }
 else {
                    throw new NoViableAltException(LT(1),getFilename());
                  }
                }
                _cnt333++;
              }
 while (true);
            }
            break;
          }
case EOF:
case AND:
case IS:
case ARE:
case WAS:
case WERE:
case IN:
case LESS:
case GREATER:
case FROM:
case BEFORE:
case AFTER:
case AGO:
case AT:
case YEAR:
case YEARS:
case OR:
case THEN:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case WHERE:
case DAYS:
case DAY:
case MONTH:
case MONTHS:
case WEEK:
case WEEKS:
case CONCLUDE:
case CALL:
case SECOND:
case DOT:
case SEMI:
case ID:
case GT:
case GTE:
case LT:
case LTE:
case COMMA:
case LPAREN:
case RPAREN:
case ARDEN_CURLY_BRACKETS:
case LITERAL_hour:
case LITERAL_hours:
case LITERAL_minute:
case LITERAL_minutes:
case LITERAL_seconds:
case EQUALS:
case LITERAL_EQ:
case LITERAL_LT:
case LITERAL_GT:
case LITERAL_LE:
case LITERAL_GE:
case NE:
case LITERAL_NE:
case ACTION_OP:
case LITERAL_MERGE:
case LITERAL_SORT:
case LITERAL_SEQTO:
case 178:
case 179:
case 180:
case 181:
{
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
}
expr_factor_atom_AST=(AST)currentAST.root;
break;
}
case TRUE:
case FALSE:
{
boolean_value();
astFactory.addASTChild(currentAST,returnAST);
expr_factor_atom_AST=(AST)currentAST.root;
break;
}
case STRING_LITERAL:
{
AST tmp630_AST=null;
tmp630_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp630_AST);
match(STRING_LITERAL);
expr_factor_atom_AST=(AST)currentAST.root;
break;
}
case TERM_LITERAL:
{
AST tmp631_AST=null;
tmp631_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp631_AST);
match(TERM_LITERAL);
expr_factor_atom_AST=(AST)currentAST.root;
break;
}
case NULL:
{
AST tmp632_AST=null;
tmp632_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp632_AST);
match(NULL);
expr_factor_atom_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
if (inputState.guessing == 0) {
reportError(ex);
recover(ex,_tokenSet_60);
}
 else {
throw ex;
}
}
returnAST=expr_factor_atom_AST;
}
