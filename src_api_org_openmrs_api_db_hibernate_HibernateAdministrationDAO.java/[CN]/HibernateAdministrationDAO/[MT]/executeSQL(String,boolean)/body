{
  sql=sql.trim();
  boolean dataManipulation=false;
  String sqlLower=sql.toLowerCase();
  if (sqlLower.startsWith("insert") || sqlLower.startsWith("update") || sqlLower.startsWith("delete")|| sqlLower.startsWith("alter")|| sqlLower.startsWith("drop")|| sqlLower.startsWith("create")) {
    dataManipulation=true;
  }
  if (selectOnly && dataManipulation)   throw new DAOException("Illegal command(s) found in query string");
  if (HibernateUtil.isHSQLDialect(sessionFactory))   sql=sql.replace("`","");
  Connection conn=sessionFactory.getCurrentSession().connection();
  PreparedStatement ps=null;
  List<List<Object>> results=new Vector<List<Object>>();
  try {
    ps=conn.prepareStatement(sql);
    if (dataManipulation == true) {
      Integer i=ps.executeUpdate();
      List<Object> row=new Vector<Object>();
      row.add(i);
      results.add(row);
    }
 else {
      ResultSet resultSet=ps.executeQuery();
      ResultSetMetaData rmd=resultSet.getMetaData();
      int columnCount=rmd.getColumnCount();
      while (resultSet.next()) {
        List<Object> rowObjects=new Vector<Object>();
        for (int x=1; x <= columnCount; x++) {
          rowObjects.add(resultSet.getObject(x));
        }
        results.add(rowObjects);
      }
    }
  }
 catch (  SQLException e) {
    log.error("Error while running sql: " + sql,e);
    throw new DAOException("Error while running sql: " + sql + " . Message: "+ e.getMessage(),e);
  }
  return results;
}
