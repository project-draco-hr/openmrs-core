{
  StringBuffer sb=new StringBuffer();
  if (method == PatientLocationMethod.ANY_ENCOUNTER) {
    sb.append(" select e.patient_id from ");
    sb.append(" encounter e ");
    sb.append(" where e.location_id = :location_id ");
    sb.append(" group by e.patient_id ");
  }
 else   if (method == PatientLocationMethod.EARLIEST_ENCOUNTER) {
    sb.append(" select e.patient_id ");
    sb.append(" from encounter e ");
    sb.append("   inner join (");
    sb.append("       select patient_id, min(encounter_datetime) as earliest ");
    sb.append("       from encounter ");
    sb.append("       group by patient_id) subq ");
    sb.append("     on e.patient_id = subq.patient_id and e.encounter_datetime = subq.earliest ");
    sb.append(" where e.location_id = :location_id ");
    sb.append(" group by e.patient_id ");
  }
 else   if (method == PatientLocationMethod.LATEST_ENCOUNTER) {
    sb.append(" select e.patient_id ");
    sb.append(" from encounter e ");
    sb.append("   inner join (");
    sb.append("       select patient_id, max(encounter_datetime) as earliest ");
    sb.append("       from encounter ");
    sb.append("       group by patient_id) subq ");
    sb.append("     on e.patient_id = subq.patient_id and e.encounter_datetime = subq.earliest ");
    sb.append(" where e.location_id = :location_id ");
    sb.append(" group by e.patient_id ");
  }
 else {
    sb.append(" select patient_id from patient p, person_attribute attr, person_attribute_type type ");
    sb.append(" where type.name = 'Health Center' ");
    sb.append(" and type.person_attribute_type_id = attr.person_attribute_type_id ");
    sb.append(" and attr.value = :location_id ");
    sb.append(" and attr.person_id = p.patient_id ");
    sb.append(" and attr.voided = false ");
    sb.append(" and p.voided = false ");
  }
  log.debug("query: " + sb);
  Query query=sessionFactory.getCurrentSession().createSQLQuery(sb.toString());
  query.setInteger("location_id",locationId);
  return new Cohort(query.list());
}
