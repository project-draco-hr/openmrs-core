{
  if (relType == null) {
    throw new IllegalArgumentException("Must give a relationship type");
  }
  Map<Integer,List<Person>> ret=new HashMap<Integer,List<Person>>();
  if (patients != null) {
    if (patients.size() == 0) {
      return ret;
    }
  }
  Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Relationship.class);
  criteria.add(Restrictions.eq("voided",false));
  if (patients != null) {
    if (forwards) {
      criteria.add(Restrictions.in("personA.personId",patients.getMemberIds()));
    }
 else {
      criteria.add(Restrictions.in("personB.personId",patients.getMemberIds()));
    }
  }
  log.debug("criteria: " + criteria);
  List<Relationship> rels=(List<Relationship>)criteria.list();
  for (  Relationship rel : rels) {
    Person fromPerson=forwards ? rel.getPersonA() : rel.getPersonB();
    Person toPerson=forwards ? rel.getPersonB() : rel.getPersonA();
    List<Person> holder=(List<Person>)ret.get(fromPerson.getPersonId());
    if (holder == null) {
      holder=new ArrayList<Person>();
      ret.put(fromPerson.getPersonId(),holder);
    }
    holder.add(toPerson);
  }
  return ret;
}
