{
  Integer programId=program == null ? null : program.getProgramId();
  List<Integer> stateIds=null;
  if (stateList != null && stateList.size() > 0) {
    stateIds=new ArrayList<Integer>();
    for (    ProgramWorkflowState state : stateList) {
      stateIds.add(state.getProgramWorkflowStateId());
    }
  }
  List<String> clauses=new ArrayList<String>();
  clauses.add("pp.voided = false");
  if (programId != null) {
    clauses.add("pp.program_id = :programId");
  }
  if (stateIds != null) {
    clauses.add("ps.state in (:stateIds)");
    clauses.add("ps.voided = false");
  }
  if (fromDate != null) {
    clauses.add("(pp.date_completed is null or pp.date_completed >= :fromDate)");
    if (stateIds != null) {
      clauses.add("(ps.end_date is null or ps.end_date >= :fromDate)");
    }
  }
  if (toDate != null) {
    clauses.add("(pp.date_enrolled is null or pp.date_enrolled <= :toDate)");
    if (stateIds != null) {
      clauses.add("(ps.start_date is null or ps.start_date <= :toDate)");
    }
  }
  StringBuilder sql=new StringBuilder();
  sql.append("select pp.patient_id ");
  sql.append("from patient_program pp ");
  sql.append("inner join patient p on pp.patient_id = p.patient_id and p.voided = false ");
  if (stateIds != null) {
    sql.append("inner join patient_state ps on pp.patient_program_id = ps.patient_program_id ");
  }
  for (ListIterator<String> i=clauses.listIterator(); i.hasNext(); ) {
    sql.append(i.nextIndex() == 0 ? " where " : " and ");
    sql.append(i.next());
  }
  sql.append(" group by pp.patient_id");
  log.debug("query: " + sql);
  Query query=sessionFactory.getCurrentSession().createSQLQuery(sql.toString());
  if (programId != null) {
    query.setInteger("programId",programId);
  }
  if (stateIds != null) {
    query.setParameterList("stateIds",stateIds);
  }
  if (fromDate != null) {
    query.setDate("fromDate",fromDate);
  }
  if (toDate != null) {
    query.setDate("toDate",toDate);
  }
  return new Cohort(query.list());
}
