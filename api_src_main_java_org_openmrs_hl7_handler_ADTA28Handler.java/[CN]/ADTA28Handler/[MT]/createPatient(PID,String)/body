{
  Patient patient=new Patient();
  User creator=Context.getUserService().getUserByUsername(creatorName);
  if (creator != null) {
    patient.setCreator(creator);
  }
  CX[] idList=pid.getPatientIdentifierList();
  if (idList == null || idList.length < 1)   throw new HL7Exception("Missing patient identifier in PID segment");
  List<PatientIdentifier> goodIdentifiers=new ArrayList<PatientIdentifier>();
  for (  CX id : idList) {
    String assigningAuthority=id.getAssigningAuthority().getNamespaceID().getValue();
    String hl7PatientId=id.getIDNumber().getValue();
    log.debug("identifier has id=" + hl7PatientId + " assigningAuthority="+ assigningAuthority);
    if (assigningAuthority != null && assigningAuthority.length() > 0) {
      try {
        PatientIdentifierType pit=Context.getPatientService().getPatientIdentifierTypeByName(assigningAuthority);
        if (pit == null) {
          log.warn("Can't find PatientIdentifierType named '" + assigningAuthority + "'");
          continue;
        }
        PatientIdentifier pi=new PatientIdentifier();
        if (creator != null) {
          pi.setCreator(creator);
        }
        pi.setIdentifierType(pit);
        pi.setIdentifier(hl7PatientId);
        Location location=Context.getLocationService().getDefaultLocation();
        if (location == null) {
          throw new HL7Exception("Cannot find default location");
        }
        pi.setLocation(location);
        try {
          PatientIdentifierValidator.validateIdentifier(pi);
          goodIdentifiers.add(pi);
        }
 catch (        PatientIdentifierException ex) {
          log.warn("Patient identifier in PID is invalid: " + pi,ex);
        }
      }
 catch (      Exception e) {
        log.error("Uncaught error parsing/creating patient identifier '" + hl7PatientId + "' for assigning authority '"+ assigningAuthority+ "'",e);
      }
    }
 else {
      log.debug("PID contains identifier with no assigning authority");
      continue;
    }
  }
  if (goodIdentifiers.size() == 0) {
    throw new HL7Exception("PID segment has no recognizable patient identifiers.");
  }
  patient.addIdentifiers(goodIdentifiers);
  XPN patientNameX=pid.getPatientName(0);
  if (patientNameX == null)   throw new HL7Exception("Missing patient name in the PID segment");
  PersonName name=new PersonName();
  name.setFamilyName(patientNameX.getFamilyName().getSurname().getValue());
  name.setGivenName(patientNameX.getGivenName().getValue());
  name.setMiddleName(patientNameX.getSecondAndFurtherGivenNamesOrInitialsThereof().getValue());
  if (creator != null) {
    name.setCreator(creator);
  }
  patient.addName(name);
  String gender=pid.getAdministrativeSex().getValue();
  if (gender == null)   throw new HL7Exception("Missing gender in the PID segment");
  gender=gender.toUpperCase();
  if (!OpenmrsConstants.GENDER().containsKey(gender))   throw new HL7Exception("Unrecognized gender: " + gender);
  patient.setGender(gender);
  TS dateOfBirth=pid.getDateTimeOfBirth();
  if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)   throw new HL7Exception("Missing birth date in the PID segment");
  patient.setBirthdate(tsToDate(dateOfBirth));
  ID precisionTemp=dateOfBirth.getDegreeOfPrecision();
  if (precisionTemp != null && precisionTemp.getValue() != null) {
    String precision=precisionTemp.getValue().toUpperCase();
    log.debug("The birthdate is estimated: " + precision);
    if (precision.equals("Y") || precision.equals("L"))     patient.setBirthdateEstimated(true);
  }
  return patient;
}
