{
  sql=sql.trim();
  boolean dataManipulation=false;
  String sqlLower=sql.toLowerCase();
  if (sqlLower.startsWith("insert") || sqlLower.startsWith("update") || sqlLower.startsWith("delete")|| sqlLower.startsWith("alter")|| sqlLower.startsWith("drop")|| sqlLower.startsWith("create")|| sqlLower.startsWith("rename")) {
    dataManipulation=true;
  }
  if (selectOnly && dataManipulation) {
    throw new IllegalArgumentException("Illegal command(s) found in query string");
  }
  final List<List<Object>> result=new ArrayList<List<Object>>();
  final String query=sql;
  final boolean sessionDataManipulation=dataManipulation;
  session.doWork(new Work(){
    @Override public void execute(    Connection conn){
      PreparedStatement ps=null;
      try {
        ps=conn.prepareStatement(query);
        if (sessionDataManipulation) {
          Integer i=ps.executeUpdate();
          List<Object> row=new Vector<Object>();
          row.add(i);
          result.add(row);
        }
 else {
          ResultSet resultSet=ps.executeQuery();
          ResultSetMetaData rmd=resultSet.getMetaData();
          int columnCount=rmd.getColumnCount();
          while (resultSet.next()) {
            List<Object> rowObjects=new Vector<Object>();
            for (int x=1; x <= columnCount; x++) {
              rowObjects.add(resultSet.getObject(x));
            }
            result.add(rowObjects);
          }
        }
      }
 catch (      SQLException e) {
        log.debug("Error while running sql: " + query,e);
        throw new DAOException("Error while running sql: " + query + " . Message: "+ e.getMessage(),e);
      }
 finally {
        try {
          ps.close();
        }
 catch (        SQLException e) {
          log.error("Error generated while closing statement",e);
        }
      }
    }
  }
);
  return result;
}
