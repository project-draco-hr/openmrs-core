{
  HttpSession httpSession=request.getSession();
  Context context=(Context)httpSession.getAttribute(WebConstants.OPENMRS_CONTEXT_HTTPSESSION_ATTR);
  Locale locale=request.getLocale();
  String view=getFormView();
  if (context != null && context.isAuthenticated()) {
    StringBuffer success=new StringBuffer();
    StringBuffer error=new StringBuffer();
    String action=request.getParameter("action");
    MessageSourceAccessor msa=getMessageSourceAccessor();
    String[] taskList=request.getParameterValues("taskId");
    if (taskList != null) {
      for (      String task : taskList) {
        Object[] args=new Object[]{task};
        try {
          Integer taskId=Integer.valueOf(task);
          if (action.equals(msa.getMessage("Scheduler.taskList.delete"))) {
            context.getSchedulerService().deleteTask(taskId);
            success.append(msa.getMessage("Scheduler.taskList.deleted",args));
          }
 else           if (action.equals(msa.getMessage("Scheduler.taskList.stop"))) {
            context.getSchedulerService().stopTask(taskId);
            success.append(msa.getMessage("Scheduler.taskList.stopped",args));
          }
 else           if (action.equals(msa.getMessage("Scheduler.taskList.start"))) {
            context.getSchedulerService().startTask(taskId);
            success.append(msa.getMessage("Scheduler.taskList.started",args));
          }
        }
 catch (        APIException e) {
          log.warn(e);
          error.append(msa.getMessage("Scheduler.taskList.error",args));
        }
      }
    }
    view=getSuccessView();
    if (!success.toString().equals("")) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success.toString());
    }
    if (!error.toString().equals("")) {
      httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error.toString());
    }
  }
  return new ModelAndView(new RedirectView(view));
}
