{
  boolean retValEval=true, retVal=true;
  try {
    String key;
    ListIterator<MLMEvaluateElement> thisList;
    LinkedList<MLMEvaluateElement> evalListBySection=evaluateList.get("data");
    if (evalListBySection == null) {
      evalListBySection=new LinkedList<MLMEvaluateElement>();
      this.evaluateList.put("data",evalListBySection);
    }
    thisList=evalListBySection.listIterator(0);
    if (retValEval == false) {
      return false;
    }
    w.append("\n\tpublic Result eval(LogicContext context, Integer patientId,\n" + "\t\t\tMap<String, Object> parameters) throws LogicException {\n\n");
    w.append("\t\tString actionStr = \"\";\n");
    w.append("\t\tPatientService patientService = Context.getPatientService();\n");
    w.append("\t\tPatient patient = patientService.getPatient(patientId);\n");
    w.append("\t\tresultLookup = new HashMap <String, Result>();\n");
    w.append("\t\tBoolean ageOK = null;\n\n\t\ttry {\n");
    w.append("\t\t\tRuleProvider ruleProvider = (RuleProvider)parameters.get(\"ruleProvider\");\n");
    w.append("\t\t\tthis.patient=patient;\n");
    w.append("\t\t\tuserVarMap = new HashMap <String, String>();\n");
    w.append("\t\t\tfirstname = patient.getPersonName().getGivenName();\n");
    w.append("\t\t\tuserVarMap.put(\"firstname\", toProperCase(firstname));\n");
    w.append("\t\t\tString lastName = patient.getFamilyName();\n");
    w.append("\t\t\tuserVarMap.put(\"lastName\", lastName);\n");
    w.append("\t\t\tString gender = patient.getGender();\n");
    w.append("\t\t\tuserVarMap.put(\"Gender\", gender);\n");
    w.append("\t\t\tif(gender.equalsIgnoreCase(\"M\")){\n");
    w.append("\t\t\t\tuserVarMap.put(\"gender\",\"his\");\n");
    w.append("\t\t\t\tuserVarMap.put(\"hisher\",\"his\");\n");
    w.append("\t\t\t}else{\n");
    w.append("\t\t\t\tuserVarMap.put(\"gender\",\"her\");\n");
    w.append("\t\t\t\tuserVarMap.put(\"hisher\",\"her\");\n");
    w.append("\t\t\t}\n");
    w.append("\t\t\tinitAction();\n");
    if (this.calls.get("data") != null) {
      for (      Call currCall : this.calls.get("data")) {
        currCall.write(w);
      }
    }
    Iterator<Map.Entry<String,Comparison>> comparisonIterator=null;
    if (this.comparisons.get("data") != null) {
      comparisonIterator=this.comparisons.get("data").entrySet().iterator();
    }
    while (thisList.hasNext()) {
      WriteData(thisList.next(),w,comparisonIterator);
      w.flush();
    }
    Set<String> uniqueKeys=this.conceptMap.keySet();
    uniqueKeys.remove("Gender");
    w.append("\n\n\t\t\tif(evaluate_logic(parameters, context, ruleProvider)){\n");
    w.append("\t\t\t\tResult ruleResult = new Result();\n");
    for (    String uniqueKey : uniqueKeys) {
      if (uniqueKey.startsWith("Box") || uniqueKey.startsWith("mode")) {
      }
 else {
        w.append("\t\tResult " + uniqueKey + " = (Result) resultLookup.get(\""+ uniqueKey+ "\");\n");
      }
    }
    w.append("\n");
    Iterator<Map.Entry<String,Comparison>> comparisonIteratorAction=null;
    if (this.comparisons.get("action") != null) {
      comparisonIteratorAction=this.comparisons.get("action").entrySet().iterator();
    }
    evalListBySection=evaluateList.get("action");
    if (evalListBySection == null) {
      evalListBySection=new LinkedList<MLMEvaluateElement>();
      this.evaluateList.put("action",evalListBySection);
    }
    thisList=evalListBySection.listIterator(0);
    ArrayList<Call> callBySectionAction=this.calls.get("action");
    Iterator<Call> callIteratorAction=null;
    if (callBySectionAction != null) {
      callIteratorAction=callBySectionAction.iterator();
      w.append("\t\t\t\tObject value = null;\n");
      w.append("\t\t\t\tString variable = null;\n");
      w.append("\t\t\t\tint varLen = 0;\n");
    }
    while (thisList.hasNext()) {
      WriteAction(thisList.next(),w,comparisonIteratorAction,callIteratorAction);
      w.append("\n");
      w.flush();
    }
    w.append("\t\t\t\tfor(String currAction:actions){\n");
    w.append("\t\t\t\t\tcurrAction = doAction(currAction);\n");
    w.append("\t\t\t\t\truleResult.add(new Result(currAction));\n");
    w.append("\t\t\t\t}\n");
    w.append("\t\t\t\treturn ruleResult;\n");
    w.append("\t\t\t}\n");
    w.append("\t\t} catch (Exception e) {\n");
    w.append("\t\t\tlog.error(e.getMessage(),e);\n");
    w.append("\t\t\treturn Result.emptyResult();");
    w.append("\n\t\t}\n\t\treturn Result.emptyResult();\n\t}\n\n");
    LinkedHashMap<String,Comparison> compListBySection=comparisons.get("logic");
    Iterator<Map.Entry<String,Comparison>> comparisonIteratorLogic=null;
    if (compListBySection != null) {
      comparisonIteratorLogic=compListBySection.entrySet().iterator();
      while (comparisonIteratorLogic.hasNext()) {
        Comparison comparison=comparisonIteratorLogic.next().getValue();
        comparison.writeComparisonList(w);
      }
    }
    w.append("\tprivate boolean evaluate_logic(Map<String, Object> parameters, LogicContext context, RuleProvider ruleProvider) throws LogicException {\n\n");
    evalListBySection=evaluateList.get("logic");
    if (evalListBySection == null) {
      evalListBySection=new LinkedList<MLMEvaluateElement>();
      this.evaluateList.put("logic",evalListBySection);
    }
    thisList=evalListBySection.listIterator(0);
    w.append("\t\tResult Gender = new Result(userVarMap.get(\"Gender\"));\n");
    for (    String uniqueKey : uniqueKeys) {
      w.append("\t\tResult " + uniqueKey + " = (Result) resultLookup.get(\""+ uniqueKey+ "\");\n");
    }
    w.append("\n");
    boolean skipReturn=false;
    Iterator<LogicAssignment> logicIterator=this.logicAssignments.iterator();
    if (compListBySection == null) {
      compListBySection=new LinkedHashMap<String,Comparison>();
      this.comparisons.put("logic",compListBySection);
    }
    ArrayList<Call> callBySection=this.calls.get("logic");
    Iterator<Call> callIterator=null;
    if (callBySection != null) {
      callIterator=callBySection.iterator();
      w.append("\t\tObject value = null;\n");
      w.append("\t\t\t\tString variable = null;\n");
      w.append("\t\t\t\tint varLen = 0;\n");
    }
    Iterator<Conclude> concludeIterator=this.concludes.iterator();
    comparisonIteratorLogic=compListBySection.entrySet().iterator();
    while (thisList.hasNext()) {
      skipReturn=WriteLogic(thisList.next(),w,logicIterator,comparisonIteratorLogic,concludeIterator,callIterator);
      w.flush();
    }
    if (!skipReturn) {
      w.append("\t\treturn false;\n");
    }
    w.append("\t}");
    w.append("\n\n");
  }
 catch (  Exception e) {
    System.err.println("Write Evaluate: " + e);
    e.printStackTrace();
  }
  return retValEval;
}
