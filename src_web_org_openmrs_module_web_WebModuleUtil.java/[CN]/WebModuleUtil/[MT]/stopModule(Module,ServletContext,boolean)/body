{
  String realPath=servletContext.getRealPath("");
  String absPath=realPath + "/WEB-INF/view/module/" + mod.getModuleId();
  File moduleWebFolder=new File(absPath.replace("/",File.separator));
  if (moduleWebFolder.exists()) {
    try {
      OpenmrsUtil.deleteDirectory(moduleWebFolder);
    }
 catch (    IOException io) {
      log.warn("Couldn't delete: " + moduleWebFolder.getAbsolutePath(),io);
    }
  }
  JarFile jarFile=null;
  try {
    File modFile=mod.getFile();
    jarFile=new JarFile(modFile);
    Enumeration<JarEntry> entries=jarFile.entries();
    while (entries.hasMoreElements()) {
      JarEntry entry=entries.nextElement();
      log.debug("Entry name: " + entry.getName());
      if (entry.getName().endsWith(".xml") && !entry.getName().equals("config.xml") && !entry.getName().endsWith("moduleApplicationContext.xml")) {
        absPath=realPath + "/WEB-INF/" + entry.getName();
        File moduleXmlFile=new File(absPath.replace("/",File.separator));
        if (moduleXmlFile.exists()) {
          System.gc();
          if (!moduleXmlFile.delete()) {
            moduleXmlFile.deleteOnExit();
            log.warn("Unable to delete xml file: " + moduleXmlFile.getAbsolutePath());
          }
        }
      }
    }
  }
 catch (  IOException io) {
    log.warn("Unable to delete files from module " + mod.getModuleId() + " in the web layer",io);
  }
 finally {
    if (jarFile != null) {
      try {
        jarFile.close();
      }
 catch (      IOException io) {
        log.warn("Couldn't close jar file: " + jarFile.getName(),io);
      }
    }
  }
  moduleServlets.remove(mod);
  InputStream inputStream=null;
  try {
    Document config=mod.getConfig();
    Element root=config.getDocumentElement();
    if (root.getElementsByTagName("dwr").getLength() > 0) {
      File f=new File(realPath + "/WEB-INF/dwr-modules.xml".replace("/",File.separator));
      inputStream=new FileInputStream(f);
      Document dwrmodulexml=getDWRModuleXML(inputStream,realPath);
      Element outputRoot=dwrmodulexml.getDocumentElement();
      NodeList nodeList=outputRoot.getChildNodes();
      int i=0;
      while (i < nodeList.getLength()) {
        Node current=nodeList.item(i);
        if ("allow".equals(current.getNodeName()) || "signatures".equals(current.getNodeName())) {
          NamedNodeMap attrs=current.getAttributes();
          Node attr=attrs.getNamedItem("moduleId");
          if (attr != null && mod.getModuleId().equals(attr.getNodeValue())) {
            outputRoot.removeChild(current);
          }
        }
 else         i++;
      }
      OpenmrsUtil.saveDocument(dwrmodulexml,f);
    }
  }
 catch (  FileNotFoundException e) {
    throw new ModuleException("/WEB-INF/dwr-modules.xml file doesn't exist.",e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException io) {
        log.error("Error while closing input stream",io);
      }
    }
  }
  try {
    if (dispatcherServlet != null)     dispatcherServlet.reInitFrameworkServlet();
    if (dwrServlet != null)     dwrServlet.reInitServlet();
  }
 catch (  ServletException se) {
    log.warn("Unable to reinitialize webapplicationcontext for dispatcherservlet for module: " + mod.getName(),se);
  }
  if (!skipRefresh)   refreshWAC(servletContext);
}
