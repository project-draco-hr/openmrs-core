{
  String page=httpRequest.getParameter("page");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  Writer writer=httpResponse.getWriter();
  if ("databasesetup.vm".equals(page)) {
    wizardModel.databaseConnection=httpRequest.getParameter("database_connection");
    checkForEmptyValue(wizardModel.databaseConnection,errors,"Database connection string");
    if ("yes".equals(httpRequest.getParameter("current_openmrs_database"))) {
      wizardModel.databaseName=httpRequest.getParameter("openmrs_current_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,"Current database name");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter("openmrs_new_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,"New database name");
      wizardModel.createDatabaseUsername=httpRequest.getParameter("create_database_username");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,"A user that has 'CREATE DATABASE' privileges");
      wizardModel.createDatabasePassword=httpRequest.getParameter("create_database_password");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,"Password for user with 'CREATE DATABASE' privileges");
    }
    if (errors.isEmpty()) {
      page="databasetablesanduser.vm";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if ("databasetablesanduser.vm".equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate("databasesetup.vm",referenceMap,writer);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables="yes".equals(httpRequest.getParameter("create_tables"));
    }
    wizardModel.addDemoData="yes".equals(httpRequest.getParameter("add_demo_data"));
    if ("yes".equals(httpRequest.getParameter("current_database_user"))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter("current_database_username");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,"Curent user account");
      wizardModel.currentDatabasePassword=httpRequest.getParameter("current_database_password");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,"Current user account password");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter("create_user_username");
      checkForEmptyValue(wizardModel.createUserUsername,errors,"A user that has 'CREATE USER' privileges");
      wizardModel.createUserPassword=httpRequest.getParameter("create_user_password");
      checkForEmptyValue(wizardModel.createUserPassword,errors,"Password for user that has 'CREATE USER' privileges");
    }
    if (errors.isEmpty()) {
      page="otherruntimeproperties.vm";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if ("otherruntimeproperties.vm".equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate("databasetablesanduser.vm",referenceMap,writer);
      return;
    }
    wizardModel.moduleWebAdmin="yes".equals(httpRequest.getParameter("module_web_admin"));
    wizardModel.autoUpdateDatabase="yes".equals(httpRequest.getParameter("auto_update_database"));
    if (wizardModel.createTables) {
      page="adminusersetup.vm";
    }
 else {
      page="implementationidsetup.vm";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if ("adminusersetup.vm".equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate("otherruntimeproperties.vm",referenceMap,writer);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter("new_admin_password");
    String adminUserConfirm=httpRequest.getParameter("new_admin_password_confirm");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add("Admin passwords don't match");
      renderTemplate("adminusersetup.vm",referenceMap,writer);
      return;
    }
    if (wizardModel.adminUserPassword.equals("")) {
      errors.add("An admin password is required");
      renderTemplate("adminusersetup.vm",referenceMap,writer);
      return;
    }
    try {
      OpenmrsUtil.validatePassword("admin",wizardModel.adminUserPassword,"admin");
    }
 catch (    PasswordException p) {
      errors.add("The password is not long enough, does not contain both uppercase characters and a number, or matches the username.");
      renderTemplate("adminusersetup.vm",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page="implementationidsetup.vm";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if ("implementationidsetup.vm".equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (wizardModel.createTables)       renderTemplate("adminusersetup.vm",referenceMap,writer);
 else       renderTemplate("otherruntimeproperties.vm",referenceMap,writer);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter("implementation_name");
    wizardModel.implementationId=httpRequest.getParameter("implementation_id");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter("pass_phrase");
    wizardModel.implementationIdDescription=httpRequest.getParameter("description");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add("Implementation ID cannot contain '^' or '|'");
      renderTemplate("implementationidsetup.vm",referenceMap,writer);
      return;
    }
    if (errors.isEmpty()) {
      page="wizardcomplete.vm";
    }
    renderTemplate(page,referenceMap,writer);
  }
 else   if ("wizardcomplete.vm".equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate("implementationidsetup.vm",referenceMap,writer);
      return;
    }
    initJob=new InitializationCompletion();
    initJob.start();
    renderTemplate("progress.vm",referenceMap,writer);
  }
 else   if ("progress.vm".equals(page)) {
    if (initJob != null) {
      if (initJob.hasErrors()) {
        initJob.waitForCompletion();
        page=initJob.getErrorPage();
        errors.addAll(initJob.getErrors());
        renderTemplate(page,referenceMap,writer);
      }
 else       if (initJob.isCompleted()) {
        initializationComplete=true;
        httpResponse.sendRedirect("/" + WebConstants.WEBAPP_NAME);
      }
 else {
        wizardModel.actionCounter=initJob.getStepsComplete();
        wizardModel.lastActionMessage=initJob.getMessage();
        Appender appender=Logger.getRootLogger().getAppender("MEMORY_APPENDER");
        if (appender instanceof MemoryAppender) {
          MemoryAppender memoryAppender=(MemoryAppender)appender;
          wizardModel.logLines=memoryAppender.getLogLines();
        }
        page="progress.vm";
        renderTemplate(page,referenceMap,writer);
      }
    }
  }
}
