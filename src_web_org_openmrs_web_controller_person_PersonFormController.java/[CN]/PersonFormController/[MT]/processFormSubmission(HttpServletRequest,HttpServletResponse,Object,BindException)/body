{
  Person person=(Person)obj;
  if (!Context.isAuthenticated()) {
    errors.reject("auth.invalid");
  }
 else {
    if (person.getPersonName().getGivenName() == "")     errors.rejectValue("names[0].givenName","Person.name.required");
    if (person.getPersonName().getFamilyName() == "")     errors.rejectValue("names[0].familyName","Person.name.required");
    if (person.getGender() == null || person.getGender().equals(""))     errors.rejectValue("gender","Person.gender.required");
    for (    PersonAttributeType type : Context.getPersonService().getPersonAttributeTypes(PERSON_TYPE.PERSON,null)) {
      String paramName=type.getPersonAttributeTypeId().toString();
      String value=request.getParameter(paramName);
      if (value != null) {
        PersonAttribute attribute=new PersonAttribute(type,value);
        try {
          Object hydratedObject=attribute.getHydratedObject();
          if (hydratedObject == null || "".equals(hydratedObject.toString())) {
            attribute.setValue("");
          }
 else           if (hydratedObject instanceof Attributable) {
            attribute.setValue(((Attributable)hydratedObject).serialize());
          }
 else           if (!hydratedObject.getClass().getName().equals(type.getFormat()))           throw new APIException();
        }
 catch (        APIException e) {
          errors.rejectValue("attributes","Invalid value for " + type.getName() + ": '"+ value+ "'");
          log.warn("Got an invalid value: " + value + " while setting personAttributeType id #"+ paramName,e);
          attribute.setValue("");
        }
        person.addAttribute(attribute);
      }
    }
    if (person.getBirthdate() != null) {
      if (person.getBirthdate().after(new Date()))       errors.rejectValue("birthdate","error.date.future");
 else {
        Calendar c=Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.YEAR,-120);
        if (person.getBirthdate().before(c.getTime())) {
          errors.rejectValue("birthdate","error.date.nonsensical");
        }
      }
    }
    if (person.isPersonVoided())     ValidationUtils.rejectIfEmptyOrWhitespace(errors,"voidReason","error.null");
    if (person.isDead() && (person.getCauseOfDeath() == null))     errors.rejectValue("causeOfDeath","Patient.dead.causeOfDeathNull");
  }
  if (log.isDebugEnabled())   log.debug("Person Attributes: \n" + person.printAttributes());
  return super.processFormSubmission(request,response,person,errors);
}
