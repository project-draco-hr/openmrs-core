{
  Encounter enc=new Encounter();
  assertNotNull(enc.getObs());
  assertEquals(enc.getObs().size(),0);
  assertNotNull(enc.getObsAtTopLevel(true));
  assertEquals(enc.getObsAtTopLevel(true).size(),0);
  assertNotNull(enc.getAllObs(false));
  assertEquals(enc.getAllObs(false).size(),0);
  Obs o=new Obs();
  o.setDateCreated(new Date());
  o.setLocation(new Location(1));
  o.setObsDatetime(new Date());
  o.setPerson(new Patient(2));
  o.setValueText("childObs");
  enc.addObs(o);
  assertNotNull(enc.getObs());
  assertEquals(1,enc.getObs().size());
  assertNotNull(enc.getObsAtTopLevel(true));
  assertEquals(1,enc.getObsAtTopLevel(true).size());
  assertNotNull(enc.getObsAtTopLevel(false));
  assertEquals(1,enc.getObsAtTopLevel(false).size());
  assertNotNull(enc.getAllObs(true));
  assertEquals(enc.getAllObs(true).size(),1);
  assertNotNull(enc.getAllObs(false));
  assertEquals(enc.getAllObs(false).size(),1);
  o.setVoided(true);
  assertEquals(enc.getObs().size(),0);
  assertNotNull(enc.getObsAtTopLevel(true));
  assertEquals(enc.getObsAtTopLevel(true).size(),1);
  assertNotNull(enc.getObsAtTopLevel(false));
  assertEquals(enc.getObsAtTopLevel(false).size(),0);
  assertNotNull(enc.getAllObs(true));
  assertEquals(enc.getAllObs(true).size(),1);
  assertNotNull(enc.getAllObs(false));
  assertEquals(enc.getAllObs(false).size(),0);
  o.setVoided(false);
  Obs oChild=new Obs();
  oChild.setDateCreated(new Date());
  oChild.setLocation(new Location(1));
  oChild.setObsDatetime(new Date());
  oChild.setPerson(new Patient(2));
  oChild.setValueText("childObs");
  o.addGroupMember(oChild);
  assertEquals(1,enc.getObs().size());
  for (  Obs oTmp : enc.getObs()) {
    assertFalse(oTmp.isObsGrouping());
  }
  assertNotNull(enc.getObsAtTopLevel(true));
  assertEquals(enc.getObsAtTopLevel(true).size(),1);
  assertNotNull(enc.getObsAtTopLevel(false));
  assertEquals(enc.getObsAtTopLevel(false).size(),1);
  for (  Obs oTmp : enc.getObsAtTopLevel(false)) {
    assertTrue(oTmp.isObsGrouping());
  }
  assertNotNull(enc.getAllObs(true));
  assertEquals(enc.getAllObs(true).size(),1);
  assertNotNull(enc.getAllObs(false));
  assertEquals(enc.getAllObs(false).size(),1);
  for (  Obs oTmp : enc.getAllObs(false)) {
    assertTrue(oTmp.isObsGrouping());
  }
  o.setVoided(true);
  assertNotNull(enc.getObsAtTopLevel(true));
  assertEquals(enc.getObsAtTopLevel(true).size(),1);
  assertNotNull(enc.getObsAtTopLevel(false));
  assertEquals(enc.getObsAtTopLevel(false).size(),0);
  assertNotNull(enc.getAllObs(true));
  assertEquals(enc.getAllObs(true).size(),1);
  assertNotNull(enc.getAllObs(false));
  assertEquals(enc.getAllObs(false).size(),0);
  o.setVoided(false);
  oChild.setEncounter(enc);
  enc.addObs(oChild);
  assertEquals(enc.getObs().size(),1);
  for (  Obs oTmp : enc.getObs()) {
    assertFalse(oTmp.isObsGrouping());
  }
  assertEquals(enc.getObsAtTopLevel(false).size(),1);
  for (  Obs oTmp : enc.getObsAtTopLevel(false)) {
    assertTrue(oTmp.isObsGrouping());
  }
  assertEquals(enc.getAllObs(true).size(),2);
  int childGroups=0;
  int parentGroups=0;
  for (  Obs oTmp : enc.getAllObs(false)) {
    if (oTmp.isObsGrouping())     parentGroups++;
 else     childGroups++;
  }
  assertEquals(childGroups,1);
  assertEquals(parentGroups,1);
  o.removeGroupMember(oChild);
  assertEquals(enc.getObs().size(),2);
  assertEquals(enc.getObsAtTopLevel(false).size(),2);
  assertEquals(enc.getAllObs(true).size(),2);
  o.addGroupMember(oChild);
  Obs o3=new Obs();
  o3.setDateCreated(new Date());
  o3.setLocation(new Location(1));
  o3.setObsDatetime(new Date());
  o3.setPerson(new Patient(2));
  o3.setValueText("childObs");
  oChild.addGroupMember(o3);
  Obs o4=new Obs();
  o4.setDateCreated(new Date());
  o4.setLocation(new Location(1));
  o4.setObsDatetime(new Date());
  o4.setPerson(new Patient(2));
  o4.setValueText("childObs");
  oChild.addGroupMember(o4);
  assertEquals(enc.getObs().size(),2);
  Obs o5=new Obs();
  o5.setDateCreated(new Date());
  o5.setLocation(new Location(1));
  o5.setObsDatetime(new Date());
  o5.setPerson(new Patient(2));
  o5.setValueText("childObs");
  o3.addGroupMember(o5);
  assertEquals(2,enc.getObs().size());
  Obs o6=new Obs();
  o6.setDateCreated(new Date());
  o6.setLocation(new Location(1));
  o6.setObsDatetime(new Date());
  o6.setPerson(new Patient(2));
  o6.setValueText("childObs");
  o3.addGroupMember(o6);
  assertEquals(enc.getObs().size(),3);
  for (  Obs oTmp : enc.getObs()) {
    assertFalse(oTmp.isObsGrouping());
  }
  Obs o7=new Obs();
  o7.setDateCreated(new Date());
  o7.setLocation(new Location(1));
  o7.setObsDatetime(new Date());
  o7.setPerson(new Patient(2));
  o7.setValueText("childObs");
  Obs o8=new Obs();
  o8.setDateCreated(new Date());
  o8.setLocation(new Location(1));
  o8.setObsDatetime(new Date());
  o8.setPerson(new Patient(2));
  o8.setValueText("childObs");
  o6.addGroupMember(o7);
  o6.addGroupMember(o8);
  assertEquals(enc.getObs().size(),4);
  o6.setVoided(true);
  assertEquals(enc.getObs().size(),2);
}
