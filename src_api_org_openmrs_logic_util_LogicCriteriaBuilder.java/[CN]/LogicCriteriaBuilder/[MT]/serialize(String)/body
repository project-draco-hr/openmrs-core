{
  LogicCriteria criteria=null;
  log.info("Criteria string: " + criteriaString);
  String[] elements=criteriaString.split(CRITERION_PATTERN);
  log.info("Elements: " + elements);
  String token=extractOperand(elements[0]);
  log.info("Token: " + token);
  criteria=new LogicCriteria(token);
  for (int i=1; i < elements.length; i++) {
    String expression=elements[i].toUpperCase().trim();
    String operand=extractOperand(expression);
    log.info("Expression: " + expression);
    log.info("Operand: " + operand);
    if (expression.toUpperCase().startsWith("AFTER")) {
      Date value=DATE_FORMATTER.parse(operand);
      criteria=criteria.after(value);
    }
 else     if (expression.toUpperCase().startsWith("AND")) {
      throw new UnsupportedOperationException();
    }
 else     if (expression.toUpperCase().startsWith("ASOF")) {
      Date value=DATE_FORMATTER.parse(operand);
      criteria=criteria.asOf(value);
    }
 else     if (expression.toUpperCase().startsWith("BEFORE")) {
      Date value=DATE_FORMATTER.parse(operand);
      criteria=criteria.before(value);
    }
 else     if (expression.toUpperCase().startsWith("CONTAINS")) {
      criteria=criteria.contains(operand);
    }
 else     if (expression.toUpperCase().startsWith("EQUALS")) {
      criteria=criteria.equalTo(operand);
    }
 else     if (expression.toUpperCase().startsWith("EXISTS")) {
      criteria=criteria.exists();
    }
 else     if (expression.toUpperCase().startsWith("FIRST")) {
      criteria=criteria.first();
    }
 else     if (expression.toUpperCase().startsWith("GT")) {
      Float value=(Float)DecimalFormat.getInstance().parse(operand);
      criteria=criteria.gt(value);
    }
 else     if (expression.toUpperCase().startsWith("LAST")) {
      criteria=criteria.last();
    }
 else     if (expression.toUpperCase().startsWith("LT")) {
      Float value=(Float)DecimalFormat.getInstance().parse(operand);
      criteria=criteria.lt(value);
    }
 else     if (expression.toUpperCase().startsWith("NOT")) {
      throw new UnsupportedOperationException();
    }
 else     if (expression.toUpperCase().startsWith("OR")) {
      throw new UnsupportedOperationException();
    }
 else     if (expression.toUpperCase().startsWith("WITHIN")) {
      Float value=(Float)DecimalFormat.getInstance().parse(operand);
      criteria=criteria.lt(value);
    }
  }
  return criteria;
}
