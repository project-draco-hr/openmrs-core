{
  HashSet set=new HashSet();
  MimeType m1=new MimeType();
  MimeType m2=new MimeType();
  m1.setMimeType("test1");
  m2.setMimeType("test2");
  set.add(m1);
  set.add(m2);
  as.createMimeType(m1);
  assertTrue(set.size() == 2);
  assertNotNull(set.contains(m1));
  MimeType mimeType=new MimeType();
  mimeType.setMimeType("testing");
  mimeType.setDescription("desc");
  as.createMimeType(mimeType);
  MimeType newMimeType=obsService.getMimeType(mimeType.getMimeTypeId());
  assertNotNull(newMimeType);
  List<MimeType> mimeTypes=obsService.getMimeTypes();
  assertNotNull(mimeTypes);
  boolean found=false;
  for (Iterator i=mimeTypes.iterator(); i.hasNext(); ) {
    MimeType mimeType2=(MimeType)i.next();
    assertNotNull(mimeType);
    assertTrue(mimeType.equals(mimeType2) == (mimeType.getMimeTypeId().equals(mimeType2.getMimeTypeId())));
    if (mimeType.equals(mimeType2))     found=true;
  }
  assertTrue(found);
  newMimeType.setMimeType("another test");
  as.updateMimeType(newMimeType);
  MimeType newerMimeType=obsService.getMimeType(newMimeType.getMimeTypeId());
  assertTrue(newerMimeType.getMimeType().equals(newMimeType.getMimeType()));
  as.deleteMimeType(newerMimeType);
  assertNull(obsService.getMimeType(newMimeType.getMimeTypeId()));
}
