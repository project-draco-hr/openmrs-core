{
  Runnable r=new Runnable(){
    /** 
 * TODO split this up into multiple testable methods
 * @see java.lang.Runnable#run()
 */
    public void run(){
      try {
        String connectionUsername;
        String connectionPassword;
        if (!wizardModel.hasCurrentOpenmrsDatabase) {
          setMessage("Create database");
          setExecutingTask(WizardTask.CREATE_SCHEMA);
          String sql=null;
          if (wizardModel.databaseConnection.contains("mysql")) {
            sql="create database if not exists `?` default character set utf8";
          }
 else           if (wizardModel.databaseConnection.contains("postgresql")) {
            sql="create database `?` encoding 'utf8'";
          }
 else {
            sql="create database `?`";
          }
          int result=executeStatement(false,wizardModel.createDatabaseUsername,wizardModel.createDatabasePassword,sql,wizardModel.databaseName);
          if (result < 0) {
            reportError(ErrorMessageConstants.ERROR_DB_CREATE_NEW,DEFAULT_PAGE);
            return;
          }
 else {
            wizardModel.workLog.add("Created database " + wizardModel.databaseName);
          }
          addExecutedTask(WizardTask.CREATE_SCHEMA);
        }
        if (wizardModel.createDatabaseUser) {
          setMessage("Create database user");
          setExecutingTask(WizardTask.CREATE_DB_USER);
          connectionUsername=wizardModel.databaseName + "_user";
          if (connectionUsername.length() > 16)           connectionUsername=wizardModel.databaseName.substring(0,11) + "_user";
          connectionPassword="";
          String chars="acdeghijklmnopqrtvwxyzACDEGHIJKLMNOPQRTVWXYZ0123456789.|~@#^&";
          Random r=new Random();
          for (int x=0; x < 12; x++) {
            connectionPassword+=chars.charAt(r.nextInt(chars.length()));
          }
          String host="'%'";
          if (wizardModel.databaseConnection.contains("localhost")) {
            host="'localhost'";
          }
          String sql="drop user '?'@" + host;
          executeStatement(true,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername);
          sql="create user '?'@" + host + " identified by '?'";
          if (-1 != executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,connectionUsername,connectionPassword)) {
            wizardModel.workLog.add("Created user " + connectionUsername);
          }
 else {
            reportError(ErrorMessageConstants.ERROR_DB_CREATE_DB_USER,DEFAULT_PAGE);
            return;
          }
          sql="GRANT ALL ON `?`.* TO '?'@" + host;
          int result=executeStatement(false,wizardModel.createUserUsername,wizardModel.createUserPassword,sql,wizardModel.databaseName,connectionUsername);
          if (result < 0) {
            reportError(ErrorMessageConstants.ERROR_DB_GRANT_PRIV,DEFAULT_PAGE);
            return;
          }
 else {
            wizardModel.workLog.add("Granted user " + connectionUsername + " all privileges to database "+ wizardModel.databaseName);
          }
          addExecutedTask(WizardTask.CREATE_DB_USER);
        }
 else {
          connectionUsername=wizardModel.currentDatabaseUsername;
          connectionPassword=wizardModel.currentDatabasePassword;
        }
        String finalDatabaseConnectionString=wizardModel.databaseConnection.replace("@DBNAME@",wizardModel.databaseName);
        if (!verifyConnection(connectionUsername,connectionPassword,finalDatabaseConnectionString)) {
          setMessage("Verify that the database connection works");
          reportError("Unable to connect to database",DEFAULT_PAGE);
          return;
        }
        Properties runtimeProperties=new Properties();
        runtimeProperties.put("connection.url",finalDatabaseConnectionString);
        runtimeProperties.put("connection.username",connectionUsername);
        runtimeProperties.put("connection.password",connectionPassword);
        if (StringUtils.hasText(wizardModel.databaseDriver))         runtimeProperties.put("connection.driver_class",wizardModel.databaseDriver);
        if (finalDatabaseConnectionString.contains("postgres"))         runtimeProperties.put("hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect");
        if (finalDatabaseConnectionString.contains("sqlserver"))         runtimeProperties.put("hibernate.dialect","org.hibernate.dialect.SQLServerDialect");
        runtimeProperties.put("module.allow_web_admin",wizardModel.moduleWebAdmin.toString());
        runtimeProperties.put("auto_update_database",wizardModel.autoUpdateDatabase.toString());
        runtimeProperties.put(OpenmrsConstants.ENCRYPTION_VECTOR_RUNTIME_PROPERTY,Base64.encode(Security.generateNewInitVector()));
        runtimeProperties.put(OpenmrsConstants.ENCRYPTION_KEY_RUNTIME_PROPERTY,Base64.encode(Security.generateNewSecretKey()));
        Properties properties=Context.getRuntimeProperties();
        properties.putAll(runtimeProperties);
        runtimeProperties=properties;
        Context.setRuntimeProperties(runtimeProperties);
        /** 
 * A callback class that prints out info about liquibase changesets
 */
class PrintingChangeSetExecutorCallback implements ChangeSetExecutorCallback {
          private int i=1;
          private String message;
          public PrintingChangeSetExecutorCallback(          String message){
            this.message=message;
          }
          /** 
 * @see org.openmrs.util.DatabaseUpdater.ChangeSetExecutorCallback#executing(liquibase.ChangeSet,int)
 */
          @Override public void executing(          ChangeSet changeSet,          int numChangeSetsToRun){
            setMessage(message + " (" + i+++ "/"+ numChangeSetsToRun+ "): Author: "+ changeSet.getAuthor()+ " Comments: "+ changeSet.getComments()+ " Description: "+ changeSet.getDescription());
            setCompletedPercentage(Math.round(i * 100 / numChangeSetsToRun));
          }
        }
        if (wizardModel.createTables) {
          try {
            setMessage("Executing " + LIQUIBASE_SCHEMA_DATA);
            setExecutingTask(WizardTask.CREATE_TABLES);
            DatabaseUpdater.executeChangelog(LIQUIBASE_SCHEMA_DATA,null,new PrintingChangeSetExecutorCallback("OpenMRS schema file"));
            addExecutedTask(WizardTask.CREATE_TABLES);
            setCompletedPercentage(0);
            setExecutingTask(WizardTask.ADD_CORE_DATA);
            DatabaseUpdater.executeChangelog(LIQUIBASE_CORE_DATA,null,new PrintingChangeSetExecutorCallback("OpenMRS core data file"));
            wizardModel.workLog.add("Created database tables and added core data");
            addExecutedTask(WizardTask.ADD_CORE_DATA);
          }
 catch (          Exception e) {
            reportError(ErrorMessageConstants.ERROR_DB_CREATE_TABLES_OR_ADD_DEMO_DATA,DEFAULT_PAGE,e.getMessage());
            log.warn("Error while trying to create tables and demo data",e);
          }
        }
        if (wizardModel.importTestData) {
          try {
            setMessage("Importing test data");
            setExecutingTask(WizardTask.IMPORT_TEST_DATA);
            setCompletedPercentage(0);
            try {
              InputStream inData=TestInstallUtil.getResourceInputStream(wizardModel.remoteUrl + RELEASE_TESTING_MODULE_PATH + "generateTestDataSet.form",wizardModel.remoteUsername,wizardModel.remotePassword);
              if (inData == null) {
                reportError(ErrorMessageConstants.ERROR_DB_IMPORT_TEST_DATA,DEFAULT_PAGE,"");
                return;
              }
              setCompletedPercentage(40);
              setMessage("Loading imported test data...");
              importTestDataSet(inData,finalDatabaseConnectionString,connectionUsername,connectionPassword);
              wizardModel.workLog.add("Imported test data");
              addExecutedTask(WizardTask.IMPORT_TEST_DATA);
              setCompletedPercentage(0);
              setMessage("Importing modules from remote server...");
              setExecutingTask(WizardTask.ADD_MODULES);
              InputStream inModules=TestInstallUtil.getResourceInputStream(wizardModel.remoteUrl + RELEASE_TESTING_MODULE_PATH + "getModules.htm",wizardModel.remoteUsername,wizardModel.remotePassword);
              if (inModules == null) {
                reportError(ErrorMessageConstants.ERROR_DB_UNABLE_TO_FETCH_MODULES,DEFAULT_PAGE,"");
                return;
              }
              setCompletedPercentage(90);
              setMessage("Adding imported modules...");
              if (!TestInstallUtil.addZippedTestModules(inModules)) {
                reportError(ErrorMessageConstants.ERROR_DB_UNABLE_TO_ADD_MODULES,DEFAULT_PAGE,"");
                return;
              }
 else {
                wizardModel.workLog.add("Added Modules");
                addExecutedTask(WizardTask.ADD_MODULES);
              }
            }
 catch (            APIAuthenticationException e) {
              log.warn("Unable to authenticate as a User with the System Developer role");
              reportError(ErrorMessageConstants.UPDATE_ERROR_UNABLE_AUTHENTICATE,TESTING_REMOTE_DETAILS_SETUP,"");
              return;
            }
          }
 catch (          Exception e) {
            reportError(ErrorMessageConstants.ERROR_DB_IMPORT_TEST_DATA,DEFAULT_PAGE,e.getMessage());
            log.warn("Error while trying to import test data",e);
            return;
          }
        }
        if (wizardModel.createTables && wizardModel.addDemoData) {
          try {
            setMessage("Adding demo data");
            setCompletedPercentage(0);
            setExecutingTask(WizardTask.ADD_DEMO_DATA);
            DatabaseUpdater.executeChangelog(LIQUIBASE_DEMO_DATA,null,new PrintingChangeSetExecutorCallback("OpenMRS demo patients, users, and forms"));
            wizardModel.workLog.add("Added demo data");
            addExecutedTask(WizardTask.ADD_DEMO_DATA);
          }
 catch (          Exception e) {
            reportError(ErrorMessageConstants.ERROR_DB_CREATE_TABLES_OR_ADD_DEMO_DATA,DEFAULT_PAGE,e.getMessage());
            log.warn("Error while trying to add demo data",e);
          }
        }
        try {
          setMessage("Updating the database to the latest version");
          setCompletedPercentage(0);
          setExecutingTask(WizardTask.UPDATE_TO_LATEST);
          DatabaseUpdater.executeChangelog(null,null,new PrintingChangeSetExecutorCallback("Updating database tables to latest version "));
          addExecutedTask(WizardTask.UPDATE_TO_LATEST);
        }
 catch (        Exception e) {
          reportError(ErrorMessageConstants.ERROR_DB_UPDATE_TO_LATEST,DEFAULT_PAGE,e.getMessage());
          log.warn("Error while trying to update to the latest database version",e);
          return;
        }
        setExecutingTask(null);
        setMessage("Starting OpenMRS");
        ContextLoader contextLoader=new ContextLoader();
        contextLoader.initWebApplicationContext(filterConfig.getServletContext());
        try {
          Context.openSession();
          Listener.loadBundledModules(filterConfig.getServletContext());
          Context.startup(runtimeProperties);
        }
 catch (        DatabaseUpdateException updateEx) {
          log.warn("Error while running the database update file",updateEx);
          reportError(ErrorMessageConstants.ERROR_DB_UPDATE,DEFAULT_PAGE,updateEx.getMessage());
          return;
        }
catch (        InputRequiredException inputRequiredEx) {
          log.warn("Unable to continue because user input is required for the db updates and we cannot do anything about that right now");
          reportError(ErrorMessageConstants.ERROR_INPUT_REQ,DEFAULT_PAGE);
          return;
        }
catch (        MandatoryModuleException mandatoryModEx) {
          log.warn("A mandatory module failed to start. Fix the error or unmark it as mandatory to continue.",mandatoryModEx);
          reportError(ErrorMessageConstants.ERROR_MANDATORY_MOD_REQ,DEFAULT_PAGE,mandatoryModEx.getMessage());
          return;
        }
catch (        OpenmrsCoreModuleException coreModEx) {
          log.warn("A core module failed to start. Make sure that all core modules (with the required minimum versions) are installed and starting properly.",coreModEx);
          reportError(ErrorMessageConstants.ERROR_CORE_MOD_REQ,DEFAULT_PAGE,coreModEx.getMessage());
          return;
        }
        if (!wizardModel.implementationId.equals("")) {
          try {
            Context.addProxyPrivilege(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES);
            Context.addProxyPrivilege(PrivilegeConstants.MANAGE_CONCEPT_SOURCES);
            Context.addProxyPrivilege(PrivilegeConstants.VIEW_CONCEPT_SOURCES);
            Context.addProxyPrivilege(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID);
            ImplementationId implId=new ImplementationId();
            implId.setName(wizardModel.implementationIdName);
            implId.setImplementationId(wizardModel.implementationId);
            implId.setPassphrase(wizardModel.implementationIdPassPhrase);
            implId.setDescription(wizardModel.implementationIdDescription);
            Context.getAdministrationService().setImplementationId(implId);
          }
 catch (          Throwable t) {
            reportError(ErrorMessageConstants.ERROR_SET_INPL_ID,DEFAULT_PAGE,t.getMessage());
            log.warn("Implementation ID could not be set.",t);
            Context.shutdown();
            WebModuleUtil.shutdownModules(filterConfig.getServletContext());
            contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
            return;
          }
 finally {
            Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_GLOBAL_PROPERTIES);
            Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_CONCEPT_SOURCES);
            Context.removeProxyPrivilege(PrivilegeConstants.VIEW_CONCEPT_SOURCES);
            Context.removeProxyPrivilege(PrivilegeConstants.MANAGE_IMPLEMENTATION_ID);
          }
        }
        try {
          if (wizardModel.createTables) {
            Context.authenticate("admin","test");
            Context.getUserService().changePassword("test",wizardModel.adminUserPassword);
            Context.logout();
          }
          Listener.performWebStartOfModules(filterConfig.getServletContext());
          SchedulerUtil.startup(runtimeProperties);
        }
 catch (        Throwable t) {
          Context.shutdown();
          WebModuleUtil.shutdownModules(filterConfig.getServletContext());
          contextLoader.closeWebApplicationContext(filterConfig.getServletContext());
          reportError(ErrorMessageConstants.ERROR_COMPLETE_STARTUP,DEFAULT_PAGE,t.getMessage());
          log.warn("Unable to complete the startup.",t);
          return;
        }
        FileOutputStream fos=null;
        try {
          fos=new FileOutputStream(getRuntimePropertiesFile());
          OpenmrsUtil.storeProperties(runtimeProperties,fos,"Auto generated by OpenMRS initialization wizard");
          wizardModel.workLog.add("Saved runtime properties file " + getRuntimePropertiesFile());
          wizardModel.workLog.add("Adjusting file posix properties to user readonly");
          if (getRuntimePropertiesFile().setReadable(false,false) && getRuntimePropertiesFile().setReadable(true))           wizardModel.workLog.add("Successfully adjusted RuntimePropertiesFile to disallow world to read it");
 else           wizardModel.workLog.add("Unable to adjust RuntimePropertiesFile to disallow world to read it");
        }
  finally {
          if (fos != null) {
            fos.close();
          }
        }
        Context.closeSession();
      }
 catch (      IOException e) {
        reportError(ErrorMessageConstants.ERROR_COMPLETE_STARTUP,DEFAULT_PAGE,e.getMessage());
      }
 finally {
        if (!hasErrors()) {
          setInitializationComplete(true);
          FilterUtil.storeLocale(wizardModel.localeToSave);
        }
        setInstallationStarted(false);
      }
    }
  }
;
  thread=new Thread(r);
}
