{
  String page=httpRequest.getParameter("page");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  if (httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE) != null) {
    referenceMap.put(FilterUtil.LOCALE_ATTRIBUTE,httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
  }
  if (isInstallationStarted()) {
    httpResponse.setContentType("text/html");
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
    return;
  }
  if (isInstallationStarted()) {
    httpResponse.setContentType("text/html");
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
    return;
  }
  if (DEFAULT_PAGE.equals(page)) {
    File runtimeProperties=getRuntimePropertiesFile();
    if (!runtimeProperties.exists()) {
      try {
        runtimeProperties.createNewFile();
        wizardModel.canCreate=true;
        wizardModel.cannotCreateErrorMessage="";
      }
 catch (      IOException io) {
        wizardModel.canCreate=false;
        wizardModel.cannotCreateErrorMessage=io.getMessage();
      }
      wizardModel.canWrite=runtimeProperties.canWrite();
      runtimeProperties.delete();
    }
 else {
      wizardModel.canWrite=runtimeProperties.canWrite();
    }
    wizardModel.runtimePropertiesPath=runtimeProperties.getAbsolutePath();
    checkLocaleAttributes(httpRequest);
    referenceMap.put(FilterUtil.LOCALE_ATTRIBUTE,httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
    log.info("Locale stored in session is " + httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
    httpResponse.setContentType("text/html");
    renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
  }
 else   if (INSTALL_METHOD.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      referenceMap.put(FilterUtil.REMEMBER_ATTRIBUTE,httpRequest.getSession().getAttribute(FilterUtil.REMEMBER_ATTRIBUTE) != null);
      referenceMap.put(FilterUtil.LOCALE_ATTRIBUTE,httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
      renderTemplate(CHOOSE_LANG,referenceMap,httpResponse);
      return;
    }
    wizardModel.installMethod=httpRequest.getParameter("install_method");
    if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
      page=SIMPLE_SETUP;
    }
 else     if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {
      page=TESTING_PRODUCTION_URL_SETUP;
    }
 else {
      page=DATABASE_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (SIMPLE_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseConnection=Context.getRuntimeProperties().getProperty("connection.url",wizardModel.databaseConnection);
    wizardModel.createDatabaseUsername=Context.getRuntimeProperties().getProperty("connection.username",wizardModel.createDatabaseUsername);
    wizardModel.createUserUsername=wizardModel.createDatabaseUsername;
    wizardModel.databaseRootPassword=httpRequest.getParameter("database_root_password");
    checkForEmptyValue(wizardModel.databaseRootPassword,errors,ErrorMessageConstants.ERROR_DB_PSDW_REQ);
    wizardModel.hasCurrentOpenmrsDatabase=false;
    wizardModel.createTables=true;
    wizardModel.createDatabasePassword=wizardModel.databaseRootPassword;
    wizardModel.addDemoData="yes".equals(httpRequest.getParameter("add_demo_data"));
    wizardModel.hasCurrentDatabaseUser=false;
    wizardModel.createDatabaseUser=true;
    wizardModel.createUserPassword=wizardModel.databaseRootPassword;
    wizardModel.moduleWebAdmin=true;
    wizardModel.autoUpdateDatabase=false;
    wizardModel.adminUserPassword=InitializationWizardModel.ADMIN_DEFAULT_PASSWORD;
    try {
      loadedDriverString=DatabaseUtil.loadDatabaseDriver(wizardModel.databaseConnection,wizardModel.databaseDriver);
    }
 catch (    ClassNotFoundException e) {
      errors.put(ErrorMessageConstants.ERROR_DB_DRIVER_CLASS_REQ,null);
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (InitializationWizardModel.INSTALL_METHOD_TESTING.equals(wizardModel.installMethod)) {
        page=TESTING_AUTHENTICATION_SETUP;
      }
 else {
        renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      }
      return;
    }
    wizardModel.databaseConnection=httpRequest.getParameter("database_connection");
    checkForEmptyValue(wizardModel.databaseConnection,errors,ErrorMessageConstants.ERROR_DB_CONN_REQ);
    wizardModel.databaseDriver=httpRequest.getParameter("database_driver");
    checkForEmptyValue(wizardModel.databaseConnection,errors,ErrorMessageConstants.ERROR_DB_DRIVER_REQ);
    loadedDriverString=loadDriver(wizardModel.databaseConnection,wizardModel.databaseDriver);
    if (!StringUtils.hasText(loadedDriverString)) {
      errors.put(ErrorMessageConstants.ERROR_DB_DRIVER_CLASS_REQ,null);
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    if ("yes".equals(httpRequest.getParameter("current_openmrs_database"))) {
      wizardModel.databaseName=httpRequest.getParameter("openmrs_current_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,ErrorMessageConstants.ERROR_DB_CURR_NAME_REQ);
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter("openmrs_new_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,ErrorMessageConstants.ERROR_DB_NEW_NAME_REQ);
      wizardModel.createDatabaseUsername=httpRequest.getParameter("create_database_username");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,ErrorMessageConstants.ERROR_DB_USER_NAME_REQ);
      wizardModel.createDatabasePassword=httpRequest.getParameter("create_database_password");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,ErrorMessageConstants.ERROR_DB_USER_PSWD_REQ);
    }
    if (errors.isEmpty()) {
      page=DATABASE_TABLES_AND_USER;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_TABLES_AND_USER.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(DATABASE_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables="yes".equals(httpRequest.getParameter("create_tables"));
    }
    wizardModel.addDemoData="yes".equals(httpRequest.getParameter("add_demo_data"));
    if ("yes".equals(httpRequest.getParameter("current_database_user"))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter("current_database_username");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,ErrorMessageConstants.ERROR_DB_CUR_USER_NAME_REQ);
      wizardModel.currentDatabasePassword=httpRequest.getParameter("current_database_password");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,ErrorMessageConstants.ERROR_DB_CUR_USER_PSWD_REQ);
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter("create_user_username");
      checkForEmptyValue(wizardModel.createUserUsername,errors,ErrorMessageConstants.ERROR_DB_USER_NAME_REQ);
      wizardModel.createUserPassword=httpRequest.getParameter("create_user_password");
      checkForEmptyValue(wizardModel.createUserPassword,errors,ErrorMessageConstants.ERROR_DB_USER_PSWD_REQ);
    }
    if (errors.isEmpty()) {
      page=OTHER_RUNTIME_PROPS;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (OTHER_RUNTIME_PROPS.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(DATABASE_TABLES_AND_USER,referenceMap,httpResponse);
      return;
    }
    wizardModel.moduleWebAdmin="yes".equals(httpRequest.getParameter("module_web_admin"));
    wizardModel.autoUpdateDatabase="yes".equals(httpRequest.getParameter("auto_update_database"));
    if (wizardModel.createTables) {
      page=ADMIN_USER_SETUP;
    }
 else {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (ADMIN_USER_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter("new_admin_password");
    String adminUserConfirm=httpRequest.getParameter("new_admin_password_confirm");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.put(ErrorMessageConstants.ERROR_DB_ADM_PSWDS_MATCH,null);
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.adminUserPassword.equals("")) {
      errors.put(ErrorMessageConstants.ERROR_DB_ADM_PSDW_EMPTY,null);
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    try {
      OpenmrsUtil.validatePassword("admin",wizardModel.adminUserPassword,"admin");
    }
 catch (    PasswordException p) {
      errors.put(ErrorMessageConstants.ERROR_DB_ADM_PSDW_WEAK,null);
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (IMPLEMENTATION_ID_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (wizardModel.createTables)       renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
 else       renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter("implementation_name");
    wizardModel.implementationId=httpRequest.getParameter("implementation_id");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter("pass_phrase");
    wizardModel.implementationIdDescription=httpRequest.getParameter("description");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.put(ErrorMessageConstants.ERROR_DB_IMPL_ID_REQ,null);
      renderTemplate(IMPLEMENTATION_ID_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (WIZARD_COMPLETE.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
        page=SIMPLE_SETUP;
      }
 else {
        page=IMPLEMENTATION_ID_SETUP;
      }
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    wizardModel.tasksToExecute=new ArrayList<WizardTask>();
    if (!wizardModel.hasCurrentOpenmrsDatabase)     wizardModel.tasksToExecute.add(WizardTask.CREATE_SCHEMA);
    if (wizardModel.createDatabaseUser)     wizardModel.tasksToExecute.add(WizardTask.CREATE_DB_USER);
    if (wizardModel.importTestData)     wizardModel.tasksToExecute.add(WizardTask.IMPORT_TEST_DATA);
    if (wizardModel.createTables) {
      wizardModel.tasksToExecute.add(WizardTask.CREATE_TABLES);
      wizardModel.tasksToExecute.add(WizardTask.ADD_CORE_DATA);
    }
    if (wizardModel.addDemoData)     wizardModel.tasksToExecute.add(WizardTask.ADD_DEMO_DATA);
    wizardModel.tasksToExecute.add(WizardTask.UPDATE_TO_LATEST);
    if (httpRequest.getSession().getAttribute(FilterUtil.REMEMBER_ATTRIBUTE) != null) {
      wizardModel.localeToSave=String.valueOf(httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
    }
    referenceMap.put("tasksToExecute",wizardModel.tasksToExecute);
    if (!isInstallationStarted()) {
      initJob=new InitializationCompletion();
      setInstallationStarted(true);
      initJob.start();
    }
    referenceMap.put("isInstallationStarted",isInstallationStarted());
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
  }
 else   if (TESTING_PRODUCTION_URL_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.productionUrl=httpRequest.getParameter("productionUrl");
    checkForEmptyValue(wizardModel.productionUrl,errors,"install.testing.production.url.required");
    if (errors.isEmpty()) {
      if (TestInstallUtil.testConnection(wizardModel.productionUrl)) {
        if (TestInstallUtil.testConnection(wizardModel.productionUrl.concat(RELEASE_TESTING_MODULE_PATH + "settings.htm"))) {
          page=TESTING_AUTHENTICATION_SETUP;
        }
 else {
          errors.put("install.testing.noTestingModule",null);
        }
      }
 else {
        errors.put("install.testing.invalidProductionUrl",new Object[]{wizardModel.productionUrl});
      }
    }
    renderTemplate(page,referenceMap,httpResponse);
    return;
  }
 else   if (TESTING_AUTHENTICATION_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(TESTING_PRODUCTION_URL_SETUP,referenceMap,httpResponse);
      return;
    }
    wizardModel.productionUsername=httpRequest.getParameter("username");
    wizardModel.productionPassword=httpRequest.getParameter("password");
    checkForEmptyValue(wizardModel.productionUsername,errors,"install.testing.username.required");
    checkForEmptyValue(wizardModel.productionPassword,errors,"install.testing.password.required");
    if (errors.isEmpty())     page=DATABASE_SETUP;
    wizardModel.importTestData=true;
    renderTemplate(page,referenceMap,httpResponse);
    return;
  }
}
