{
  String page=httpRequest.getParameter("page");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  if (INSTALL_METHOD.equals(page)) {
    wizardModel.installMethod=httpRequest.getParameter("install_method");
    if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
      page=SIMPLE_SETUP;
    }
 else {
      page=DATABASE_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (SIMPLE_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseRootPassword=httpRequest.getParameter("database_root_password");
    checkForEmptyValue(wizardModel.databaseRootPassword,errors,"Database root password");
    wizardModel.hasCurrentOpenmrsDatabase=false;
    wizardModel.createTables=true;
    wizardModel.createDatabasePassword=wizardModel.databaseRootPassword;
    wizardModel.addDemoData=false;
    wizardModel.hasCurrentDatabaseUser=false;
    wizardModel.createDatabaseUser=true;
    wizardModel.createUserPassword=wizardModel.databaseRootPassword;
    wizardModel.moduleWebAdmin=true;
    wizardModel.autoUpdateDatabase=false;
    wizardModel.adminUserPassword=InitializationWizardModel.ADMIN_DEFAULT_PASSWORD;
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(INSTALL_METHOD,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseConnection=httpRequest.getParameter("database_connection");
    checkForEmptyValue(wizardModel.databaseConnection,errors,"Database connection string");
    wizardModel.databaseDriver=httpRequest.getParameter("database_driver");
    checkForEmptyValue(wizardModel.databaseConnection,errors,"Database connection string");
    String databaseDriver=httpRequest.getParameter("database_driver");
    try {
      driverString=DatabaseUtil.loadDatabaseDriver(wizardModel.databaseConnection,databaseDriver);
      log.info("using database driver :" + driverString);
    }
 catch (    ClassNotFoundException e) {
      errors.add("The given Database driver class was not found.");
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    wizardModel.databaseDriver=driverString;
    log.info("Asigned " + driverString + " to wizard model");
    if ("yes".equals(httpRequest.getParameter("current_openmrs_database"))) {
      wizardModel.databaseName=httpRequest.getParameter("openmrs_current_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,"Current database name");
      wizardModel.hasCurrentOpenmrsDatabase=true;
    }
 else {
      wizardModel.hasCurrentOpenmrsDatabase=false;
      wizardModel.createTables=true;
      wizardModel.databaseName=httpRequest.getParameter("openmrs_new_database_name");
      checkForEmptyValue(wizardModel.databaseName,errors,"New database name");
      wizardModel.createDatabaseUsername=httpRequest.getParameter("create_database_username");
      checkForEmptyValue(wizardModel.createDatabaseUsername,errors,"A user that has 'CREATE DATABASE' privileges");
      wizardModel.createDatabasePassword=httpRequest.getParameter("create_database_password");
      checkForEmptyValue(wizardModel.createDatabasePassword,errors,"Password for user with 'CREATE DATABASE' privileges");
    }
    if (errors.isEmpty()) {
      page=DATABASE_TABLES_AND_USER;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (DATABASE_TABLES_AND_USER.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(DATABASE_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.hasCurrentOpenmrsDatabase) {
      wizardModel.createTables="yes".equals(httpRequest.getParameter("create_tables"));
    }
    wizardModel.addDemoData="yes".equals(httpRequest.getParameter("add_demo_data"));
    if ("yes".equals(httpRequest.getParameter("current_database_user"))) {
      wizardModel.currentDatabaseUsername=httpRequest.getParameter("current_database_username");
      checkForEmptyValue(wizardModel.currentDatabaseUsername,errors,"Curent user account");
      wizardModel.currentDatabasePassword=httpRequest.getParameter("current_database_password");
      checkForEmptyValue(wizardModel.currentDatabasePassword,errors,"Current user account password");
      wizardModel.hasCurrentDatabaseUser=true;
      wizardModel.createDatabaseUser=false;
    }
 else {
      wizardModel.hasCurrentDatabaseUser=false;
      wizardModel.createDatabaseUser=true;
      wizardModel.createUserUsername=httpRequest.getParameter("create_user_username");
      checkForEmptyValue(wizardModel.createUserUsername,errors,"A user that has 'CREATE USER' privileges");
      wizardModel.createUserPassword=httpRequest.getParameter("create_user_password");
      checkForEmptyValue(wizardModel.createUserPassword,errors,"Password for user that has 'CREATE USER' privileges");
    }
    if (errors.isEmpty()) {
      page=OTHER_RUNTIME_PROPS;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (OTHER_RUNTIME_PROPS.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(DATABASE_TABLES_AND_USER,referenceMap,httpResponse);
      return;
    }
    wizardModel.moduleWebAdmin="yes".equals(httpRequest.getParameter("module_web_admin"));
    wizardModel.autoUpdateDatabase="yes".equals(httpRequest.getParameter("auto_update_database"));
    if (wizardModel.createTables) {
      page=ADMIN_USER_SETUP;
    }
 else {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (ADMIN_USER_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.adminUserPassword=httpRequest.getParameter("new_admin_password");
    String adminUserConfirm=httpRequest.getParameter("new_admin_password_confirm");
    if (!wizardModel.adminUserPassword.equals(adminUserConfirm)) {
      errors.add("Admin passwords don't match");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (wizardModel.adminUserPassword.equals("")) {
      errors.add("An admin password is required");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    try {
      OpenmrsUtil.validatePassword("admin",wizardModel.adminUserPassword,"admin");
    }
 catch (    PasswordException p) {
      errors.add("The password is not long enough, does not contain both uppercase characters and a number, or matches the username.");
      renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=IMPLEMENTATION_ID_SETUP;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (IMPLEMENTATION_ID_SETUP.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (wizardModel.createTables)       renderTemplate(ADMIN_USER_SETUP,referenceMap,httpResponse);
 else       renderTemplate(OTHER_RUNTIME_PROPS,referenceMap,httpResponse);
      return;
    }
    wizardModel.implementationIdName=httpRequest.getParameter("implementation_name");
    wizardModel.implementationId=httpRequest.getParameter("implementation_id");
    wizardModel.implementationIdPassPhrase=httpRequest.getParameter("pass_phrase");
    wizardModel.implementationIdDescription=httpRequest.getParameter("description");
    if (wizardModel.implementationId.indexOf('^') != -1 || wizardModel.implementationId.indexOf('|') != -1) {
      errors.add("Implementation ID cannot contain '^' or '|'");
      renderTemplate(IMPLEMENTATION_ID_SETUP,referenceMap,httpResponse);
      return;
    }
    if (errors.isEmpty()) {
      page=WIZARD_COMPLETE;
    }
    renderTemplate(page,referenceMap,httpResponse);
  }
 else   if (WIZARD_COMPLETE.equals(page)) {
    if ("Back".equals(httpRequest.getParameter("back"))) {
      if (InitializationWizardModel.INSTALL_METHOD_SIMPLE.equals(wizardModel.installMethod)) {
        page=SIMPLE_SETUP;
      }
 else {
        page=IMPLEMENTATION_ID_SETUP;
      }
      renderTemplate(page,referenceMap,httpResponse);
      return;
    }
    initJob=new InitializationCompletion();
    wizardModel.tasksToExecute=new ArrayList<WizardTask>();
    if (!wizardModel.hasCurrentOpenmrsDatabase)     wizardModel.tasksToExecute.add(WizardTask.CREATE_SCHEMA);
    if (wizardModel.createDatabaseUser)     wizardModel.tasksToExecute.add(WizardTask.CREATE_DB_USER);
    if (wizardModel.createTables) {
      wizardModel.tasksToExecute.add(WizardTask.CREATE_TABLES);
      wizardModel.tasksToExecute.add(WizardTask.ADD_CORE_DATA);
    }
    if (wizardModel.addDemoData)     wizardModel.tasksToExecute.add(WizardTask.ADD_DEMO_DATA);
    wizardModel.tasksToExecute.add(WizardTask.UPDATE_TO_LATEST);
    referenceMap.put("tasksToExecute",wizardModel.tasksToExecute);
    initJob.start();
    renderTemplate(PROGRESS_VM,referenceMap,httpResponse);
  }
}
