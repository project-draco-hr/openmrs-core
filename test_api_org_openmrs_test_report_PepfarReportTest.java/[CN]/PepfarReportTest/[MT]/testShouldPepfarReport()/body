{
  initializeInMemoryDatabase();
  executeDataSet("org/openmrs/test/report/include/PepfarReportTest.xml");
  authenticate();
  Cohort inputCohort=null;
  Parameter startDateParam=new Parameter("report.startDate","Report Start Date",java.util.Date.class,null);
  Parameter endDateParam=new Parameter("report.endDate","Report End Date",java.util.Date.class,null);
  log.info("Creating basic PatientSearches");
  PatientSearch male=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
  male.addArgument("gender","m",String.class);
  PatientSearch female=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
  female.addArgument("gender","f",String.class);
  PatientSearch adult=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
  adult.addArgument("minAge","15",Integer.class);
  PatientSearch child=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
  child.addArgument("maxAge","15",Integer.class);
  Program hivProgram=Context.getProgramWorkflowService().getProgram("HIV PROGRAM");
  if (hivProgram == null) {
    List<Program> programs=Context.getProgramWorkflowService().getPrograms();
    for (    Program p : programs) {
      hivProgram=p;
    }
  }
  assertNotNull(hivProgram);
  PatientSearch enrolledBeforeDate=PatientSearch.createFilterSearch(ProgramStatePatientFilter.class);
  enrolledBeforeDate.addArgument("program",hivProgram.getProgramId().toString(),Program.class);
  enrolledBeforeDate.addArgument("untilDate","${report.startDate}",Date.class);
  log.info("Creating DataSets");
  List<DataSetDefinition> dataSets=new ArrayList<DataSetDefinition>();
  CohortDataSetDefinition dataSetDef=new CohortDataSetDefinition();
  dataSetDef.setName("Cohorts");
  dataSetDef.addStrategy("Cumulative ever enrolled before start of period",enrolledBeforeDate);
  dataSetDef.addStrategy("Male adults ever enrolled before start of period",PatientSearch.createCompositionSearch(new Object[]{male,"and",adult,"and",enrolledBeforeDate}));
  dataSetDef.addStrategy("Feale adults ever enrolled before start of period",PatientSearch.createCompositionSearch(new Object[]{female,"and",adult,"and",enrolledBeforeDate}));
  dataSetDef.addStrategy("Male children ever enrolled before start of period",PatientSearch.createCompositionSearch(new Object[]{male,"and",child,"and",enrolledBeforeDate}));
  dataSetDef.addStrategy("Female children ever enrolled before start of period",PatientSearch.createCompositionSearch(new Object[]{female,"and",child,"and",enrolledBeforeDate}));
  dataSets.add(dataSetDef);
  List<Parameter> parameters=new ArrayList<Parameter>();
  parameters.add(startDateParam);
  parameters.add(endDateParam);
  log.info("Creating the ReportSchema");
  ReportSchema schema=new ReportSchema();
  schema.setReportSchemaId(123);
  schema.setName("Pepfar Report");
  schema.setDescription("desc");
  schema.setDataSetDefinitions(dataSets);
  schema.setReportParameters(parameters);
  log.info("Creating EvaluationContext");
  EvaluationContext evalContext=new EvaluationContext();
  for (  Map.Entry<Parameter,Object> e : getUserEnteredParameters(schema.getReportParameters()).entrySet()) {
    log.info("adding parameter value " + e.getKey());
    evalContext.addParameterValue(e.getKey(),e.getValue());
  }
  ReportService rs=(ReportService)Context.getService(ReportService.class);
  ReportData data=rs.evaluate(schema,inputCohort,evalContext);
  Serializer serializer=OpenmrsUtil.getSerializer();
  StringWriter writer=new StringWriter();
  serializer.write(data,writer);
  System.out.println("Serialized report:\n" + writer.toString());
  TsvReportRenderer renderer=new TsvReportRenderer();
  System.out.println("Rendering results:");
  renderer.render(data,null,System.out);
}
