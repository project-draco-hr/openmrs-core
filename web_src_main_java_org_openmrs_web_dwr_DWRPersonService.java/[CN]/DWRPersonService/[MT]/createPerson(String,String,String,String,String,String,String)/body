{
  log.error(given + " " + middle+ " "+ family+ " "+ birthdate+ " "+ dateformat+ " "+ age+ " "+ gender);
  User user=Context.getAuthenticatedUser();
  Person p=new Person();
  p.setPersonCreator(user);
  p.setPersonDateCreated(new Date());
  p.setPersonChangedBy(user);
  p.setPersonDateChanged(new Date());
  if (StringUtils.isEmpty(gender)) {
    log.error("Gender cannot be null.");
    return new String("Gender cannot be null.");
  }
 else   if (gender.toUpperCase().contains("M"))   p.setGender("M");
 else   if (gender.toUpperCase().contains("F"))   p.setGender("F");
 else {
    log.error("Gender must be 'M' or 'F'.");
    return new String("Gender must be 'M' or 'F'.");
  }
  if ("".equals(given) || "".equals(family)) {
    log.error("Given name and family name cannot be null.");
    return new String("Given name and family name cannot be null.");
  }
  PersonName name=new PersonName(given,middle,family);
  name.setCreator(user);
  name.setDateCreated(new Date());
  name.setChangedBy(user);
  name.setDateChanged(new Date());
  p.addName(name);
  try {
    Date d=updateAge(birthdate,dateformat,age);
    p.setBirthdate(d);
  }
 catch (  java.text.ParseException pe) {
    log.error(pe);
    return new String("Birthdate cannot be parsed.");
  }
  p.setGender(gender);
  Person person=Context.getPersonService().savePerson(p);
  return PersonListItem.createBestMatch(person);
}
