{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST from_of_func_op_AST=null;
  try {
    if ((LA(1) == MINIMUM || LA(1) == MIN)) {
{
switch (LA(1)) {
case MINIMUM:
{
            AST tmp122_AST=null;
            tmp122_AST=astFactory.create(LT(1));
            astFactory.addASTChild(currentAST,tmp122_AST);
            match(MINIMUM);
            break;
          }
case MIN:
{
          AST tmp123_AST=null;
          tmp123_AST=astFactory.create(LT(1));
          astFactory.addASTChild(currentAST,tmp123_AST);
          match(MIN);
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((LA(1) == MAXIMUM || LA(1) == MAX)) {
{
switch (LA(1)) {
case MAXIMUM:
{
      AST tmp124_AST=null;
      tmp124_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp124_AST);
      match(MAXIMUM);
      break;
    }
case MAX:
{
    AST tmp125_AST=null;
    tmp125_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp125_AST);
    match(MAX);
    break;
  }
default :
{
  throw new NoViableAltException(LT(1),getFilename());
}
}
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((LA(1) == LAST)) {
{
AST tmp126_AST=null;
tmp126_AST=astFactory.create(LT(1));
astFactory.makeASTRoot(currentAST,tmp126_AST);
match(LAST);
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((LA(1) == FIRST)) {
{
AST tmp127_AST=null;
tmp127_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp127_AST);
match(FIRST);
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((LA(1) == EARLIEST)) {
{
AST tmp128_AST=null;
tmp128_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp128_AST);
match(EARLIEST);
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((LA(1) == LATEST)) {
{
AST tmp129_AST=null;
tmp129_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp129_AST);
match(LATEST);
}
from_of_func_op_AST=(AST)currentAST.root;
}
 else if ((_tokenSet_7.member(LA(1)))) {
from_of_func_op_AST=(AST)currentAST.root;
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
 catch (RecognitionException ex) {
reportError(ex);
recover(ex,_tokenSet_7);
}
returnAST=from_of_func_op_AST;
}
