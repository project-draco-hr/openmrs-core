{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST expr_sort_AST=null;
  try {
    expr_where();
    astFactory.addASTChild(currentAST,returnAST);
{
      _loop57:       do {
        if ((LA(1) == LITERAL_MERGE || LA(1) == LITERAL_SORT)) {
{
switch (LA(1)) {
case LITERAL_MERGE:
{
                AST tmp202_AST=null;
                tmp202_AST=astFactory.create(LT(1));
                astFactory.addASTChild(currentAST,tmp202_AST);
                match(LITERAL_MERGE);
                break;
              }
case LITERAL_SORT:
{
{
                AST tmp203_AST=null;
                tmp203_AST=astFactory.create(LT(1));
                astFactory.addASTChild(currentAST,tmp203_AST);
                match(LITERAL_SORT);
{
                  if ((LA(1) == TIME || LA(1) == LITERAL_DATA)) {
                    sort_option();
                    astFactory.addASTChild(currentAST,returnAST);
                  }
 else                   if ((_tokenSet_15.member(LA(1)))) {
                  }
 else {
                    throw new NoViableAltException(LT(1),getFilename());
                  }
                }
              }
              break;
            }
default :
{
            throw new NoViableAltException(LT(1),getFilename());
          }
      }
    }
    expr_where();
    astFactory.addASTChild(currentAST,returnAST);
  }
 else {
    break _loop57;
  }
}
 while (true);
}
expr_sort_AST=(AST)currentAST.root;
}
 catch (RecognitionException ex) {
reportError(ex);
recover(ex,_tokenSet_16);
}
returnAST=expr_sort_AST;
}
