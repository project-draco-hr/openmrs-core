{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST occur_AST=null;
  try {
switch (LA(1)) {
case OCCUR:
case LITERAL_OCCUR:
case LITERAL_Occur:
{
{
switch (LA(1)) {
case LITERAL_OCCUR:
{
              match(LITERAL_OCCUR);
              break;
            }
case LITERAL_Occur:
{
            match(LITERAL_Occur);
            break;
          }
case OCCUR:
{
          match(OCCUR);
          break;
        }
default :
{
        throw new NoViableAltException(LT(1),getFilename());
      }
  }
}
occur_AST=(AST)currentAST.root;
break;
}
case LITERAL_OCCURS:
case LITERAL_Occurs:
case LITERAL_occurs:
{
{
switch (LA(1)) {
case LITERAL_OCCURS:
{
    match(LITERAL_OCCURS);
    break;
  }
case LITERAL_Occurs:
{
  match(LITERAL_Occurs);
  break;
}
case LITERAL_occurs:
{
match(LITERAL_occurs);
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
occur_AST=(AST)currentAST.root;
break;
}
case LITERAL_OCCURRED:
case LITERAL_Occurred:
{
{
if ((LA(1) == LITERAL_OCCURRED)) {
match(LITERAL_OCCURRED);
}
 else if ((LA(1) == LITERAL_Occurred)) {
match(LITERAL_Occurred);
}
 else if ((LA(1) == LITERAL_Occurred)) {
match(LITERAL_Occurred);
}
 else {
throw new NoViableAltException(LT(1),getFilename());
}
}
occur_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
recover(ex,_tokenSet_2);
}
returnAST=occur_AST;
}
