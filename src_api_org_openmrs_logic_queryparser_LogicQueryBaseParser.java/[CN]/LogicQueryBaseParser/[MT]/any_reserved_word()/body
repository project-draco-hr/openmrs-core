{
  returnAST=null;
  ASTPair currentAST=new ASTPair();
  AST any_reserved_word_AST=null;
  try {
switch (LA(1)) {
case AND:
{
        AST tmp1_AST=null;
        tmp1_AST=astFactory.create(LT(1));
        astFactory.addASTChild(currentAST,tmp1_AST);
        match(AND);
        any_reserved_word_AST=(AST)currentAST.root;
        break;
      }
case IS:
{
      AST tmp2_AST=null;
      tmp2_AST=astFactory.create(LT(1));
      astFactory.addASTChild(currentAST,tmp2_AST);
      match(IS);
      any_reserved_word_AST=(AST)currentAST.root;
      break;
    }
case ARE:
{
    AST tmp3_AST=null;
    tmp3_AST=astFactory.create(LT(1));
    astFactory.addASTChild(currentAST,tmp3_AST);
    match(ARE);
    any_reserved_word_AST=(AST)currentAST.root;
    break;
  }
case WAS:
{
  AST tmp4_AST=null;
  tmp4_AST=astFactory.create(LT(1));
  astFactory.addASTChild(currentAST,tmp4_AST);
  match(WAS);
  any_reserved_word_AST=(AST)currentAST.root;
  break;
}
case WERE:
{
AST tmp5_AST=null;
tmp5_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp5_AST);
match(WERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case COUNT:
{
AST tmp6_AST=null;
tmp6_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp6_AST);
match(COUNT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IN:
{
AST tmp7_AST=null;
tmp7_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp7_AST);
match(IN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LESS:
{
AST tmp8_AST=null;
tmp8_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp8_AST);
match(LESS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THE:
{
AST tmp9_AST=null;
tmp9_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp9_AST);
match(THE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THAN:
{
AST tmp10_AST=null;
tmp10_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp10_AST);
match(THAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FROM:
{
AST tmp11_AST=null;
tmp11_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp11_AST);
match(FROM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BEFORE:
{
AST tmp12_AST=null;
tmp12_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp12_AST);
match(BEFORE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AFTER:
{
AST tmp13_AST=null;
tmp13_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp13_AST);
match(AFTER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AGO:
{
AST tmp14_AST=null;
tmp14_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp14_AST);
match(AGO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AT:
{
AST tmp15_AST=null;
tmp15_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp15_AST);
match(AT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OF:
{
AST tmp16_AST=null;
tmp16_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp16_AST);
match(OF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WRITE:
{
AST tmp17_AST=null;
tmp17_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp17_AST);
match(WRITE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case BE:
{
AST tmp18_AST=null;
tmp18_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp18_AST);
match(BE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LET:
{
AST tmp19_AST=null;
tmp19_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp19_AST);
match(LET);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEAR:
{
AST tmp20_AST=null;
tmp20_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp20_AST);
match(YEAR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case YEARS:
{
AST tmp21_AST=null;
tmp21_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp21_AST);
match(YEARS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IF:
{
AST tmp22_AST=null;
tmp22_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp22_AST);
match(IF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case IT:
{
AST tmp23_AST=null;
tmp23_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp23_AST);
match(IT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEY:
{
AST tmp24_AST=null;
tmp24_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp24_AST);
match(THEY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NOT:
{
AST tmp25_AST=null;
tmp25_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp25_AST);
match(NOT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OR:
{
AST tmp26_AST=null;
tmp26_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp26_AST);
match(OR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case THEN:
{
AST tmp27_AST=null;
tmp27_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp27_AST);
match(THEN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTH:
{
AST tmp28_AST=null;
tmp28_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp28_AST);
match(MONTH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MONTHS:
{
AST tmp29_AST=null;
tmp29_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp29_AST);
match(MONTHS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIME:
{
AST tmp30_AST=null;
tmp30_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp30_AST);
match(TIME);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TIMES:
{
AST tmp31_AST=null;
tmp31_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp31_AST);
match(TIMES);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITHIN:
{
AST tmp32_AST=null;
tmp32_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp32_AST);
match(WITHIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case READ:
{
AST tmp33_AST=null;
tmp33_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp33_AST);
match(READ);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MINIMUM:
{
AST tmp34_AST=null;
tmp34_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp34_AST);
match(MINIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MIN:
{
AST tmp35_AST=null;
tmp35_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp35_AST);
match(MIN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAXIMUM:
{
AST tmp36_AST=null;
tmp36_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp36_AST);
match(MAXIMUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MAX:
{
AST tmp37_AST=null;
tmp37_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp37_AST);
match(MAX);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LAST:
{
AST tmp38_AST=null;
tmp38_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp38_AST);
match(LAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FIRST:
{
AST tmp39_AST=null;
tmp39_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp39_AST);
match(FIRST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EARLIEST:
{
AST tmp40_AST=null;
tmp40_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp40_AST);
match(EARLIEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LATEST:
{
AST tmp41_AST=null;
tmp41_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp41_AST);
match(LATEST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EVENT:
{
AST tmp42_AST=null;
tmp42_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp42_AST);
match(EVENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WHERE:
{
AST tmp43_AST=null;
tmp43_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp43_AST);
match(WHERE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXIST:
{
AST tmp44_AST=null;
tmp44_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp44_AST);
match(EXIST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case EXISTS:
{
AST tmp45_AST=null;
tmp45_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp45_AST);
match(EXISTS);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PAST:
{
AST tmp46_AST=null;
tmp46_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp46_AST);
match(PAST);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVERAGE:
{
AST tmp47_AST=null;
tmp47_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp47_AST);
match(AVERAGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case AVG:
{
AST tmp48_AST=null;
tmp48_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp48_AST);
match(AVG);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SUM:
{
AST tmp49_AST=null;
tmp49_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp49_AST);
match(SUM);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case MEDIAN:
{
AST tmp50_AST=null;
tmp50_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp50_AST);
match(MEDIAN);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CONCLUDE:
{
AST tmp51_AST=null;
tmp51_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp51_AST);
match(CONCLUDE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSE:
{
AST tmp52_AST=null;
tmp52_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp52_AST);
match(ELSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ELSEIF:
{
AST tmp53_AST=null;
tmp53_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp53_AST);
match(ELSEIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ENDIF:
{
AST tmp54_AST=null;
tmp54_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp54_AST);
match(ENDIF);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TRUE:
{
AST tmp55_AST=null;
tmp55_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp55_AST);
match(TRUE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case FALSE:
{
AST tmp56_AST=null;
tmp56_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp56_AST);
match(FALSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DATA:
{
AST tmp57_AST=null;
tmp57_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp57_AST);
match(DATA);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case LOGIC:
{
AST tmp58_AST=null;
tmp58_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp58_AST);
match(LOGIC);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ACTION:
{
AST tmp59_AST=null;
tmp59_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp59_AST);
match(ACTION);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case CALL:
{
AST tmp60_AST=null;
tmp60_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp60_AST);
match(CALL);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case WITH:
{
AST tmp61_AST=null;
tmp61_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp61_AST);
match(WITH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case TO:
{
AST tmp62_AST=null;
tmp62_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp62_AST);
match(TO);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case ANY:
{
AST tmp63_AST=null;
tmp63_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp63_AST);
match(ANY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case RESEARCH:
{
AST tmp64_AST=null;
tmp64_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp64_AST);
match(RESEARCH);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case DAY:
{
AST tmp65_AST=null;
tmp65_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp65_AST);
match(DAY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case SECOND:
{
AST tmp66_AST=null;
tmp66_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp66_AST);
match(SECOND);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case OCCUR:
{
AST tmp67_AST=null;
tmp67_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp67_AST);
match(OCCUR);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PURPOSE:
{
AST tmp68_AST=null;
tmp68_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp68_AST);
match(PURPOSE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PRESENT:
{
AST tmp69_AST=null;
tmp69_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp69_AST);
match(PRESENT);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case NUMBER:
{
AST tmp70_AST=null;
tmp70_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp70_AST);
match(NUMBER);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case KNOWLEDGE:
{
AST tmp71_AST=null;
tmp71_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp71_AST);
match(KNOWLEDGE);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
case PRIORITY:
{
AST tmp72_AST=null;
tmp72_AST=astFactory.create(LT(1));
astFactory.addASTChild(currentAST,tmp72_AST);
match(PRIORITY);
any_reserved_word_AST=(AST)currentAST.root;
break;
}
default :
{
throw new NoViableAltException(LT(1),getFilename());
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
recover(ex,_tokenSet_0);
}
returnAST=any_reserved_word_AST;
}
