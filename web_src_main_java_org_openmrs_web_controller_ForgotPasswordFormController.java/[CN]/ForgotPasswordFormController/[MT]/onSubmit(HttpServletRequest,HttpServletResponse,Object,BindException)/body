{
  HttpSession httpSession=request.getSession();
  String username=request.getParameter("uname");
  String ipAddress=request.getRemoteAddr();
  Integer forgotPasswordAttempts=loginAttemptsByIP.get(ipAddress);
  if (forgotPasswordAttempts == null)   forgotPasswordAttempts=1;
  boolean lockedOut=false;
  if (forgotPasswordAttempts > 5) {
    lockedOut=true;
    Date lockedOutTime=lockoutDateByIP.get(ipAddress);
    if (lockedOutTime != null && System.currentTimeMillis() - lockedOutTime.getTime() > 300000) {
      lockedOut=false;
      forgotPasswordAttempts=0;
      lockoutDateByIP.put(ipAddress,null);
    }
 else {
      lockoutDateByIP.put(ipAddress,new Date());
    }
  }
  if (lockedOut) {
    httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.forgotPassword.tooManyAttempts");
  }
 else {
    forgotPasswordAttempts++;
    String secretAnswer=request.getParameter("secretAnswer");
    if (secretAnswer == null) {
      User user=null;
      try {
        Context.addProxyPrivilege(PrivilegeConstants.VIEW_USERS);
        if (username != null && username.length() > 0)         user=Context.getUserService().getUserByUsername(username);
      }
  finally {
        Context.removeProxyPrivilege(PrivilegeConstants.VIEW_USERS);
      }
      if (user == null || user.getSecretQuestion() == null || user.getSecretQuestion().equals("")) {
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.question.empty");
      }
 else {
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"auth.question.fill");
        request.setAttribute("secretQuestion",user.getSecretQuestion());
        forgotPasswordAttempts=0;
      }
    }
 else {
      User user=null;
      try {
        Context.addProxyPrivilege(PrivilegeConstants.VIEW_USERS);
        user=Context.getUserService().getUserByUsername(username);
      }
  finally {
        Context.removeProxyPrivilege(PrivilegeConstants.VIEW_USERS);
      }
      if (user == null || user.getSecretQuestion() == null || user.getSecretQuestion().equals("")) {
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.question.empty");
      }
 else       if (user.getSecretQuestion() != null && Context.getUserService().isSecretAnswer(user,secretAnswer)) {
        StringBuilder randomPassword=new StringBuilder();
        for (int i=0; i < 8; i++) {
          randomPassword.append(String.valueOf((Math.random() * (127 - 48) + 48)));
        }
        try {
          Context.addProxyPrivilege(PrivilegeConstants.EDIT_USER_PASSWORDS);
          Context.getUserService().changePassword(user,randomPassword.toString());
        }
  finally {
          Context.removeProxyPrivilege(PrivilegeConstants.EDIT_USER_PASSWORDS);
        }
        httpSession.setAttribute("resetPassword",randomPassword);
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"auth.password.reset");
        Context.authenticate(username,randomPassword.toString());
        httpSession.setAttribute("loginAttempts",0);
        return new ModelAndView(new RedirectView(request.getContextPath() + "/options.form#Change Login Info"));
      }
 else {
        httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,"auth.answer.invalid");
        httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"auth.question.fill");
        request.setAttribute("secretQuestion",user.getSecretQuestion());
      }
    }
  }
  loginAttemptsByIP.put(ipAddress,forgotPasswordAttempts);
  request.setAttribute("uname",username);
  return showForm(request,response,errors);
}
