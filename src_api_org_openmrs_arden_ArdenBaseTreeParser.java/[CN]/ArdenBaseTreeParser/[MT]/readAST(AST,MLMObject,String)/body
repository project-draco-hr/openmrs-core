{
  String s="";
  AST readAST_AST_in=(_t == ASTNULL) ? null : (AST)_t;
  AST k=null;
  AST x=null;
  AST y=null;
  AST intlit=null;
  AST dop=null;
  AST z=null;
  AST j=null;
  AST i=null;
  AST t=null;
  AST f=null;
  String a="", b="", ret_val="";
  try {
{
      if (_t == null)       _t=ASTNULL;
switch (_t.getType()) {
case READ:
{
          AST __t346=_t;
          AST tmp3_AST_in=(AST)_t;
          match(_t,READ);
          _t=_t.getFirstChild();
          a=readAST(_t,obj,instr);
          _t=_retTree;
          b=readAST(_t,obj,a);
          _t=_retTree;
          _t=__t346;
          _t=_t.getNextSibling();
          s+=ret_val;
          break;
        }
case LAST:
case LATEST:
{
{
{
            if (_t == null)             _t=ASTNULL;
switch (_t.getType()) {
case LAST:
{
                AST tmp4_AST_in=(AST)_t;
                match(_t,LAST);
                _t=_t.getNextSibling();
                break;
              }
case LATEST:
{
              AST tmp5_AST_in=(AST)_t;
              match(_t,LATEST);
              _t=_t.getNextSibling();
              break;
            }
default :
{
            throw new NoViableAltException(_t);
          }
      }
    }
{
      if (_t == null)       _t=ASTNULL;
      if ((_t.getType() == INTLIT)) {
        k=(AST)_t;
        match(_t,INTLIT);
        _t=_t.getNextSibling();
      }
 else       if ((_tokenSet_0.member(_t.getType()))) {
      }
 else {
        throw new NoViableAltException(_t);
      }
    }
    s+=b;
    obj.setReadType("last");
    obj.setHowMany("1");
    if (k != null) {
      obj.setHowMany(k.getText());
      System.err.println("ReadType = Last " + "How many? " + k.getText());
    }
 else {
      System.err.println("ReadType = Last " + "How many? 1");
    }
    b=readAST(_t,obj,instr);
    _t=_retTree;
  }
  break;
}
case FIRST:
case EARLIEST:
{
{
{
    if (_t == null)     _t=ASTNULL;
switch (_t.getType()) {
case FIRST:
{
        AST tmp6_AST_in=(AST)_t;
        match(_t,FIRST);
        _t=_t.getNextSibling();
        break;
      }
case EARLIEST:
{
      AST tmp7_AST_in=(AST)_t;
      match(_t,EARLIEST);
      _t=_t.getNextSibling();
      break;
    }
default :
{
    throw new NoViableAltException(_t);
  }
}
}
{
if (_t == null) _t=ASTNULL;
if ((_t.getType() == INTLIT)) {
x=(AST)_t;
match(_t,INTLIT);
_t=_t.getNextSibling();
}
 else if ((_tokenSet_0.member(_t.getType()))) {
}
 else {
throw new NoViableAltException(_t);
}
}
s+=b;
obj.setReadType("first");
obj.setHowMany("1");
if (x != null) {
obj.setHowMany(x.getText());
System.err.println("ReadType = First " + "How many? " + x.getText());
}
 else {
System.err.println("ReadType = First " + "How many? 1");
}
b=readAST(_t,obj,instr);
_t=_retTree;
}
break;
}
case MAXIMUM:
case MAX:
case INTLIT:
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case MAXIMUM:
case MAX:
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case MAXIMUM:
{
    AST tmp8_AST_in=(AST)_t;
    match(_t,MAXIMUM);
    _t=_t.getNextSibling();
    break;
  }
case MAX:
{
  AST tmp9_AST_in=(AST)_t;
  match(_t,MAX);
  _t=_t.getNextSibling();
  break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
{
{
if (_t == null) _t=ASTNULL;
if ((_t.getType() == INTLIT)) {
y=(AST)_t;
match(_t,INTLIT);
_t=_t.getNextSibling();
}
 else if ((_tokenSet_0.member(_t.getType()))) {
}
 else {
throw new NoViableAltException(_t);
}
}
s+=b;
obj.setReadType("max");
obj.setHowMany("1");
if (y != null) {
obj.setHowMany(y.getText());
System.err.println("ReadType = Maximum " + "How many? " + y.getText());
}
 else {
System.err.println("ReadType = Maximum " + "How many? 1");
}
b=readAST(_t,obj,instr);
_t=_retTree;
}
break;
}
case INTLIT:
{
{
{
intlit=(AST)_t;
match(_t,INTLIT);
_t=_t.getNextSibling();
dop=_t == ASTNULL ? null : (AST)_t;
duration_op(_t);
_t=_retTree;
}
System.err.println("Duration Clause - " + intlit.getText() + " "+ dop.getText());
}
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
break;
}
case MINIMUM:
case MIN:
{
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case MINIMUM:
{
AST tmp10_AST_in=(AST)_t;
match(_t,MINIMUM);
_t=_t.getNextSibling();
break;
}
case MIN:
{
AST tmp11_AST_in=(AST)_t;
match(_t,MIN);
_t=_t.getNextSibling();
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
{
if (_t == null) _t=ASTNULL;
if ((_t.getType() == INTLIT)) {
z=(AST)_t;
match(_t,INTLIT);
_t=_t.getNextSibling();
}
 else if ((_tokenSet_0.member(_t.getType()))) {
}
 else {
throw new NoViableAltException(_t);
}
}
s+=b;
obj.setReadType("min");
obj.setHowMany("1");
if (z != null) {
obj.setHowMany(z.getText());
System.err.println("ReadType = Minimum " + "How many? " + z.getText());
}
 else {
System.err.println("ReadType = Min " + "How many? 1");
}
b=readAST(_t,obj,instr);
_t=_retTree;
}
break;
}
case EXIST:
case EXISTS:
{
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case EXIST:
{
AST tmp12_AST_in=(AST)_t;
match(_t,EXIST);
_t=_t.getNextSibling();
break;
}
case EXISTS:
{
AST tmp13_AST_in=(AST)_t;
match(_t,EXISTS);
_t=_t.getNextSibling();
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
s+=b;
obj.setReadType("last");
obj.setHowMany("1");
System.err.println("ReadType = Exist");
b=readAST(_t,obj,instr);
_t=_retTree;
}
break;
}
case AVG:
case AVERAGE:
{
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case AVERAGE:
{
AST tmp14_AST_in=(AST)_t;
match(_t,AVERAGE);
_t=_t.getNextSibling();
break;
}
case AVG:
{
AST tmp15_AST_in=(AST)_t;
match(_t,AVG);
_t=_t.getNextSibling();
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
b=readAST(_t,obj,instr);
_t=_retTree;
}
s+=b;
System.err.println("ReadType = Average");
break;
}
case COUNT:
{
{
AST tmp16_AST_in=(AST)_t;
match(_t,COUNT);
_t=_t.getNextSibling();
b=readAST(_t,obj,instr);
_t=_retTree;
}
s+=b;
System.err.println("ReadType = Count");
break;
}
case SUM:
{
{
AST tmp17_AST_in=(AST)_t;
match(_t,SUM);
_t=_t.getNextSibling();
b=readAST(_t,obj,instr);
_t=_retTree;
}
s+=b;
System.err.println("ReadType = Sum");
break;
}
case MEDIAN:
{
{
AST tmp18_AST_in=(AST)_t;
match(_t,MEDIAN);
_t=_t.getNextSibling();
b=readAST(_t,obj,instr);
_t=_retTree;
}
s+=b;
System.err.println("ReadType = Median");
break;
}
case TRUE:
case FALSE:
case ID:
case ARDEN_CURLY_BRACKETS:
{
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case ARDEN_CURLY_BRACKETS:
{
{
j=(AST)_t;
match(_t,ARDEN_CURLY_BRACKETS);
_t=_t.getNextSibling();
}
System.err.println("Fetch this data - " + j.getText());
s=j.getText();
obj.AddConcept(s);
{
if (_t == null) _t=ASTNULL;
switch (_t.getType()) {
case WHERE:
{
AST tmp19_AST_in=(AST)_t;
match(_t,WHERE);
_t=_t.getNextSibling();
System.err.println("Where=TRUE");
where_it_occurredAST(_t,obj,instr);
_t=_retTree;
break;
}
case 3:
case COUNT:
case IF:
case READ:
case MINIMUM:
case MIN:
case MAXIMUM:
case MAX:
case LAST:
case FIRST:
case EARLIEST:
case LATEST:
case EVENT:
case EXIST:
case EXISTS:
case AVG:
case AVERAGE:
case SUM:
case MEDIAN:
case ELSE:
case ELSEIF:
case ENDIF:
case TRUE:
case FALSE:
case ENDBLOCK:
case INTLIT:
case ID:
case ARDEN_CURLY_BRACKETS:
{
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
break;
}
case ID:
{
i=(AST)_t;
match(_t,ID);
_t=_t.getNextSibling();
System.err.println("Variable = " + i.getText());
a=i.getText();
s=a;
obj.SetConceptVar(a);
break;
}
case TRUE:
{
t=(AST)_t;
match(_t,TRUE);
_t=_t.getNextSibling();
s="true";
obj.AddConcept(s);
obj.SetDBAccess(false,instr);
break;
}
case FALSE:
{
f=(AST)_t;
match(_t,FALSE);
_t=_t.getNextSibling();
s="false";
obj.AddConcept(s);
obj.SetDBAccess(false,instr);
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
break;
}
default :
{
throw new NoViableAltException(_t);
}
}
}
}
 catch (RecognitionException ex) {
reportError(ex);
if (_t != null) {
_t=_t.getNextSibling();
}
}
_retTree=_t;
return s;
}
