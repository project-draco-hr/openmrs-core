{
  if (discontinueDate == null) {
    discontinueDate=new Date();
  }
  if (discontinueDate.after(new Date())) {
    throw new IllegalArgumentException("Discontinue date cannot be in the future");
  }
  if (DISCONTINUE == orderToStop.getAction()) {
    throw new APIException("Order.action.cannot.discontinued",new Object[]{DISCONTINUE});
  }
  if (isRetrospective && orderToStop.getDateStopped() != null) {
    throw new APIException("Order.retrospective.stopped.cannot.discontinued");
  }
  if (!isRetrospective && !orderToStop.isActive()) {
    throw new APIException("Cannot discontinue an order that is already stopped, expired or voided");
  }
 else   if (isRetrospective && !orderToStop.isActive(discontinueDate)) {
    throw new APIException("Order.retrospective.stopped.cannot.discontinued");
  }
  setProperty(orderToStop,"dateStopped",discontinueDate);
  saveOrderInternal(orderToStop,null);
}
