{
  if (type == null)   type="";
  if (formFieldName == null)   formFieldName="";
  if (formFieldName.length() > 0) {
    FieldGenHandler handler=getHandlerByClassName(type);
    if (handler != null) {
      handler.setFieldGenTag(this);
      handler.run();
    }
 else {
      String output="Cannot handle type [" + type + "]. Please add a module to handle this type.";
      if (type.equals("char") || type.indexOf("java.lang.Character") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal;
        if (startVal.length() > 1)         startVal=startVal.substring(0,1);
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_CHAR_LENGTH : fieldLength;
        output="<input type=\"text\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "\" value=\""+ startVal+ "\" size=\""+ fieldLength+ "\" maxlength=\"1\" />";
      }
 else       if (type.equals("int") || type.indexOf("java.lang.Integer") >= 0 || type.equals("long") || type.indexOf("java.lang.Long") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal;
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_INT_LENGTH : fieldLength;
        output="<input type=\"text\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "\" value=\""+ startVal+ "\" size=\""+ fieldLength+ "\" />";
      }
 else       if (type.equals("float") || type.indexOf("java.lang.Float") >= 0 || type.equals("double") || type.indexOf("java.lang.Double") >= 0 || type.indexOf("java.lang.Number") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal;
        String fieldLength=this.parameterMap != null ? (String)this.parameterMap.get("fieldLength") : null;
        fieldLength=(fieldLength == null) ? DEFAULT_INPUT_FLOAT_LENGTH : fieldLength;
        output="<input type=\"text\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "\" value=\""+ startVal+ "\" size=\""+ fieldLength+ "\" />";
      }
 else       if (type.equals("boolean") || type.indexOf("java.lang.Boolean") >= 0) {
        String startVal="";
        if (val != null) {
          startVal=val.toString();
        }
        startVal=(startVal == null) ? "" : startVal.toLowerCase();
        if ("false".equals(startVal) || "0".equals(startVal))         startVal="f";
        if ("true".equals(startVal) || "1".equals(startVal))         startVal="t";
        if ("unknown".equals(startVal) || "?".equals(startVal))         startVal="u";
        String forceInputType=this.parameterMap != null ? (String)this.parameterMap.get("forceInputType") : null;
        String isNullable=this.parameterMap != null ? (String)this.parameterMap.get("isNullable") : null;
        String trueLabel=this.parameterMap != null ? (String)this.parameterMap.get("trueLabel") : null;
        String falseLabel=this.parameterMap != null ? (String)this.parameterMap.get("falseLabel") : null;
        String unknownLabel=this.parameterMap != null ? (String)this.parameterMap.get("unknownLabel") : null;
        if (forceInputType == null)         forceInputType="";
        if ("checkbox".equals(forceInputType)) {
          output="<input type=\"checkbox\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "\" value=\"t\""+ ("t".equals(startVal) ? " checked" : "")+ "/> ";
        }
 else {
          if (isNullable == null)           isNullable="";
          if (trueLabel == null)           trueLabel="true";
          if (falseLabel == null)           falseLabel="false";
          if (unknownLabel == null)           unknownLabel="unknown";
          if ("false".equalsIgnoreCase(isNullable) || "f".equalsIgnoreCase(isNullable) || "0".equals(isNullable)) {
            output="<input type=\"radio\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "_f\" value=\"f\""+ ("f".equals(startVal) ? " checked" : "")+ "/> ";
            output+=falseLabel;
            output+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            output+="<input type=\"radio\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "_t\" value=\"t\""+ ("t".equals(startVal) ? " checked" : "")+ "/> ";
            output+=trueLabel;
          }
 else {
            output="<input type=\"radio\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "_f\" value=\"f\""+ ("f".equals(startVal) ? " checked" : "")+ "/> ";
            output+=falseLabel;
            output+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            output+="<input type=\"radio\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "_t\" value=\"t\""+ ("t".equals(startVal) ? " checked" : "")+ "/> ";
            output+=trueLabel;
            output+="&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
            output+="<input type=\"radio\" name=\"" + formFieldName + "\" id=\""+ formFieldName+ "_u\" value=\"u\""+ ("u".equals(startVal) ? " checked" : "")+ "/> ";
            output+=unknownLabel;
          }
        }
      }
 else       if (type.indexOf("$") >= 0) {
        String className=type;
        Class cls=null;
        try {
          cls=Class.forName(className);
        }
 catch (        Throwable t) {
          cls=null;
          log.error("Could not instantiate class for this enum of class name [" + className + "] in FieldGenTag");
        }
        if (cls != null) {
          if (cls.isEnum()) {
            Object[] enumConstants=cls.getEnumConstants();
            if (enumConstants != null) {
              if (enumConstants.length > 0) {
                String startVal="";
                if (val != null)                 startVal=val.toString();
                log.debug("val is " + val);
                log.debug("val.toString is " + startVal);
                if (startVal == null)                 startVal="";
                output="<select name=\"" + formFieldName + "\" id=\""+ formFieldName+ "\">";
                for (int i=0; i < enumConstants.length; i++) {
                  output+="<option value=\"" + enumConstants[i].toString() + "\""+ (startVal.equals(enumConstants[i].toString()) ? " selected" : "")+ ">";
                  output+=enumConstants[i].toString();
                  output+="</option>";
                }
                output+="</select> ";
              }
            }
          }
        }
      }
      try {
        pageContext.getOut().write(output);
      }
 catch (      IOException e) {
        log.error(e);
      }
    }
  }
  if (url == null)   url="default.field";
  if (!url.endsWith("field"))   url+=".field";
  url="/fieldGen/" + url;
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.type",type);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.formFieldName",formFieldName);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.parameters",OpenmrsUtil.parseParameterList(parameters));
  HashMap<String,Object> hmParamMap=(HashMap<String,Object>)pageContext.getRequest().getAttribute("org.openmrs.fieldGen.parameterMap");
  if (hmParamMap == null)   hmParamMap=new HashMap<String,Object>();
  if (this.parameterMap != null)   hmParamMap.putAll(this.parameterMap);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.parameterMap",hmParamMap);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.object",val);
  pageContext.getRequest().setAttribute("org.openmrs.fieldGen.request",pageContext.getRequest());
  try {
    pageContext.include(this.url);
  }
 catch (  ServletException e) {
    log.error("ServletException while trying to include a file in FieldGenTag",e);
  }
catch (  IOException e) {
    log.error("IOException while trying to include a file in FieldGenTag",e);
  }
  resetValues();
  return SKIP_BODY;
}
