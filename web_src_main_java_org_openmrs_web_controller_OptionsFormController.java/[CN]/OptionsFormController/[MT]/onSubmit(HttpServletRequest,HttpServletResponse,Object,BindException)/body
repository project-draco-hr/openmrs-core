{
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User loginUser=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    User user=null;
    try {
      Context.addProxyPrivilege(PrivilegeConstants.VIEW_USERS);
      user=us.getUser(loginUser.getUserId());
    }
  finally {
      Context.removeProxyPrivilege(PrivilegeConstants.VIEW_USERS);
    }
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    Locale locale=WebUtil.normalizeLocale(opts.getDefaultLocale());
    if (locale != null)     properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,locale.toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,WebUtil.sanitizeLocales(opts.getProficientLocales()));
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? "" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress() == null ? "" : opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals("")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          try {
            OpenmrsUtil.validatePassword(user.getUsername(),password,String.valueOf(user.getUserId()));
          }
 catch (          PasswordException e) {
            errors.reject(e.getMessage());
          }
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject("error.password.different");
          if (!password.equals(opts.getConfirmPassword()))           errors.reject("error.password.match");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          opts.setSecretQuestionPassword(password);
          new UserProperties(user.getUserProperties()).setSupposedToChangePassword(false);
        }
      }
 catch (      APIException e) {
        errors.rejectValue("oldPassword","error.password.match");
      }
    }
 else {
      if (!opts.getNewPassword().equals("")) {
        errors.rejectValue("oldPassword","error.password.incorrect");
      }
    }
    if (!opts.getSecretQuestionPassword().equals("")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue("secretQuestionPassword","error.password.match");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals("")) {
      errors.rejectValue("secretQuestionPassword","error.password.incorrect");
    }
    String notifyType=opts.getNotification();
    if (notifyType != null) {
      if (notifyType.equals("internal") || notifyType.equals("internalProtected") || notifyType.equals("email")) {
        if (opts.getNotificationAddress().isEmpty()) {
          errors.reject("error.options.notificationAddress.empty");
        }
 else         if (!EmailValidator.getInstance().isValid(opts.getNotificationAddress())) {
          errors.reject("error.options.notificationAddress.invalid");
        }
      }
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      try {
        Context.addProxyPrivilege(PrivilegeConstants.VIEW_USERS);
        if (us.hasDuplicateUsername(user)) {
          errors.rejectValue("username","error.username.taken");
        }
      }
  finally {
        Context.removeProxyPrivilege(PrivilegeConstants.VIEW_USERS);
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      PersonName newPersonName=opts.getPersonName();
      PersonName existingPersonName=user.getPersonName();
      if (!existingPersonName.equalsContent(newPersonName)) {
        existingPersonName.setPreferred(false);
        existingPersonName.setVoided(true);
        existingPersonName.setVoidedBy(user);
        existingPersonName.setDateVoided(new Date());
        existingPersonName.setVoidReason("Changed name on own options form");
        newPersonName.setPreferred(true);
        user.addName(newPersonName);
      }
      ValidateUtil.validate(user,errors);
      if (errors.hasErrors()) {
        return super.processFormSubmission(request,response,opts,errors);
      }
      try {
        Context.addProxyPrivilege(PrivilegeConstants.EDIT_USERS);
        Context.addProxyPrivilege(PrivilegeConstants.VIEW_USERS);
        us.saveUser(user,null);
        PseudoStaticContentController.invalidateCachedResources(properties);
        Context.refreshAuthenticatedUser();
      }
  finally {
        Context.removeProxyPrivilege(PrivilegeConstants.EDIT_USERS);
        Context.removeProxyPrivilege(PrivilegeConstants.VIEW_USERS);
      }
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"options.saved");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}
