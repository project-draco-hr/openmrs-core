{
  HttpSession httpSession=request.getSession();
  Map<String,Object> map=new HashMap<String,Object>();
  if (Context.isAuthenticated()) {
    LocationService ls=Context.getLocationService();
    map.put("locations",ls.getAllLocations());
    AdministrationService as=Context.getAdministrationService();
    map.put("languages",as.getPresentationLocales());
    String resetPassword=(String)httpSession.getAttribute("resetPassword");
    if (resetPassword == null)     resetPassword="";
 else     httpSession.removeAttribute("resetPassword");
    map.put("resetPassword",resetPassword);
    ArrayList<String> hints=new ArrayList<String>(5);
    int minChar=1;
    MessageSourceService mss=Context.getMessageSourceService();
    try {
      String minCharStr=as.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_MINIMUM_LENGTH);
      if (StringUtils.isNotBlank(minCharStr))       minChar=Integer.valueOf(minCharStr);
      if (minChar < 1)       minChar=1;
    }
 catch (    NumberFormatException e) {
    }
    hints.add(mss.getMessage("options.login.password.minCharacterCount",new Object[]{minChar},null));
    addHint(hints,as.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_CANNOT_MATCH_USERNAME_OR_SYSTEMID),mss.getMessage("options.login.password.cannotMatchUsername"));
    addHint(hints,as.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_REQUIRES_UPPER_AND_LOWER_CASE),mss.getMessage("options.login.password.containUpperCase"));
    addHint(hints,as.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_REQUIRES_DIGIT),mss.getMessage("options.login.password.containNumber"));
    addHint(hints,as.getGlobalProperty(OpenmrsConstants.GP_PASSWORD_REQUIRES_NON_DIGIT),mss.getMessage("options.login.password.containNonNumber"));
    StringBuilder passwordHint=new StringBuilder("");
    for (int i=0; i < hints.size(); i++) {
      if (i == 0) {
        passwordHint.append(hints.get(i));
      }
 else       if (i < (hints.size() - 1)) {
        passwordHint.append(", ").append(hints.get(i));
      }
 else {
        passwordHint.append(" and ").append(hints.get(i));
      }
    }
    map.put("passwordHint",passwordHint.toString());
  }
  return map;
}
