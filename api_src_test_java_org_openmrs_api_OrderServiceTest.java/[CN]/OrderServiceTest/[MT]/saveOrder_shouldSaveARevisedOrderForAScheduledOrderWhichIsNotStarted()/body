{
  Order originalOrder=new Order();
  originalOrder.setAction(Action.NEW);
  originalOrder.setPatient(Context.getPatientService().getPatient(7));
  originalOrder.setConcept(Context.getConceptService().getConcept(5497));
  originalOrder.setCareSetting(orderService.getCareSetting(1));
  originalOrder.setOrderer(orderService.getOrder(1).getOrderer());
  originalOrder.setEncounter(encounterService.getEncounter(3));
  originalOrder.setOrderType(orderService.getOrderType(17));
  originalOrder.setDateActivated(new Date());
  originalOrder.setScheduledDate(DateUtils.addMonths(new Date(),2));
  originalOrder.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);
  originalOrder=orderService.saveOrder(originalOrder,null);
  assertTrue(originalOrder.isActive());
  final Patient patient=originalOrder.getPatient();
  List<Order> originalActiveOrders=orderService.getActiveOrders(patient,null,null,null);
  final int originalOrderCount=originalActiveOrders.size();
  assertTrue(originalActiveOrders.contains(originalOrder));
  Order revisedOrder=originalOrder.cloneForRevision();
  revisedOrder.setEncounter(encounterService.getEncounter(5));
  revisedOrder.setInstructions("Take after a meal");
  revisedOrder.setDateActivated(new Date());
  revisedOrder.setOrderer(providerService.getProvider(1));
  revisedOrder.setEncounter(encounterService.getEncounter(3));
  orderService.saveOrder(revisedOrder,null);
  List<Order> activeOrders=orderService.getActiveOrders(patient,null,null,null);
  assertEquals(originalOrderCount,activeOrders.size());
  assertEquals(revisedOrder.getDateActivated(),DateUtils.addSeconds(originalOrder.getDateStopped(),1));
  assertFalse(activeOrders.contains(originalOrder));
  assertFalse(originalOrder.isActive());
}
