{
  final int numberOfConcurrentOrderNumberRequests=16;
  final Set<String> uniqueOrderNumbers=synchronizedSet(new HashSet<String>());
  final CountDownLatch beginRequestingOrderNumbers=new CountDownLatch(1);
  final CountDownLatch newOrderNumbersObtained=new CountDownLatch(numberOfConcurrentOrderNumberRequests);
  Runnable orderNumberRequest=new Runnable(){
    @Override public void run(){
      try {
        beginRequestingOrderNumbers.await();
        Context.openSession();
        String orderNumber=service.getNewOrderNumber();
        uniqueOrderNumbers.add(orderNumber);
      }
 catch (      InterruptedException e) {
      }
 finally {
        Context.closeSession();
        newOrderNumbersObtained.countDown();
      }
    }
  }
;
  for (int i=0; i < numberOfConcurrentOrderNumberRequests; i++) {
    new Thread(orderNumberRequest).start();
  }
  beginRequestingOrderNumbers.countDown();
  newOrderNumbersObtained.await();
  Assert.assertEquals("Should receive a unique order number for each concurrent request",numberOfConcurrentOrderNumberRequests,uniqueOrderNumbers.size());
}
