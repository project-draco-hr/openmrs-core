{
  Order order=new Order();
  order.setAction(Action.NEW);
  order.setPatient(Context.getPatientService().getPatient(7));
  order.setConcept(Context.getConceptService().getConcept(5497));
  order.setCareSetting(orderService.getCareSetting(1));
  order.setOrderer(orderService.getOrder(1).getOrderer());
  order.setEncounter(encounterService.getEncounter(3));
  order.setEncounter(encounterService.getEncounter(3));
  order.setOrderType(orderService.getOrderType(17));
  order.setDateActivated(new Date());
  order.setScheduledDate(DateUtils.addMonths(new Date(),2));
  order.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);
  order=orderService.saveOrder(order,null);
  assertTrue(OrderUtilTest.isActiveOrder(order,null));
  assertFalse(order.isStarted());
  Encounter encounter=encounterService.getEncounter(3);
  Provider orderer=providerService.getProvider(1);
  Date discontinueDate=new Date();
  String discontinueReasonNonCoded="Test if I can discontinue this";
  Order discontinueOrder=orderService.discontinueOrder(order,discontinueReasonNonCoded,discontinueDate,orderer,encounter);
  Assert.assertEquals(order.getDateStopped(),discontinueDate);
  Assert.assertNotNull(discontinueOrder);
  Assert.assertNotNull(discontinueOrder.getId());
  Assert.assertEquals(discontinueOrder.getDateActivated(),discontinueOrder.getAutoExpireDate());
  Assert.assertEquals(discontinueOrder.getAction(),Action.DISCONTINUE);
  Assert.assertEquals(discontinueOrder.getOrderReasonNonCoded(),discontinueReasonNonCoded);
  Assert.assertEquals(discontinueOrder.getPreviousOrder(),order);
}
