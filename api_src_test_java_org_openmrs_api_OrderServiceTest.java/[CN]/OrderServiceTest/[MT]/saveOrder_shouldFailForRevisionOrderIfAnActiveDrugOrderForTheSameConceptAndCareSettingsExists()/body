{
  final Patient patient=patientService.getPatient(2);
  final Concept aspirin=conceptService.getConcept(88);
  DrugOrder firstOrder=new DrugOrder();
  firstOrder.setPatient(patient);
  firstOrder.setConcept(aspirin);
  firstOrder.setEncounter(encounterService.getEncounter(6));
  firstOrder.setOrderer(providerService.getProvider(1));
  firstOrder.setCareSetting(orderService.getCareSetting(2));
  firstOrder.setDrug(conceptService.getDrug(3));
  firstOrder.setDateActivated(new Date());
  firstOrder.setAutoExpireDate(DateUtils.addDays(new Date(),10));
  firstOrder.setDosingType(FreeTextDosingInstructions.class);
  firstOrder.setDosingInstructions("2 for 5 days");
  firstOrder.setQuantity(10.0);
  firstOrder.setQuantityUnits(conceptService.getConcept(51));
  firstOrder.setNumRefills(0);
  orderService.saveOrder(firstOrder,null);
  DrugOrder secondOrder=new DrugOrder();
  secondOrder.setPatient(firstOrder.getPatient());
  secondOrder.setConcept(firstOrder.getConcept());
  secondOrder.setEncounter(encounterService.getEncounter(6));
  secondOrder.setOrderer(providerService.getProvider(1));
  secondOrder.setCareSetting(firstOrder.getCareSetting());
  secondOrder.setDrug(conceptService.getDrug(3));
  secondOrder.setDateActivated(new Date());
  secondOrder.setScheduledDate(DateUtils.addDays(firstOrder.getEffectiveStopDate(),1));
  secondOrder.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);
  secondOrder.setDosingType(FreeTextDosingInstructions.class);
  secondOrder.setDosingInstructions("2 for 5 days");
  secondOrder.setQuantity(10.0);
  secondOrder.setQuantityUnits(conceptService.getConcept(51));
  secondOrder.setNumRefills(0);
  orderService.saveOrder(secondOrder,null);
  DrugOrder revision=secondOrder.cloneForRevision();
  revision.setScheduledDate(DateUtils.addDays(firstOrder.getEffectiveStartDate(),2));
  revision.setEncounter(encounterService.getEncounter(6));
  revision.setOrderer(providerService.getProvider(1));
  expectedException.expect(APIException.class);
  expectedException.expectMessage("Order.cannot.have.more.than.one");
  orderService.saveOrder(revision,null);
}
