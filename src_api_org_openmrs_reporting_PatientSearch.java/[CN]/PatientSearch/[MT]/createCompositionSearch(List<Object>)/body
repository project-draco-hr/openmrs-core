{
  List<Object> currentLine=new ArrayList<Object>();
  try {
    Stack<List<Object>> stack=new Stack<List<Object>>();
    for (    Object token : tokens) {
      if (token instanceof String) {
        String s=(String)token;
        s=s.toLowerCase();
        if (andWords.contains(s)) {
          currentLine.add(PatientSetService.BooleanOperator.AND);
        }
 else         if (orWords.contains(s)) {
          currentLine.add(PatientSetService.BooleanOperator.OR);
        }
 else         if (notWords.contains(s)) {
          currentLine.add(PatientSetService.BooleanOperator.NOT);
        }
 else         if (openParenthesesWords.contains(s)) {
          stack.push(currentLine);
          currentLine=new ArrayList<Object>();
        }
 else         if (closeParenthesesWords.contains(s)) {
          List<Object> l=stack.pop();
          l.add(currentLine);
          currentLine=l;
        }
 else {
          throw new IllegalArgumentException("Unrecognized string token: " + s);
        }
      }
 else       if (token instanceof Integer) {
        currentLine.add(token);
      }
 else       if (token instanceof PatientSearch) {
        currentLine.add(token);
      }
 else       if (token instanceof PatientFilter) {
        currentLine.add(token);
      }
 else {
        throw new IllegalArgumentException("Unknown class in token list: " + token.getClass());
      }
    }
  }
 catch (  Exception ex) {
    log.error("Error in token list",ex);
    return null;
  }
  PatientSearch ret=new PatientSearch();
  ret.setParsedComposition(currentLine);
  return ret;
}
