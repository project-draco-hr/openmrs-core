{
  List<URL> result=new LinkedList<URL>();
  File tmpModuleDir=getLibCacheFolderForModule(module);
  File tmpModuleJar=new File(tmpModuleDir,module.getModuleId() + ".jar");
  if (!tmpModuleJar.exists()) {
    try {
      tmpModuleJar.createNewFile();
    }
 catch (    IOException io) {
      log.warn("Unable to create tmpModuleFile",io);
    }
  }
  FileInputStream in=null;
  FileOutputStream out=null;
  try {
    in=new FileInputStream(module.getFile());
    out=new FileOutputStream(tmpModuleJar);
    OpenmrsUtil.copyFile(in,out);
  }
 catch (  IOException io) {
    log.warn("Unable to copy tmpModuleFile",io);
  }
 finally {
    try {
      in.close();
    }
 catch (    Exception e) {
    }
    try {
      out.close();
    }
 catch (    Exception e) {
    }
  }
  URL moduleFileURL=null;
  try {
    moduleFileURL=ModuleUtil.file2url(tmpModuleJar);
    result.add(moduleFileURL);
  }
 catch (  MalformedURLException e) {
    log.warn("Unable to add files from module to URL list: " + module.getModuleId(),e);
  }
  try {
    if (log.isDebugEnabled())     log.debug("Expanding /lib folder in module");
    ModuleUtil.expandJar(module.getFile(),tmpModuleDir,"lib",true);
    File libdir=new File(tmpModuleDir,"lib");
    if (libdir != null && libdir.exists()) {
      Collection<File> files=(Collection<File>)FileUtils.listFiles(libdir,new String[]{"jar"},true);
      for (      File file : files) {
        if (log.isDebugEnabled())         log.debug("Adding file to results: " + file.getAbsolutePath());
        result.add(ModuleUtil.file2url(file));
      }
    }
  }
 catch (  MalformedURLException e) {
    log.warn("Error while adding module 'lib' folder to URL result list");
  }
catch (  IOException io) {
    log.warn("Error while expanding lib folder",io);
  }
  return result;
}
