{
  boolean notOperator=false;
  Criterion c=null;
  Operator operator=logicCriteria.getOperator();
  Object rightOperand=logicCriteria.getRightOperand();
  Object leftOperand=logicCriteria.getLeftOperand();
  if (operator == null) {
    String conceptName=logicCriteria.getRootToken();
    if (conceptName == null) {
      conceptName=(String)rightOperand;
    }
    Concept concept=Context.getConceptService().getConceptByIdOrName(conceptName);
    c=Restrictions.eq("concept",concept);
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.BEFORE) {
    c=Restrictions.lt("obsDatetime",rightOperand);
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.AFTER) {
    c=Restrictions.gt("obsDatetime",rightOperand);
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.AND) {
    Criterion leftCriteria=null;
    Criterion rightCriteria=null;
    if (leftOperand instanceof LogicCriteria) {
      leftCriteria=this.getCriterion((LogicCriteria)leftOperand,indexDate);
    }
    if (rightOperand instanceof LogicCriteria) {
      rightCriteria=this.getCriterion((LogicCriteria)rightOperand,indexDate);
    }
    if (leftCriteria != null && rightCriteria != null) {
      c=Restrictions.and(leftCriteria,rightCriteria);
    }
  }
 else   if (operator == Operator.OR) {
    Criterion leftCriteria=null;
    Criterion rightCriteria=null;
    if (leftOperand instanceof LogicCriteria) {
      leftCriteria=this.getCriterion((LogicCriteria)leftOperand,indexDate);
    }
    if (rightOperand instanceof LogicCriteria) {
      rightCriteria=this.getCriterion((LogicCriteria)rightOperand,indexDate);
    }
    if (leftCriteria != null && rightCriteria != null) {
      c=Restrictions.or(leftCriteria,rightCriteria);
    }
  }
 else   if (operator == Operator.NOT) {
    notOperator=!notOperator;
  }
 else   if (operator == Operator.CONTAINS) {
    if (rightOperand instanceof Float) {
      Concept concept=Context.getConceptService().getConcept(((Float)rightOperand).intValue());
      c=Restrictions.eq("valueCoded",concept);
    }
 else     if (rightOperand instanceof Integer) {
      Concept concept=Context.getConceptService().getConcept((Integer)rightOperand);
      c=Restrictions.eq("valueCoded",concept);
    }
 else     if (rightOperand instanceof String) {
      Concept concept=Context.getConceptService().getConceptByIdOrName((String)rightOperand);
      c=Restrictions.eq("valueCoded",concept);
    }
 else     if (rightOperand instanceof Concept) {
      c=Restrictions.eq("valueCoded",rightOperand);
    }
 else     log.error("Invalid operand value for CONTAINS operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.EQUALS) {
    if (leftOperand instanceof String && ((String)leftOperand).equalsIgnoreCase(COMPONENT_ENCOUNTER_ID)) {
      EncounterService encounterService=Context.getEncounterService();
      Encounter encounter=encounterService.getEncounter((Integer)rightOperand);
      c=Restrictions.eq("encounter",encounter);
    }
 else     if (rightOperand instanceof Float || rightOperand instanceof Integer)     c=Restrictions.eq("valueNumeric",Double.parseDouble(rightOperand.toString()));
 else     if (rightOperand instanceof String)     c=Restrictions.eq("valueText",rightOperand);
 else     if (rightOperand instanceof Date)     c=Restrictions.eq("valueDatetime",rightOperand);
 else     if (rightOperand instanceof Concept)     c=Restrictions.eq("valueCoded",rightOperand);
 else     log.error("Invalid operand value for EQUALS operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.LTE) {
    if (rightOperand instanceof Float || rightOperand instanceof Integer)     c=Restrictions.le("valueNumeric",Double.parseDouble(rightOperand.toString()));
 else     if (rightOperand instanceof String)     c=Restrictions.le("valueText",rightOperand);
 else     if (rightOperand instanceof Date)     c=Restrictions.le("valueDatetime",rightOperand);
 else     log.error("Invalid operand value for LESS THAN EQUAL operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.GTE) {
    if (rightOperand instanceof Float || rightOperand instanceof Integer)     c=Restrictions.ge("valueNumeric",Double.parseDouble(rightOperand.toString()));
 else     if (rightOperand instanceof String)     c=Restrictions.ge("valueText",rightOperand);
 else     if (rightOperand instanceof Date)     c=Restrictions.ge("valueDatetime",rightOperand);
 else     log.error("Invalid operand value for GREATER THAN EQUAL operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.LT) {
    if (rightOperand instanceof Float || rightOperand instanceof Integer)     c=Restrictions.lt("valueNumeric",Double.parseDouble(rightOperand.toString()));
 else     if (rightOperand instanceof String)     c=Restrictions.lt("valueText",rightOperand);
 else     if (rightOperand instanceof Date)     c=Restrictions.lt("valueDatetime",rightOperand);
 else     log.error("Invalid operand value for LESS THAN operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.GT) {
    if (rightOperand instanceof Float || rightOperand instanceof Integer)     c=Restrictions.gt("valueNumeric",Double.parseDouble(rightOperand.toString()));
 else     if (rightOperand instanceof String)     c=Restrictions.gt("valueText",rightOperand);
 else     if (rightOperand instanceof Date)     c=Restrictions.gt("valueDatetime",rightOperand);
 else     log.error("Invalid operand value for GREATER THAN operation");
    if (notOperator)     c=Restrictions.not(c);
  }
 else   if (operator == Operator.EXISTS) {
  }
 else   if (operator == Operator.ASOF && rightOperand instanceof Date) {
    indexDate=(Date)rightOperand;
    c=Restrictions.le("obsDatetime",indexDate);
  }
 else   if (operator == Operator.WITHIN && rightOperand instanceof Duration) {
    Duration duration=(Duration)rightOperand;
    Calendar within=Calendar.getInstance();
    within.setTime(indexDate);
    if (duration.getUnits() == Duration.Units.YEARS) {
      within.roll(Calendar.YEAR,-duration.getDuration().intValue());
    }
 else     if (duration.getUnits() == Duration.Units.MONTHS) {
      within.roll(Calendar.MONTH,-duration.getDuration().intValue());
    }
 else     if (duration.getUnits() == Duration.Units.WEEKS) {
      within.roll(Calendar.WEEK_OF_YEAR,-duration.getDuration().intValue());
    }
 else     if (duration.getUnits() == Duration.Units.DAYS) {
      within.roll(Calendar.DAY_OF_YEAR,-duration.getDuration().intValue());
    }
 else     if (duration.getUnits() == Duration.Units.MINUTES) {
      within.roll(Calendar.MINUTE,-duration.getDuration().intValue());
    }
 else     if (duration.getUnits() == Duration.Units.SECONDS) {
      within.roll(Calendar.SECOND,-duration.getDuration().intValue());
    }
    c=Restrictions.ge("obsDatetime",within.getTime());
  }
  return c;
}
