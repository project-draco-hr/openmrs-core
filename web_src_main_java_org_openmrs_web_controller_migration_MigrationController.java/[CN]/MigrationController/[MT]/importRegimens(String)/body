{
  PatientIdentifierType pihIdentifierType=Context.getPatientService().getPatientIdentifierTypeByName("HIVEMR-V1");
  OrderType orderType=Context.getOrderService().getOrderType(1);
  if (!orderType.getName().equals("Drug Order")) {
    throw new RuntimeException("ERROR! ASSUMED THAT ORDER TYPE 1 IS DRUG ORDER, BUT IT'S NOT");
  }
  Map<Integer,List<Order>> patientRegimens=new HashMap<Integer,List<Order>>();
  int numAdded=0;
  BufferedReader r=new BufferedReader(new StringReader(csv));
  for (String s=r.readLine(); s != null; s=r.readLine()) {
    String[] st=s.split(",");
    Integer patientId=Integer.valueOf(st[0]);
    String formulationName=st[2];
    Date startDate=parseDate(st[3]);
    Date autoExpireDate=parseDate(st[4]);
    Date discontinuedDate=parseDate(st[5]);
    String discontinuedReason=st[6];
    if (discontinuedReason.trim().length() == 0)     discontinuedReason=null;
    Double doseStrength=Double.parseDouble(st[7]);
    String doseUnit=st[8];
    if (doseUnit.trim().length() == 0)     doseUnit=null;
    Integer dosesPerDay=Integer.valueOf(st[9]);
    Integer daysPerWeek=Integer.valueOf(st[10]);
    Boolean prn=Boolean.valueOf(st[11]);
    String creator=st[12];
    Date dateCreated=parseDate(st[13]);
    String discontinuedBy=st.length > 14 ? st[14] : null;
    if (dosesPerDay == null || dosesPerDay == 0) {
      throw new IllegalArgumentException("Doses per day must be a positive integer");
    }
    Drug drug=Context.getConceptService().getDrug(formulationName);
    if (drug == null)     throw new IllegalArgumentException("Can't find drug '" + formulationName + "'");
    DrugOrder reg=new DrugOrder();
    reg.setDrug(drug);
    reg.setConcept(drug.getConcept());
    reg.setStartDate(startDate);
    reg.setAutoExpireDate(autoExpireDate);
    reg.setDiscontinued(discontinuedDate != null);
    reg.setDiscontinuedDate(discontinuedDate);
    reg.setDose(doseStrength);
    reg.setEquivalentDailyDose(doseStrength);
    reg.setUnits(doseUnit);
    reg.setFrequency(dosesPerDay + "/day x " + daysPerWeek+ " days/week");
    reg.setPrn(prn);
    reg.setComplex(false);
    reg.setOrderType(orderType);
    reg.setCreator(userHelper(creator));
    reg.setDateCreated(dateCreated);
    reg.setDiscontinuedBy(userHelper(discontinuedBy));
    List<Order> pat=patientRegimens.get(patientId);
    if (pat == null) {
      pat=new ArrayList<Order>();
      patientRegimens.put(patientId,pat);
    }
    pat.add(reg);
  }
  for (  Map.Entry<Integer,List<Order>> e : patientRegimens.entrySet()) {
    List<PatientIdentifier> pil=Context.getPatientService().getPatientIdentifiers(e.getKey().toString(),Collections.singletonList(pihIdentifierType),null,null,null);
    if (pil.size() != 1) {
      throw new RuntimeException("Found " + pil.size() + " PatientIdentifiers for "+ pihIdentifierType+ " of "+ e.getKey());
    }
    Patient p=pil.get(0).getPatient();
    List<Order> list=e.getValue();
    Context.getOrderService().createOrdersAndEncounter(p,list);
    numAdded+=list.size();
  }
  return numAdded;
}
