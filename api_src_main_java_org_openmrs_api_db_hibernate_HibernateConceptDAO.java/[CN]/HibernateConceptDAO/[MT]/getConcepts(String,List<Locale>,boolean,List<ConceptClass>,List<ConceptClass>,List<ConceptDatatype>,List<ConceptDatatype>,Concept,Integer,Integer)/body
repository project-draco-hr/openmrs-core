{
  ListPart<Concept> names=new LuceneQueryBuilder<Concept>(sessionFactory.getCurrentSession()){
    @Override protected org.apache.lucene.search.Query prepareQuery() throws ParseException {
      StringBuilder query=new StringBuilder();
      if (!StringUtils.isBlank(phrase)) {
        final Set<Locale> searchLocales;
        if (locales == null) {
          searchLocales=Sets.newHashSet(Context.getLocale());
        }
 else {
          searchLocales=Sets.newHashSet(locales);
        }
        query.append(newNamesQuery(searchLocales,phrase,true));
      }
      if (!includeRetired) {
        query.append(" +retired:false");
      }
      if (requireClasses != null && !requireClasses.isEmpty()) {
        String ids=transformToIds(requireClasses);
        query.append(" +conceptClass.conceptClassId:(").append(ids).append(")");
      }
      if (excludeClasses != null && !excludeClasses.isEmpty()) {
        String ids=transformToIds(excludeClasses);
        query.append(" -conceptClass.conceptClassId:(").append(ids).append(")");
      }
      if (requireDatatypes != null && !requireDatatypes.isEmpty()) {
        String ids=transformToIds(requireDatatypes);
        query.append(" +datatype.conceptDatatypeId:(").append(ids).append(")");
      }
      if (excludeDatatypes != null && !excludeDatatypes.isEmpty()) {
        String ids=transformToIds(excludeDatatypes);
        query.append(" -datatype.conceptDatatypeId:(").append(ids).append(")");
      }
      if (answersToConcept != null) {
        Collection<ConceptAnswer> answers=answersToConcept.getAnswers(false);
        if (answers != null && !answers.isEmpty()) {
          StringBuilder ids=new StringBuilder();
          for (          ConceptAnswer conceptAnswer : answersToConcept.getAnswers(false)) {
            ids.append(conceptAnswer.getAnswerConcept().getId()).append(" ");
          }
          query.append(" +conceptId:(").append(ids).append(")");
        }
      }
      org.apache.lucene.search.Query parsedQuery=newQueryParser().parse(query.toString());
      return parsedQuery;
    }
  }
.listPart(start,size);
  List<ConceptSearchResult> results=Lists.transform(names.getList(),new Function<Concept,ConceptSearchResult>(){
    @Override public ConceptSearchResult apply(    Concept concept){
      return new ConceptSearchResult(phrase,concept,concept.getName());
    }
  }
);
  return results;
}
