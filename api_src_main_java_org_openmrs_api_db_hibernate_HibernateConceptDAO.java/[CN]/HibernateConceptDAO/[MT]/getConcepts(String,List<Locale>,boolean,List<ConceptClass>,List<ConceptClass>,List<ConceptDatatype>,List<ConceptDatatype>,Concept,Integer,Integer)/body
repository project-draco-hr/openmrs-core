{
  if (StringUtils.isBlank(phrase)) {
    phrase="%";
  }
  Criteria searchCriteria=createConceptWordSearchCriteria(phrase,locales,includeRetired,requireClasses,excludeClasses,requireDatatypes,excludeDatatypes,answersToConcept);
  List<ConceptSearchResult> results=new Vector<ConceptSearchResult>();
  if (searchCriteria != null) {
    ProjectionList pl=Projections.projectionList();
    pl.add(Projections.property("cw1.concept"));
    pl.add(Projections.groupProperty("cw1.conceptName"));
    pl.add(Projections.property("cw1.word"));
    pl.add(Projections.max("cw1.weight"),"maxWeight");
    searchCriteria.setProjection(pl);
    searchCriteria.addOrder(Order.desc("maxWeight"));
    if (start != null)     searchCriteria.setFirstResult(start);
    if (size != null && size > 0)     searchCriteria.setMaxResults(size);
    searchCriteria.setResultTransformer(Transformers.TO_LIST);
    List resultObjects=searchCriteria.list();
    for (    Object obj : resultObjects) {
      List list=(List)obj;
      Concept c=(Concept)list.get(0);
      ConceptSearchResult csr=(new ConceptSearchResult((String)list.get(2),c,(ConceptName)list.get(1),(Double)list.get(3)));
      if (!results.contains(csr)) {
        results.add(csr);
      }
    }
  }
  return results;
}
