{
  List<Locale> localesToAdd=new Vector<Locale>();
  for (  Locale locale : locales) {
    Locale languageOnly=new Locale(locale.getLanguage());
    if (locales.contains(languageOnly) == false)     localesToAdd.add(languageOnly);
  }
  locales.addAll(localesToAdd);
  List<String> words=new ArrayList<String>();
  if (phrase.equals("%")) {
    words.add(phrase);
  }
 else {
    words=ConceptWord.getUniqueWords(phrase);
  }
  List<Concept> answers=new Vector<Concept>();
  if (answersToConcept != null && answersToConcept.getAnswers(false) != null) {
    for (    ConceptAnswer conceptAnswer : answersToConcept.getAnswers(false)) {
      answers.add(conceptAnswer.getAnswerConcept());
    }
  }
  if (words.size() > 0 || !answers.isEmpty()) {
    Criteria searchCriteria=sessionFactory.getCurrentSession().createCriteria(ConceptWord.class,"cw1");
    searchCriteria.add(Restrictions.in("locale",locales));
    if (includeRetired == false) {
      searchCriteria.createAlias("concept","concept");
      searchCriteria.add(Restrictions.eq("concept.retired",false));
    }
    if (!answers.isEmpty())     searchCriteria.add(Restrictions.in("cw1.concept",answers));
    if (words.size() > 0) {
      Iterator<String> word=words.iterator();
      searchCriteria.add(Restrictions.like("word",word.next(),MatchMode.START));
      Conjunction junction=Restrictions.conjunction();
      while (word.hasNext()) {
        String w=word.next();
        if (log.isDebugEnabled())         log.debug("Current word: " + w);
        DetachedCriteria crit=DetachedCriteria.forClass(ConceptWord.class).setProjection(Property.forName("concept")).add(Restrictions.eqProperty("concept","cw1.concept")).add(Restrictions.like("word",w,MatchMode.START)).add(Restrictions.in("locale",locales));
        junction.add(Subqueries.exists(crit));
      }
      searchCriteria.add(junction);
    }
    if (requireClasses.size() > 0)     searchCriteria.add(Restrictions.in("concept.conceptClass",requireClasses));
    if (excludeClasses.size() > 0)     searchCriteria.add(Restrictions.not(Restrictions.in("concept.conceptClass",excludeClasses)));
    if (requireDatatypes.size() > 0)     searchCriteria.add(Restrictions.in("concept.datatype",requireDatatypes));
    if (excludeDatatypes.size() > 0)     searchCriteria.add(Restrictions.not(Restrictions.in("concept.datatype",excludeDatatypes)));
    return searchCriteria;
  }
  return null;
}
