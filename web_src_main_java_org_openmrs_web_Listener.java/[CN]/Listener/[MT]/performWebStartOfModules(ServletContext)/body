{
  Log log=LogFactory.getLog(Listener.class);
  List<Module> startedModules=new ArrayList<Module>();
  startedModules.addAll(ModuleFactory.getStartedModules());
  boolean someModuleNeedsARefresh=false;
  for (  Module mod : startedModules) {
    try {
      boolean thisModuleCausesRefresh=WebModuleUtil.startModule(mod,servletContext,true);
      someModuleNeedsARefresh=someModuleNeedsARefresh || thisModuleCausesRefresh;
    }
 catch (    Throwable t) {
      mod.setStartupErrorMessage("Unable to start module",t);
    }
  }
  if (someModuleNeedsARefresh) {
    try {
      WebModuleUtil.refreshWAC(servletContext,true,null);
    }
 catch (    ModuleMustStartException ex) {
      throw ex;
    }
catch (    Throwable t) {
      log.fatal("Unable to refresh the spring application context. Unloading all modules,  Error was:",t);
      try {
        WebModuleUtil.shutdownModules(servletContext);
        for (        Module mod : ModuleFactory.getLoadedModules()) {
          if (!mod.isCoreModule() && !mod.isMandatory()) {
            try {
              ModuleFactory.stopModule(mod,true,true);
            }
 catch (            Throwable t3) {
              log.trace("Unable to shutdown module:" + mod,t3);
            }
          }
        }
        WebModuleUtil.refreshWAC(servletContext,true,null);
      }
 catch (      MandatoryModuleException ex) {
        throw new MandatoryModuleException(ex.getModuleId(),"Got an error while starting a mandatory module: " + t.getMessage() + ". Check the server logs for more information");
      }
catch (      Throwable t2) {
        log.warn("caught another error: ",t2);
        throw t2;
      }
    }
  }
  for (  Module mod : ModuleFactory.getStartedModules()) {
    WebModuleUtil.loadServlets(mod,servletContext);
    WebModuleUtil.loadFilters(mod,servletContext);
  }
}
