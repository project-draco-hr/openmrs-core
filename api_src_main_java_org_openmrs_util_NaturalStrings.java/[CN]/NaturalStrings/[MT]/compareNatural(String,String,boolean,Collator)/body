{
  int sIndex=0;
  int tIndex=0;
  int sLength=s.length();
  int tLength=t.length();
  while (true) {
    if (sIndex == sLength && tIndex == tLength) {
      return 0;
    }
    if (sIndex == sLength) {
      return -1;
    }
    if (tIndex == tLength) {
      return 1;
    }
    char sChar=s.charAt(sIndex);
    char tChar=t.charAt(tIndex);
    boolean sCharIsDigit=Character.isDigit(sChar);
    boolean tCharIsDigit=Character.isDigit(tChar);
    if (sCharIsDigit && tCharIsDigit) {
      int sLeadingZeroCount=0;
      while (sChar == '0') {
        ++sLeadingZeroCount;
        ++sIndex;
        if (sIndex == sLength) {
          break;
        }
        sChar=s.charAt(sIndex);
      }
      int tLeadingZeroCount=0;
      while (tChar == '0') {
        ++tLeadingZeroCount;
        ++tIndex;
        if (tIndex == tLength) {
          break;
        }
        tChar=t.charAt(tIndex);
      }
      boolean sAllZero=sIndex == sLength || !Character.isDigit(sChar);
      boolean tAllZero=tIndex == tLength || !Character.isDigit(tChar);
      if (sAllZero && tAllZero) {
        continue;
      }
      if (sAllZero && !tAllZero) {
        return -1;
      }
      if (tAllZero) {
        return 1;
      }
      int diff=0;
      do {
        if (diff == 0) {
          diff=sChar - tChar;
        }
        ++sIndex;
        ++tIndex;
        if (sIndex == sLength && tIndex == tLength) {
          return diff != 0 ? diff : sLeadingZeroCount - tLeadingZeroCount;
        }
        if (sIndex == sLength) {
          if (diff == 0) {
            return -1;
          }
          return Character.isDigit(t.charAt(tIndex)) ? -1 : diff;
        }
        if (tIndex == tLength) {
          if (diff == 0) {
            return 1;
          }
          return Character.isDigit(s.charAt(sIndex)) ? 1 : diff;
        }
        sChar=s.charAt(sIndex);
        tChar=t.charAt(tIndex);
        sCharIsDigit=Character.isDigit(sChar);
        tCharIsDigit=Character.isDigit(tChar);
        if (!sCharIsDigit && !tCharIsDigit) {
          if (diff != 0) {
            return diff;
          }
          break;
        }
        if (!sCharIsDigit) {
          return -1;
        }
        if (!tCharIsDigit) {
          return 1;
        }
      }
 while (true);
    }
 else {
      if (collator != null) {
        int aw=sIndex;
        int bw=tIndex;
        do {
          ++sIndex;
        }
 while (sIndex < sLength && !Character.isDigit(s.charAt(sIndex)));
        do {
          ++tIndex;
        }
 while (tIndex < tLength && !Character.isDigit(t.charAt(tIndex)));
        String as=s.substring(aw,sIndex);
        String bs=t.substring(bw,tIndex);
        int subwordResult=collator.compare(as,bs);
        if (subwordResult != 0) {
          return subwordResult;
        }
      }
 else {
        do {
          if (sChar != tChar) {
            if (caseSensitive) {
              return sChar - tChar;
            }
            sChar=Character.toUpperCase(sChar);
            tChar=Character.toUpperCase(tChar);
            if (sChar != tChar) {
              sChar=Character.toLowerCase(sChar);
              tChar=Character.toLowerCase(tChar);
              if (sChar != tChar) {
                return sChar - tChar;
              }
            }
          }
          ++sIndex;
          ++tIndex;
          if (sIndex == sLength && tIndex == tLength) {
            return 0;
          }
          if (sIndex == sLength) {
            return -1;
          }
          if (tIndex == tLength) {
            return 1;
          }
          sChar=s.charAt(sIndex);
          tChar=t.charAt(tIndex);
          sCharIsDigit=Character.isDigit(sChar);
          tCharIsDigit=Character.isDigit(tChar);
        }
 while (!sCharIsDigit && !tCharIsDigit);
      }
    }
  }
}
