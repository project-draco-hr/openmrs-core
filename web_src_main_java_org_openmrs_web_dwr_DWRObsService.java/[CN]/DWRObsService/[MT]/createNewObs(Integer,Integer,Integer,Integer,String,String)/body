{
  log.info("Create new observation ");
  Date obsDate=null;
  if (obsDateStr != null) {
    SimpleDateFormat sdf=Context.getDateFormat();
    try {
      obsDate=sdf.parse(obsDateStr);
    }
 catch (    ParseException e) {
      log.error("Error parsing date ... " + obsDate);
      throw e;
    }
  }
  Person person=Context.getPersonService().getPerson(personId);
  Concept concept=Context.getConceptService().getConcept(conceptId);
  Encounter encounter=(encounterId == null) ? null : Context.getEncounterService().getEncounter(encounterId);
  Obs obs=new Obs();
  obs.setPerson(person);
  obs.setConcept(concept);
  obs.setObsDatetime(obsDate);
  if (encounter != null) {
    obs.setEncounter(encounter);
    obs.setLocation(encounter.getLocation());
  }
 else {
    Location location=null;
    if (locationId != null) {
      Context.getLocationService().getLocation(locationId);
    }
    if (location == null) {
      location=Context.getLocationService().getDefaultLocation();
    }
    obs.setLocation(location);
  }
  obs.setCreator(Context.getAuthenticatedUser());
  obs.setDateCreated(new Date());
  String hl7DataType=concept.getDatatype().getHl7Abbreviation();
  if ("NM".equals(hl7DataType)) {
    obs.setValueNumeric(Double.valueOf(valueText));
  }
 else   if ("DT".equals(hl7DataType)) {
    Date obsDateValue=null;
    if (valueText != null) {
      SimpleDateFormat sdft=Context.getDateFormat();
      try {
        obsDateValue=sdft.parse(valueText);
      }
 catch (      ParseException e) {
        log.warn("Date value has format error: " + obsDateValue,e);
        throw e;
      }
    }
    obs.setValueDatetime(obsDateValue);
  }
 else   if ("CWE".equals(hl7DataType)) {
    if (valueText != null) {
      Collection<ConceptAnswer> conceptAnswers=concept.getAnswers(false);
      int conceptIdFromValueTest;
      try {
        conceptIdFromValueTest=Integer.parseInt(valueText);
      }
 catch (      NumberFormatException e) {
        log.error("Unable to parse given value text to integer while resolving concept id" + valueText,e);
        throw new Exception("Can't resolve concept id. Please specify valid id" + valueText);
      }
      for (      ConceptAnswer answer : conceptAnswers) {
        if (answer.getAnswerConcept().getId() == conceptIdFromValueTest) {
          obs.setValueCoded(answer.getAnswerConcept());
        }
      }
    }
  }
 else   if ("BIT".equals(hl7DataType)) {
    String booleanConceptId=null;
    AdministrationService administrationService=Context.getAdministrationService();
    if ("Yes".equalsIgnoreCase(valueText) || "True".equalsIgnoreCase(valueText) || "1".equals(valueText)) {
      booleanConceptId=administrationService.getGlobalProperty("concept.true");
    }
 else     if ("No".equalsIgnoreCase(valueText) || "False".equalsIgnoreCase(valueText) || "0".equals(valueText)) {
      booleanConceptId=administrationService.getGlobalProperty("concept.false");
    }
    Concept booleanConcept=null;
    if (booleanConceptId != null) {
      try {
        booleanConcept=Context.getConceptService().getConcept(Integer.parseInt(booleanConceptId));
      }
 catch (      NumberFormatException e) {
        log.error("Unable to parse concept id string to integer to resolve concept" + booleanConceptId,e);
        throw new Exception("No boolean concept found in the system");
      }
    }
    obs.setValueCoded(booleanConcept);
  }
 else {
    obs.setValueText(valueText);
  }
  Context.getObsService().saveObs(obs,null);
}
