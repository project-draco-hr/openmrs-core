{
  HttpSession httpSession=request.getSession();
  String view=getFormView();
  if (!errors.hasErrors()) {
    User user=Context.getAuthenticatedUser();
    UserService us=Context.getUserService();
    OptionsForm opts=(OptionsForm)obj;
    Map<String,String> properties=user.getUserProperties();
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCATION,opts.getDefaultLocation());
    properties.put(OpenmrsConstants.USER_PROPERTY_DEFAULT_LOCALE,opts.getDefaultLocale());
    properties.put(OpenmrsConstants.USER_PROPERTY_PROFICIENT_LOCALES,opts.getProficientLocales());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_RETIRED,opts.getShowRetiredMessage().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_SHOW_VERBOSE,opts.getVerbose().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION,opts.getNotification() == null ? "" : opts.getNotification().toString());
    properties.put(OpenmrsConstants.USER_PROPERTY_NOTIFICATION_ADDRESS,opts.getNotificationAddress().toString());
    if (!opts.getOldPassword().equals("")) {
      try {
        String password=opts.getNewPassword();
        if (password.length() > 0) {
          if (password.length() < 6)           errors.reject("error.password.length");
          if (StringUtils.isAlpha(password))           errors.reject("error.password.characters");
          if (password.equals(user.getUsername()) || password.equals(user.getSystemId()))           errors.reject("error.password.weak");
          if (password.equals(opts.getOldPassword()) && !errors.hasErrors())           errors.reject("error.password.different");
        }
        if (!errors.hasErrors()) {
          us.changePassword(opts.getOldPassword(),password);
          if (properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD))           properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
        }
      }
 catch (      APIException e) {
        errors.rejectValue("oldPassword","error.password.match");
      }
    }
 else {
      if (!opts.getNewPassword().equals("")) {
        errors.rejectValue("oldPassword","error.password.incorrect");
      }
    }
    if (!opts.getSecretQuestionPassword().equals("")) {
      if (!errors.hasErrors()) {
        try {
          user.setSecretQuestion(opts.getSecretQuestionNew());
          us.changeQuestionAnswer(opts.getSecretQuestionPassword(),opts.getSecretQuestionNew(),opts.getSecretAnswerNew());
        }
 catch (        APIException e) {
          errors.rejectValue("secretQuestionPassword","error.password.match");
        }
      }
    }
 else     if (!opts.getSecretAnswerNew().equals("")) {
      errors.rejectValue("secretQuestionPassword","error.password.incorrect");
    }
    if (opts.getUsername().length() > 0 && !errors.hasErrors()) {
      Context.addProxyPrivilege("View Users");
      if (us.hasDuplicateUsername(user)) {
        errors.rejectValue("username","error.username.taken");
      }
    }
    if (!errors.hasErrors()) {
      user.setUsername(opts.getUsername());
      user.setUserProperties(properties);
      Context.addProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
      us.updateUser(user);
      Context.removeProxyPrivilege(OpenmrsConstants.PRIV_EDIT_USERS);
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"options.saved");
    }
 else {
      return super.processFormSubmission(request,response,opts,errors);
    }
    view=getSuccessView();
  }
  return new ModelAndView(new RedirectView(view));
}
