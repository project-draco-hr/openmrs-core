{
  try {
    int index=fn.indexOf(".mlm");
    String cfn=fn.substring(0,index);
    ArdenBaseLexer lexer=new ArdenBaseLexer(s);
    ArdenBaseParser parser=new ArdenBaseParser(lexer);
    parser.startRule();
    BaseAST t=(BaseAST)parser.getAST();
    OutputStream os=new FileOutputStream(cfn + ".java");
    Writer w=new OutputStreamWriter(os);
    System.err.println("Wrote to file - " + cfn + ".java");
    System.err.println(t.toStringTree());
    ArdenBaseTreeParser treeParser=new ArdenBaseTreeParser();
    String maintenance=treeParser.maintenance(t,ardObj);
    w.write("/********************************************************************" + "\n");
    w.write(maintenance);
    System.err.println(t.getNextSibling().toStringTree());
    String library=treeParser.library(t.getNextSibling(),ardObj);
    w.write(library);
    w.write("\n********************************************************************/\n");
    w.write("package org.openmrs.arden;\n\n");
    w.write("import java.util.Iterator;\nimport java.util.Locale;\nimport java.util.Set;\n");
    w.write("import java.util.HashMap;\n");
    w.write("import org.openmrs.Concept;\nimport org.openmrs.Obs;\nimport org.openmrs.Patient;\n");
    w.write("import org.openmrs.api.context.Context;\n\n");
    String classname=ardObj.getClassName();
    w.write("public class " + classname + "{\n");
    w.write("private Context context;\nprivate Patient patient;\nprivate Locale locale;\nprivate String firstname;\n");
    w.write("private HashMap<String, String> userVarMap;\n");
    w.write("\n\n//Constructor\n");
    w.write("public " + classname + "(Context c, Integer pid, Locale l){\n");
    w.write("\tcontext = c;\n\tlocale = l;\n\tpatient = c.getPatientService().getPatient(pid);\n");
    w.write("\tuserVarMap = new HashMap <String, String>();\n");
    w.write("\tfirstname = patient.getPatientName().getGivenName();\n}\n\n\n");
    w.write("public Obs getObsForConceptForPatient(Concept concept, Locale locale, Patient patient) {\n");
    w.write("\tSet <Obs> MyObs;\n");
    w.write("\tObs obs = new Obs();\n\t{");
    w.write("\t\tMyObs = context.getObsService().getObservations(patient, concept);\n");
    w.write("\t\tIterator iter = MyObs.iterator();\n");
    w.write("\t\tif(iter.hasNext()) {\n");
    w.write("\t\t\twhile(iter.hasNext())	{\n");
    w.write("\t\t\t\tobs = (Obs) iter.next();\n");
    w.write("\t\t\t\tSystem.out.println(obs.getValueAsString(locale));\n");
    w.write("\t\t\t}\n");
    w.write("\t\t\t\treturn obs;\n");
    w.write("\t\t}\n");
    w.write("\t\telse {\n");
    w.write("\t\t\treturn null;\n");
    w.write("\t\t}\n");
    w.write("\t}\n");
    w.write("}\n\n");
    w.write("public boolean run() {\n");
    w.write("\tboolean retVal = false;\n");
    w.write("\tif(evaluate()) {\n");
    w.write("\taction();\n");
    w.write("\t\tString str = userVarMap.get(\"ActionStr\");\n");
    w.write("\t\tSystem.out.println(str);\n");
    w.write("\t}\n");
    w.write("\treturn retVal;\n");
    w.write("}\n\n");
    w.flush();
    System.err.println(t.getNextSibling().getNextSibling().toStringTree());
    treeParser.data(t.getNextSibling().getNextSibling(),ardObj);
    System.err.println("---------------------------------AFter data ----------------------------------");
    ardObj.PrintConceptMap();
    System.err.println("-------------------------------------------------------------------");
    System.err.println(t.getNextSibling().getNextSibling().getNextSibling().toStringTree());
    String logicstr=treeParser.logic(t.getNextSibling().getNextSibling().getNextSibling(),ardObj);
    System.err.println("---------------------------------AFter Logic ----------------------------------");
    ardObj.PrintConceptMap();
    System.err.println("-------------------------------------------------------------------");
    ardObj.PrintEvaluateList();
    ardObj.WriteEvaluate(w);
    String actionstr=treeParser.action(t.getNextSibling().getNextSibling().getNextSibling().getNextSibling(),ardObj);
    ardObj.WriteAction(actionstr,w);
    w.append("}");
    w.flush();
    w.close();
  }
 catch (  Exception e) {
    System.err.println("parser exception: " + e);
    e.printStackTrace();
  }
}
