{
  try {
    ArdenBaseLexer lexer=new ArdenBaseLexer(s);
    ArdenBaseParser parser=new ArdenBaseParser(lexer);
    parser.startRule();
    BaseAST t=(BaseAST)parser.getAST();
    OutputStream os=new FileOutputStream("Testfile");
    Writer w=new OutputStreamWriter(os);
    t.xmlSerialize(w);
    w.write("\n");
    w.flush();
    System.err.println("Wrote to file - " + "Testfile");
    DumpASTVisitor visitor=new DumpASTVisitor();
    visitor.visit(t);
    System.err.println(t.toStringTree());
    ArdenBaseTreeParser treeParser=new ArdenBaseTreeParser();
    treeParser.data(t,ardObj);
    System.err.println("---------------------------------AFter data ----------------------------------");
    ardObj.PrintConceptMap();
    System.err.println("-------------------------------------------------------------------");
    System.err.println(t.getNextSibling().toStringTree());
    String logicstr=treeParser.logic(t.getNextSibling(),ardObj);
    System.err.println("---------------------------------AFter Logic ----------------------------------");
    ardObj.PrintConceptMap();
    System.err.println("-------------------------------------------------------------------");
    ardObj.PrintEvaluateList();
    if (ardObj.Evaluate()) {
      String actionstr=treeParser.action(t.getNextSibling().getNextSibling());
    }
  }
 catch (  Exception e) {
    System.err.println("parser exception: " + e);
    e.printStackTrace();
  }
}
