{
  Token theRetToken=null;
  tryAgain:   for (; ; ) {
    Token _token=null;
    int _ttype=Token.INVALID_TYPE;
    resetText();
    try {
      try {
switch (LA(1)) {
case '}':
{
            mRCURLY(true);
            theRetToken=_returnToken;
            break;
          }
case ',':
{
          mCOMMA(true);
          theRetToken=_returnToken;
          break;
        }
case ')':
{
        mRPAREN(true);
        theRetToken=_returnToken;
        break;
      }
case '"':
{
      mSTRING_LITERAL(true);
      theRetToken=_returnToken;
      break;
    }
case '\t':
case '\n':
case '\u000c':
case '\r':
case ' ':
{
    mWS(true);
    theRetToken=_returnToken;
    break;
  }
case 'A':
case 'B':
case 'C':
case 'D':
case 'E':
case 'F':
case 'G':
case 'H':
case 'I':
case 'J':
case 'K':
case 'L':
case 'M':
case 'N':
case 'O':
case 'P':
case 'Q':
case 'R':
case 'S':
case 'T':
case 'U':
case 'V':
case 'W':
case 'X':
case 'Y':
case 'Z':
case 'a':
case 'b':
case 'c':
case 'd':
case 'e':
case 'f':
case 'g':
case 'h':
case 'i':
case 'j':
case 'k':
case 'l':
case 'm':
case 'n':
case 'o':
case 'p':
case 'q':
case 'r':
case 's':
case 't':
case 'u':
case 'v':
case 'w':
case 'x':
case 'y':
case 'z':
{
  mID(true);
  theRetToken=_returnToken;
  break;
}
case '-':
{
mMINUS(true);
theRetToken=_returnToken;
break;
}
case '_':
{
mUNDERSCORE(true);
theRetToken=_returnToken;
break;
}
case '@':
{
mAT(true);
theRetToken=_returnToken;
break;
}
case '=':
{
mEQUALS(true);
theRetToken=_returnToken;
break;
}
case '[':
{
mLBRACKET(true);
theRetToken=_returnToken;
break;
}
case ']':
{
mRBRACKET(true);
theRetToken=_returnToken;
break;
}
case '+':
{
mPLUS(true);
theRetToken=_returnToken;
break;
}
case '*':
{
mTIMES(true);
theRetToken=_returnToken;
break;
}
case '&':
{
mAMPERSAND(true);
theRetToken=_returnToken;
break;
}
case '%':
{
mPERCENT(true);
theRetToken=_returnToken;
break;
}
case '#':
{
mPOUND(true);
theRetToken=_returnToken;
break;
}
case '?':
{
mQUESTION(true);
theRetToken=_returnToken;
break;
}
case '|':
{
mACTION_OP(true);
theRetToken=_returnToken;
break;
}
default :
if ((LA(1) == '{') && ((LA(2) >= '\u0000' && LA(2) <= '\u00ff'))) {
mARDEN_CURLY_BRACKETS(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == ':') && (LA(2) == '/')) {
mNOT_COMMENT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '/') && (LA(2) == '/')) {
mCOMMENT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '/') && (LA(2) == '*')) {
mML_COMMENT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == ':') && (LA(2) == '=')) {
mBECOMES(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '.') && (LA(2) == '.')) {
mDOTDOT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '/') && (LA(2) == '=')) {
mNOT_EQUALS(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (LA(2) == '=')) {
mLTE(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '>') && (LA(2) == '=')) {
mGTE(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (LA(2) == '>')) {
mNE(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == ';') && (LA(2) == ';')) {
mENDBLOCK(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '{') && (true)) {
mLCURLY(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '(') && (true)) {
mLPAREN(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '\'') && (true)) {
mTERM_LITERAL(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '.') && (true)) {
mDOT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '/') && (true)) {
mDIV(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == ':') && (true)) {
mCOLON(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == ';') && (true)) {
mSEMI(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '<') && (true)) {
mLT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '>') && (true)) {
mGT(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '\'') && (true)) {
mAPOSTROPHE(true);
theRetToken=_returnToken;
}
 else if ((LA(1) == '\'') && (true)) {
mSINGLE_QUOTE(true);
theRetToken=_returnToken;
}
 else {
mINTLIT(true);
theRetToken=_returnToken;
}
}
if (_returnToken == null) continue tryAgain;
_ttype=_returnToken.getType();
_returnToken.setType(_ttype);
return _returnToken;
}
 catch (RecognitionException e) {
throw new TokenStreamRecognitionException(e);
}
}
 catch (CharStreamException cse) {
if (cse instanceof CharStreamIOException) {
throw new TokenStreamIOException(((CharStreamIOException)cse).io);
}
 else {
throw new TokenStreamException(cse.getMessage());
}
}
}
}
