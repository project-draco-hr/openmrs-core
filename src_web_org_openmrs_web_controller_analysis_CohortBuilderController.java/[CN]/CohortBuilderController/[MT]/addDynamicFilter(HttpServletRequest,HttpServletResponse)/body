{
  if (Context.isAuthenticated()) {
    String filterClassName=request.getParameter("filterClass");
    String temp=request.getParameter("vars");
    String[] args=temp.split(",");
    log.debug(args.length + " args: vars=" + temp);
    List<ArgHolder> argValues=new ArrayList<ArgHolder>();
    for (    String arg : args) {
      log.debug("looking at: " + arg);
      if (arg.trim().length() == 0)       continue;
      String[] u=arg.split("#");
      if (u.length != 2) {
        StringBuilder msg=new StringBuilder();
        msg.append(arg);
        msg.append(" -> ");
        for (        String str : u) {
          msg.append(str).append(" , ");
        }
        throw new IllegalArgumentException("shortcut option arguments must be label#Type. " + msg);
      }
      String name=u[0];
      Class c;
      boolean isList=false;
      if (u[1].startsWith("*")) {
        u[1]=u[1].substring(1);
        isList=true;
      }
      try {
        c=Class.forName(u[1]);
      }
 catch (      ClassNotFoundException ex) {
        throw new IllegalArgumentException(ex);
      }
      argValues.add(new ArgHolder(c,name,isList ? request.getParameterValues(name) : request.getParameter(name)));
    }
    log.debug("argValues has size " + argValues.size());
    PatientSearch search=new PatientSearch();
    search.setFilterClass(Class.forName(filterClassName));
    for (    ArgHolder arg : argValues) {
      Object val=arg.getArgValue();
      if (val instanceof String[]) {
        String[] valArray=(String[])val;
        for (int i=0; i < valArray.length; ++i)         if (StringUtils.hasText(valArray[i]))         search.addArgument(arg.getArgName(),valArray[i],arg.getArgClass());
      }
 else {
        if (StringUtils.hasText((String)val))         search.addArgument(arg.getArgName(),(String)val,arg.getArgClass());
      }
    }
    log.debug("Created PatientSearch: " + search);
    if (search != null) {
      CohortSearchHistory history=getMySearchHistory(request);
      history.addSearchItem(search);
    }
  }
  return new ModelAndView(new RedirectView(getSuccessView()));
}
