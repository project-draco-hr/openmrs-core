{
  if (Context.isAuthenticated()) {
    String filterClassName=request.getParameter("filterClass");
    String temp=request.getParameter("vars");
    String[] args=temp.split(",");
    log.debug(args.length + " args: vars=" + temp);
    List<ArgHolder> argValues=new ArrayList<ArgHolder>();
    for (    String arg : args) {
      log.debug("looking at: " + arg);
      if (arg.trim().length() == 0)       continue;
      String[] u=arg.split("#");
      if (u.length != 2) {
        StringBuilder msg=new StringBuilder();
        msg.append(arg);
        msg.append(" -> ");
        for (        String str : u) {
          msg.append(str).append(" , ");
        }
        throw new IllegalArgumentException("shortcut option arguments must be label#Type. " + msg);
      }
      String name=u[0];
      Class c;
      boolean isList=false;
      if (u[1].startsWith("*")) {
        u[1]=u[1].substring(1);
        isList=true;
      }
      try {
        c=Class.forName(u[1]);
      }
 catch (      ClassNotFoundException ex) {
        throw new IllegalArgumentException(ex);
      }
      argValues.add(new ArgHolder(c,name,isList ? request.getParameterValues(name) : request.getParameter(name)));
    }
    log.debug("argValues has size " + argValues.size());
    PatientFilter filterInstance=null;
    try {
      Class filterClass=Class.forName(filterClassName);
      log.debug("about to call newInstance on " + filterClass);
      filterInstance=(PatientFilter)filterClass.newInstance();
      log.debug("result is " + filterInstance);
      for (      ArgHolder arg : argValues) {
        log.debug("looking at " + arg);
        try {
          PropertyDescriptor pd=new PropertyDescriptor(arg.getArgName(),filterClass);
          Object argVal=null;
          if (arg.hasValue()) {
            String[] toLookAt=null;
            List<Object> vals=new ArrayList<Object>();
            boolean isList=false;
            if (arg.getArgValue() instanceof String[]) {
              isList=true;
              toLookAt=(String[])arg.getArgValue();
            }
 else {
              toLookAt=new String[1];
              toLookAt[0]=(String)arg.getArgValue();
            }
            for (            String val : toLookAt) {
              Object thisVal=null;
              if (checkClassHelper(Location.class,pd.getPropertyType(),arg.getArgClass())) {
                LocationEditor le=new LocationEditor();
                le.setAsText(val);
                thisVal=le.getValue();
              }
 else               if (checkClassHelper(String.class,pd.getPropertyType(),arg.getArgClass())) {
                thisVal=val;
              }
 else               if (checkClassHelper(Integer.class,pd.getPropertyType(),arg.getArgClass())) {
                try {
                  thisVal=Integer.valueOf(val);
                }
 catch (                Exception ex) {
                }
              }
 else               if (checkClassHelper(Boolean.class,pd.getPropertyType(),arg.getArgClass())) {
                try {
                  thisVal=Boolean.valueOf(val);
                }
 catch (                Exception ex) {
                }
              }
 else               if (checkClassHelper(Double.class,pd.getPropertyType(),arg.getArgClass())) {
                try {
                  thisVal=Double.valueOf(val);
                }
 catch (                Exception ex) {
                }
              }
 else               if (checkClassHelper(Concept.class,pd.getPropertyType(),arg.getArgClass())) {
                ConceptEditor ce=new ConceptEditor();
                ce.setAsText(val);
                Concept concept=(Concept)ce.getValue();
                if (concept != null)                 concept.getName(Context.getLocale());
                thisVal=concept;
              }
 else               if (checkClassHelper(Program.class,pd.getPropertyType(),arg.getArgClass())) {
                ProgramEditor pe=new ProgramEditor();
                pe.setAsText(val);
                Program program=(Program)pe.getValue();
                if (program != null)                 program.getConcept().getName();
                thisVal=program;
              }
 else               if (checkClassHelper(ProgramWorkflowState.class,pd.getPropertyType(),arg.getArgClass())) {
                ProgramWorkflowStateEditor ed=new ProgramWorkflowStateEditor();
                ed.setAsText(val);
                ProgramWorkflowState state=(ProgramWorkflowState)ed.getValue();
                if (state != null)                 state.getConcept().getName();
                thisVal=state;
              }
 else               if (checkClassHelper(EncounterType.class,pd.getPropertyType(),arg.getArgClass())) {
                EncounterTypeEditor ed=new EncounterTypeEditor();
                ed.setAsText(val);
                thisVal=ed.getValue();
              }
 else               if (checkClassHelper(Drug.class,pd.getPropertyType(),arg.getArgClass())) {
                DrugEditor ed=new DrugEditor();
                ed.setAsText(val);
                thisVal=ed.getValue();
              }
 else               if (checkClassHelper(Date.class,pd.getPropertyType(),arg.getArgClass())) {
                DateFormat df=new SimpleDateFormat(OpenmrsConstants.OPENMRS_LOCALE_DATE_PATTERNS().get(Context.getLocale().toString().toLowerCase()),Context.getLocale());
                CustomDateEditor ed=new CustomDateEditor(df,true,10);
                ed.setAsText(val);
                thisVal=ed.getValue();
              }
 else               if (checkClassHelper(PersonAttributeType.class,pd.getPropertyType(),arg.getArgClass())) {
                PersonAttributeTypeEditor ed=new PersonAttributeTypeEditor();
                ed.setAsText(val);
                thisVal=ed.getValue();
              }
 else               if (pd.getPropertyType().isEnum()) {
                List<Enum> constants=Arrays.asList((Enum[])pd.getPropertyType().getEnumConstants());
                for (                Enum e : constants) {
                  if (e.toString().equals(val)) {
                    thisVal=e;
                    break;
                  }
                }
              }
 else               if (pd.getPropertyType().equals(Object.class)) {
                log.debug("fell through to plain object, treated as string");
                thisVal=val;
              }
              if (thisVal != null)               vals.add(thisVal);
            }
            if (isList && vals.size() > 0)             argVal=vals;
 else             if (vals.size() > 0)             argVal=vals.get(0);
          }
          if (argVal != null) {
            log.debug("about to set " + arg.getArgName() + " to "+ argVal);
            pd.getWriteMethod().invoke(filterInstance,argVal);
          }
        }
 catch (        Exception ex) {
          log.error("Couldn't set " + arg.getArgName() + " ("+ arg.getArgClass()+ ") to "+ arg.getArgValue(),ex);
        }
      }
    }
 catch (    Exception ex) {
      log.error("Couldn't instantiate class " + filterClassName,ex);
    }
    log.debug("final filter is " + filterInstance);
    if (filterInstance != null) {
      CohortSearchHistory history=(CohortSearchHistory)Context.getVolatileUserData("CohortBuilderSearchHistory");
      history.addSearchItem(filterInstance);
    }
  }
  return new ModelAndView(new RedirectView(getSuccessView()));
}
