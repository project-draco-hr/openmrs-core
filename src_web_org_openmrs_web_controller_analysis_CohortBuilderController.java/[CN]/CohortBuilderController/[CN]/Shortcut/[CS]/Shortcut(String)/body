{
  String label=null;
  if (spec.indexOf(":") > 0) {
    label=spec.substring(0,spec.indexOf(":"));
    spec=spec.substring(spec.indexOf(":") + 1);
  }
  if (spec.startsWith("@")) {
    List<ArgHolder> temp=new ArrayList<ArgHolder>();
    if (spec.indexOf('(') <= 0 || spec.indexOf(')') <= 0)     log.error("this line is missing a ( or a ): " + spec);
    setClassName(spec.substring(1,spec.indexOf('(')));
    String s=spec.substring(spec.indexOf('(') + 1,spec.lastIndexOf(')'));
    String[] t=s.split(",");
    for (    String arg : t) {
      if (arg.trim().length() == 0)       continue;
      if (arg.startsWith("\'") && arg.endsWith("\'")) {
        temp.add(new ArgHolder(null,arg.substring(1,arg.length() - 1),null));
      }
 else {
        String[] u=arg.split("#");
        if (u.length != 2) {
          throw new IllegalArgumentException("Shortcut arguments must be name#Type. arg = " + arg);
        }
        Class clz;
        try {
          clz=Class.forName(u[1]);
        }
 catch (        ClassNotFoundException ex) {
          throw new IllegalArgumentException(ex);
        }
        if (u[0].indexOf('=') > 0) {
          String[] v=u[0].split("=");
          if (v.length != 2) {
            throw new IllegalArgumentException("shortcut arguments can have only one equal sign");
          }
          temp.add(new ArgHolder(clz,v[0],v[1]));
        }
 else {
          String name=u[0];
          setHasPromptArgs(true);
          temp.add(new ArgHolder(clz,name,null));
        }
      }
    }
    if (temp.size() > 0) {
      setArgs(temp);
      StringBuilder sb=new StringBuilder();
      for (      ArgHolder arg : temp)       if (arg.getArgClass() != null) {
        if (sb.length() > 0)         sb.append(",");
        sb.append(arg.getArgName() + "#" + arg.getArgClass().getName());
      }
      setVars(sb.toString());
    }
  }
 else {
    PatientFilter pf=Context.getReportObjectService().getPatientFilterByName(spec);
    if (label == null)     label=pf.getName();
    if (pf != null)     setPatientFilter(pf);
 else     throw new IllegalArgumentException("Couldn't find a patient filter called: " + spec);
  }
  setLabel(label);
}
