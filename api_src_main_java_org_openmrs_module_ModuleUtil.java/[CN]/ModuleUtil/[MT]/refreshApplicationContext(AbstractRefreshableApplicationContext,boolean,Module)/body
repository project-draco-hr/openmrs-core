{
  Set<Module> startedModules=new LinkedHashSet<Module>(ModuleFactory.getStartedModulesInOrder());
  for (  Module module : startedModules) {
    try {
      if (module.getModuleActivator() != null)       module.getModuleActivator().willRefreshContext();
    }
 catch (    Throwable t) {
      log.warn("Unable to call willRefreshContext() method in the module's activator",t);
    }
  }
  OpenmrsClassLoader.saveState();
  ServiceContext.destroyInstance();
  try {
    ctx.stop();
    ctx.close();
  }
 catch (  Exception e) {
    log.warn("Exception while stopping and closing context: ",e);
  }
  OpenmrsClassLoader.destroyInstance();
  ctx.setClassLoader(OpenmrsClassLoader.getInstance());
  Thread.currentThread().setContextClassLoader(OpenmrsClassLoader.getInstance());
  ServiceContext.getInstance().startRefreshingContext();
  try {
    ctx.refresh();
  }
  finally {
    ServiceContext.getInstance().doneRefreshingContext();
  }
  ctx.setClassLoader(OpenmrsClassLoader.getInstance());
  Thread.currentThread().setContextClassLoader(OpenmrsClassLoader.getInstance());
  OpenmrsClassLoader.restoreState();
  if (log.isDebugEnabled())   log.debug("Reloading advice for all started modules: " + startedModules.size());
  try {
    Context.openSessionWithCurrentUser();
    for (    Module module : startedModules) {
      if (!module.isStarted()) {
        continue;
      }
      ModuleFactory.loadAdvice(module);
      try {
        ModuleFactory.passDaemonToken(module);
        if (module.getModuleActivator() != null) {
          module.getModuleActivator().contextRefreshed();
          try {
            if (isOpenmrsStartup)             module.getModuleActivator().started();
 else             if (!isOpenmrsStartup && module.equals(startedModule))             module.getModuleActivator().started();
          }
 catch (          Exception e) {
            log.warn("Unable to invoke started() method on the module's activator",e);
            ModuleFactory.stopModule(module,true,true);
          }
        }
      }
 catch (      Throwable t) {
        log.warn("Unable to invoke method on the module's activator ",t);
      }
    }
  }
  finally {
    Context.closeSessionWithCurrentUser();
  }
  return ctx;
}
