{
  executeDataSet("org/openmrs/report/include/ReportTests-patients.xml");
  if (Context.getReportObjectService().getPatientSearch("Male") == null) {
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("gender","m",String.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Male",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("Female") == null) {
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("gender","f",String.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Female",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("Adult") == null) {
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("minAge","15",Integer.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Adult",ps));
  }
  if (Context.getReportObjectService().getPatientSearch("Child") == null) {
    PatientSearch ps=PatientSearch.createFilterSearch(PatientCharacteristicFilter.class);
    ps.addArgument("maxAge","15",Integer.class);
    Context.getReportObjectService().createReportObject(new PatientSearchReportObject("Child",ps));
  }
  EvaluationContext evalContext=new EvaluationContext();
  evalContext.addParameterValue(new Parameter("report.startDate","Start Date",Date.class,null),ymd.parse("2007-09-01"));
  evalContext.addParameterValue(new Parameter("report.endDate","End Date",Date.class,null),ymd.parse("2007-09-30"));
  CohortService cs=Context.getCohortService();
  PatientSearch male=new PatientSearch();
  PatientSearch female=new PatientSearch();
  PatientSearch maleAndFemale=new PatientSearch();
  PatientSearch maleOrFemale=new PatientSearch();
  male.setSpecificationString("[Male]");
  female.setSpecificationString("[Female]");
  maleAndFemale.setSpecificationString("[Male] and [Female]");
  maleOrFemale.setSpecificationString("[Male] or [Female]");
  int numMale=cs.evaluate(male,evalContext).size();
  int numFemale=cs.evaluate(female,evalContext).size();
  int numMaleAndFemale=cs.evaluate(maleAndFemale,evalContext).size();
  int numMaleOrFemale=cs.evaluate(maleOrFemale,evalContext).size();
  assertEquals("AND should be zero",0,numMaleAndFemale);
  assertEquals("OR should be the sum",numMale + numFemale,numMaleOrFemale);
  PatientSearch complex1=new PatientSearch();
  complex1.setSpecificationString("([Male] and [Child]) or ([Female] and [Adult])");
  assertNotSame("Should not be zero",0,cs.evaluate(complex1,evalContext).size());
  PatientSearch complex2=new PatientSearch();
  PatientSearch complex3=new PatientSearch();
  complex2.setSpecificationString("[Male] or [Female]");
  complex3.setSpecificationString("(([Male] and [Child]) or [Female])");
  assertNotSame("Complex2 and Complex3 should be different sizes",cs.evaluate(complex2,evalContext).size(),cs.evaluate(complex3,evalContext).size());
}
