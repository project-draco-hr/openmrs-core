{
  UserService us=Context.getUserService();
  MessageSourceService mss=Context.getMessageSourceService();
  if (!Context.isAuthenticated()) {
    errors.reject("auth.invalid");
  }
 else   if (mss.getMessage("User.assumeIdentity").equals(action)) {
    Context.becomeUser(user.getSystemId());
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"User.assumeIdentity.success");
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,user.getPersonName());
    return "redirect:/index.htm";
  }
 else   if (mss.getMessage("User.delete").equals(action)) {
    try {
      Context.getUserService().purgeUser(user);
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"User.delete.success");
    }
 catch (    Exception ex) {
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"User.delete.failure");
      httpSession.setAttribute(WebConstants.OPENMRS_MSG_ARGS,ex.getMessage());
      log.error("Failed to delete user",ex);
    }
    return "redirect:/index.htm";
  }
 else {
    if (us.hasDuplicateUsername(user))     errors.rejectValue("username","error.username.taken");
    if (password == null || password.equals("XXXXXXXXXXXXXXX"))     password="";
    if (confirm == null || confirm.equals("XXXXXXXXXXXXXXX"))     confirm="";
    if (!password.equals(confirm))     errors.reject("error.password.match");
    if (password.length() == 0 && isNewUser(user))     errors.reject("error.password.weak");
    if (password.length() > 0) {
      try {
        OpenmrsUtil.validatePassword(user.getUsername(),password,user.getSystemId());
      }
 catch (      PasswordException e) {
        errors.reject(e.getMessage());
      }
    }
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=null;
        if (user.getRoles() != null)         for (        Role test : user.getRoles())         if (test.getRole().equals(r))         role=test;
        if (role == null) {
          role=us.getRole(r);
          user.addRole(role);
        }
        newRoles.add(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
    Map<String,String> properties=user.getUserProperties();
    if (properties == null)     properties=new HashMap<String,String>();
    Boolean newChangePassword=false;
    String chk=request.getParameter(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    if (chk != null)     newChangePassword=true;
    if (!newChangePassword.booleanValue() && properties.containsKey(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD)) {
      properties.remove(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD);
    }
    if (newChangePassword.booleanValue()) {
      properties.put(OpenmrsConstants.USER_PROPERTY_CHANGE_PASSWORD,newChangePassword.toString());
    }
    String[] keys=request.getParameterValues("property");
    String[] values=request.getParameterValues("value");
    if (keys != null && values != null) {
      for (int x=0; x < keys.length; x++) {
        String key=keys[x];
        String val=values[x];
        properties.put(key,val);
      }
    }
    user.setUserProperties(properties);
    UserValidator uv=new UserValidator();
    uv.validate(user,errors);
    if (errors.hasErrors()) {
      return showForm(user.getUserId(),createNewPerson,user,model);
    }
    if (isNewUser(user))     us.saveUser(user,password);
 else {
      us.saveUser(user,null);
      if (!password.equals("") && Context.hasPrivilege(OpenmrsConstants.PRIV_EDIT_USER_PASSWORDS)) {
        if (log.isDebugEnabled())         log.debug("calling changePassword for user " + user + " by user "+ Context.getAuthenticatedUser());
        us.changePassword(user,password);
      }
    }
    httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,"User.saved");
  }
  return "redirect:user.list";
}
