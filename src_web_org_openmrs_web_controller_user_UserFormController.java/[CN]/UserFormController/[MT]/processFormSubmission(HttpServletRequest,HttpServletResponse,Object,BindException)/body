{
  HttpSession httpSession=request.getSession();
  Context context=(Context)httpSession.getAttribute(WebConstants.OPENMRS_CONTEXT_HTTPSESSION_ATTR);
  User user=(User)obj;
  UserService us=context.getUserService();
  if (context != null && context.isAuthenticated()) {
    if (us.hasDuplicateUsername(user)) {
      errors.rejectValue("username","error.username.taken");
    }
    String password=request.getParameter("password");
    if (password == null)     password="";
    String confirm=request.getParameter("confirm");
    if (confirm == null)     confirm="";
    if (!password.equals(confirm))     errors.reject("error.password.match");
    if (password.length() == 0 && user.getUserId() == null)     errors.reject("error.password.weak");
    if (password.length() > 0) {
      if (password.length() < 6)       errors.reject("error.password.length");
      if (StringUtils.isAlpha(password))       errors.reject("error.password.characters");
      if (password.equals(user.getUsername()) || password.equals(user.getSystemId()))       errors.reject("error.password.weak");
    }
    String[] roles=request.getParameterValues("roles");
    Set<Role> newRoles=new HashSet<Role>();
    if (roles != null) {
      for (      String r : roles) {
        Role role=us.getRole(r);
        newRoles.add(role);
        user.addRole(role);
      }
    }
    if (user.getRoles() == null)     newRoles.clear();
 else     user.getRoles().retainAll(newRoles);
  }
 else {
    errors.reject("auth.invalid");
  }
  return super.processFormSubmission(request,response,obj,errors);
}
