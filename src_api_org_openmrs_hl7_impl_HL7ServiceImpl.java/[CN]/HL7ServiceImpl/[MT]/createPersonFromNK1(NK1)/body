{
  Person person=new Person();
  CX[] identifiers=nk1.getNextOfKinAssociatedPartySIdentifiers();
  String uuid=getUuidFromIdentifiers(identifiers);
  if (Context.getPersonService().getPersonByUuid(uuid) != null)   throw new HL7Exception("Non-unique UUID '" + uuid + "' for new person");
  person.setUuid(uuid);
  List<PatientIdentifier> goodIdentifiers=new ArrayList<PatientIdentifier>();
  for (  CX id : identifiers) {
    String assigningAuthority=id.getAssigningAuthority().getNamespaceID().getValue();
    String hl7PatientId=id.getIDNumber().getValue();
    log.debug("identifier has id=" + hl7PatientId + " assigningAuthority="+ assigningAuthority);
    if (assigningAuthority != null && assigningAuthority.length() > 0) {
      try {
        PatientIdentifierType pit=Context.getPatientService().getPatientIdentifierTypeByName(assigningAuthority);
        if (pit == null) {
          if (!assigningAuthority.equals("UUID"))           log.warn("Can't find PatientIdentifierType named '" + assigningAuthority + "'");
          continue;
        }
        PatientIdentifier pi=new PatientIdentifier();
        pi.setIdentifierType(pit);
        pi.setIdentifier(hl7PatientId);
        Location location=Context.getLocationService().getDefaultLocation();
        if (location == null) {
          throw new HL7Exception("Cannot find default location");
        }
        pi.setLocation(location);
        try {
          PatientIdentifierValidator.validateIdentifier(pi);
          goodIdentifiers.add(pi);
        }
 catch (        PatientIdentifierException ex) {
          log.warn("Patient identifier in NK1 is invalid: " + pi,ex);
        }
      }
 catch (      Exception e) {
        log.error("Uncaught error parsing/creating patient identifier '" + hl7PatientId + "' for assigning authority '"+ assigningAuthority+ "'",e);
      }
    }
 else {
      log.debug("NK1 contains identifier with no assigning authority");
      continue;
    }
  }
  if (!goodIdentifiers.isEmpty()) {
    person=new Patient(person);
    ((Patient)person).addIdentifiers(goodIdentifiers);
  }
  for (  XPN patientNameX : nk1.getNKName()) {
    PersonName name=new PersonName();
    name.setFamilyName(patientNameX.getFamilyName().getSurname().getValue());
    name.setGivenName(patientNameX.getGivenName().getValue());
    name.setMiddleName(patientNameX.getSecondAndFurtherGivenNamesOrInitialsThereof().getValue());
    person.addName(name);
  }
  String gender=nk1.getAdministrativeSex().getValue();
  if (gender == null)   throw new HL7Exception("Missing gender in an NK1 segment");
  gender=gender.toUpperCase();
  if (!OpenmrsConstants.GENDER().containsKey(gender))   throw new HL7Exception("Unrecognized gender: " + gender);
  person.setGender(gender);
  TS dateOfBirth=nk1.getDateTimeOfBirth();
  if (dateOfBirth == null || dateOfBirth.getTime() == null || dateOfBirth.getTime().getValue() == null)   throw new HL7Exception("Missing birth date in an NK1 segment");
  person.setBirthdate(HL7Util.parseHL7Timestamp(dateOfBirth.getTime().getValue()));
  ID precisionTemp=dateOfBirth.getDegreeOfPrecision();
  if (precisionTemp != null && precisionTemp.getValue() != null) {
    String precision=precisionTemp.getValue().toUpperCase();
    log.debug("The birthdate is estimated: " + precision);
    if (precision.equals("Y") || precision.equals("L"))     person.setBirthdateEstimated(true);
  }
  if (person instanceof Patient)   Context.getPatientService().savePatient((Patient)person);
 else   Context.getPersonService().savePerson(person);
  return person;
}
