{
  Enumeration<Driver> drivers=DriverManager.getDrivers();
  while (drivers.hasMoreElements()) {
    Driver driver=drivers.nextElement();
    if (driver.getClass().getClassLoader() == getInstance()) {
      try {
        DriverManager.deregisterDriver(driver);
      }
 catch (      SQLException e) {
        log.warn("SQL driver deregistration failed",e);
      }
    }
  }
  for (  WeakReference<Class<?>> refClazz : getInstance().cachedClasses.values()) {
    if (refClazz == null) {
      continue;
    }
    Class<?> clazz=refClazz.get();
    if (clazz != null && clazz.getName().contains("openmrs")) {
      try {
        Field[] fields=clazz.getDeclaredFields();
        for (int i=0; i < fields.length; i++) {
          Field field=fields[i];
          int mods=field.getModifiers();
          if (field.getType().isPrimitive() || (field.getName().indexOf("$") != -1)) {
            continue;
          }
          if (Modifier.isStatic(mods)) {
            try {
              if (clazz.equals(OpenmrsClassLoader.class) && "log".equals(field.getName())) {
                continue;
              }
              field.setAccessible(true);
              if (Modifier.isFinal(mods)) {
                if (!(field.getType().getName().startsWith("javax."))) {
                  nullInstance(field.get(null));
                }
              }
 else {
                field.set(null,null);
                if (log.isDebugEnabled()) {
                  log.debug("Set field " + field.getName() + " to null in class "+ clazz.getName());
                }
              }
            }
 catch (            Throwable t) {
              if (log.isDebugEnabled()) {
                log.debug("Could not set field " + field.getName() + " to null in class "+ clazz.getName(),t);
              }
            }
          }
        }
      }
 catch (      Throwable t) {
        if (log.isDebugEnabled()) {
          log.debug("Could not clean fields for class " + clazz.getName(),t);
        }
      }
    }
  }
  OpenmrsClassLoader.log=null;
  getInstance().cachedClasses.clear();
}
