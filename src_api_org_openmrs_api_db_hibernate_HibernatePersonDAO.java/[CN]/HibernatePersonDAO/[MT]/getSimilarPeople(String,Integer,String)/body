{
  if (birthyear == null)   birthyear=0;
  Set<Person> people=new LinkedHashSet<Person>();
  name=name.replaceAll("  "," ");
  name=name.replace(", "," ");
  String[] names=name.split(" ");
  String q="select p from Person p left join p.names as pname where p.personVoided = false and pname.voided = false and ";
  if (names.length == 1) {
    q+="(";
    q+=" soundex(pname.givenName) = soundex(:n1)";
    q+=" or soundex(pname.middleName) = soundex(:n1)";
    q+=" or soundex(pname.familyName) = soundex(:n1) ";
    q+=" or soundex(pname.familyName2) = soundex(:n1) ";
    q+=")";
  }
 else   if (names.length == 2) {
    q+="(";
    q+=" case";
    q+="  when pname.givenName is null then 1";
    q+="  when pname.givenName = '' then 1";
    q+="  when soundex(pname.givenName) = soundex(:n1) then 4";
    q+="  when soundex(pname.givenName) = soundex(:n2) then 3";
    q+="  else 0 ";
    q+=" end";
    q+=" + ";
    q+=" case";
    q+="  when pname.middleName is null then 1";
    q+="  when pname.middleName = '' then 1";
    q+="  when soundex(pname.middleName) = soundex(:n1) then 3";
    q+="  when soundex(pname.middleName) = soundex(:n2) then 4";
    q+="  else 0 ";
    q+=" end";
    q+=" + ";
    q+=" case";
    q+="  when pname.familyName is null then 1";
    q+="  when pname.familyName = '' then 1";
    q+="  when soundex(pname.familyName) = soundex(:n1) then 3";
    q+="  when soundex(pname.familyName) = soundex(:n2) then 4";
    q+="  else 0 ";
    q+=" end";
    q+=" +";
    q+=" case";
    q+="  when pname.familyName2 is null then 1";
    q+="  when pname.familyName2 = '' then 1";
    q+="  when soundex(pname.familyName2) = soundex(:n1) then 3";
    q+="  when soundex(pname.familyName2) = soundex(:n2) then 4";
    q+="  else 0 ";
    q+=" end";
    q+=") > 6";
  }
 else   if (names.length == 3) {
    q+="(";
    q+=" case";
    q+="  when pname.givenName is null then 0";
    q+="  when soundex(pname.givenName) = soundex(:n1) then 3";
    q+="  when soundex(pname.givenName) = soundex(:n2) then 2";
    q+="  when soundex(pname.givenName) = soundex(:n3) then 1";
    q+="  else 0 ";
    q+=" end";
    q+=" + ";
    q+=" case";
    q+="  when pname.middleName is null then 0";
    q+="  when soundex(pname.middleName) = soundex(:n1) then 2";
    q+="  when soundex(pname.middleName) = soundex(:n2) then 3";
    q+="  when soundex(pname.middleName) = soundex(:n3) then 1";
    q+="  else 0";
    q+=" end";
    q+=" + ";
    q+=" case";
    q+="  when pname.familyName is null then 0";
    q+="  when soundex(pname.familyName) = soundex(:n1) then 1";
    q+="  when soundex(pname.familyName) = soundex(:n2) then 2";
    q+="  when soundex(pname.familyName) = soundex(:n3) then 3";
    q+="  else 0";
    q+=" end";
    q+=" +";
    q+=" case";
    q+="  when pname.familyName2 is null then 0";
    q+="  when soundex(pname.familyName2) = soundex(:n1) then 1";
    q+="  when soundex(pname.familyName2) = soundex(:n2) then 2";
    q+="  when soundex(pname.familyName2) = soundex(:n3) then 3";
    q+="  else 0";
    q+=" end";
    q+=") >= 5";
  }
 else {
    q+="(";
    q+=" case";
    q+="  when pname.givenName is null then 0";
    for (int i=0; i < names.length; i++) {
      q+="  when soundex(pname.givenName) = soundex(:n" + (i + 1) + ") then 1";
    }
    q+="  else 0";
    q+=" end";
    q+=")";
    q+="+";
    q+="(";
    q+=" case";
    q+="  when pname.middleName is null then 0";
    for (int i=0; i < names.length; i++) {
      q+="  when soundex(pname.middleName) = soundex(:n" + (i + 1) + ") then 1";
    }
    q+="  else 0";
    q+=" end";
    q+=")";
    q+="+";
    q+="(";
    q+=" case";
    q+="  when pname.familyName is null then 0";
    for (int i=0; i < names.length; i++) {
      q+="  when soundex(pname.familyName) = soundex(:n" + (i + 1) + ") then 1";
    }
    q+="  else 0";
    q+=" end";
    q+=")";
    q+="+";
    q+="(";
    q+=" case";
    q+="  when pname.familyName2 is null then 0";
    for (int i=0; i < names.length; i++) {
      q+="  when soundex(pname.familyName2) = soundex(:n" + (i + 1) + ") then 1";
    }
    q+="  else 0";
    q+=" end";
    q+=") >= " + (int)(names.length * .75);
  }
  String birthdayMatch=" (year(p.birthdate) between " + (birthyear - 1) + " and "+ (birthyear + 1)+ " or p.birthdate is null) ";
  String genderMatch=" (p.gender = :gender or p.gender = '') ";
  if (birthyear != 0 && gender != null) {
    q+=" and (" + birthdayMatch + "and "+ genderMatch+ ") ";
  }
 else   if (birthyear != 0) {
    q+=" and " + birthdayMatch;
  }
 else   if (gender != null) {
    q+=" and " + genderMatch;
  }
  q+=" order by pname.givenName asc,";
  q+=" pname.middleName asc,";
  q+=" pname.familyName asc";
  q+=" pname.familyName2 asc";
  Query query=sessionFactory.getCurrentSession().createQuery(q);
  for (int nameIndex=0; nameIndex < names.length; nameIndex++) {
    query.setString("n" + (nameIndex + 1),names[nameIndex]);
  }
  if (q.contains(":gender"))   query.setString("gender",gender);
  people.addAll(query.list());
  return people;
}
