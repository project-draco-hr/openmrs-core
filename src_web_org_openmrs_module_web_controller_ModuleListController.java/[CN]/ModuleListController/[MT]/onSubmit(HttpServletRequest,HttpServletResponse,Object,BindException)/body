{
  if (!Context.hasPrivilege(OpenmrsConstants.PRIV_MANAGE_MODULES))   throw new APIAuthenticationException("Privilege required: " + OpenmrsConstants.PRIV_MANAGE_MODULES);
  HttpSession httpSession=request.getSession();
  String moduleId=ServletRequestUtils.getStringParameter(request,"moduleId","");
  String view=getFormView();
  String success="";
  String error="";
  MessageSourceAccessor msa=getMessageSourceAccessor();
  String action=ServletRequestUtils.getStringParameter(request,"action","");
  if (ServletRequestUtils.getStringParameter(request,"start.x",null) != null)   action="start";
 else   if (ServletRequestUtils.getStringParameter(request,"stop.x",null) != null)   action="stop";
 else   if (ServletRequestUtils.getStringParameter(request,"unload.x",null) != null)   action="unload";
  if ("upload".equals(action) && request instanceof MultipartHttpServletRequest) {
    MultipartHttpServletRequest multipartRequest=(MultipartHttpServletRequest)request;
    MultipartFile multipartModuleFile=multipartRequest.getFile("moduleFile");
    if (multipartModuleFile != null && !multipartModuleFile.isEmpty()) {
      if (!ModuleUtil.allowAdmin()) {
        error=msa.getMessage("Module.disallowUploads",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
      }
 else {
        String filename=WebUtil.stripFilename(multipartModuleFile.getOriginalFilename());
        InputStream inputStream=null;
        File moduleFile=null;
        Module module=null;
        Boolean updateModule=ServletRequestUtils.getBooleanParameter(request,"update",false);
        List<Module> dependentModulesStopped=null;
        try {
          if (updateModule) {
            Module tmpModule=new ModuleFileParser(multipartModuleFile.getInputStream()).parse();
            Module existingModule=ModuleFactory.getModuleById(tmpModule.getModuleId());
            if (existingModule != null) {
              dependentModulesStopped=ModuleFactory.stopModule(existingModule,false,true);
              WebModuleUtil.stopModule(existingModule,getServletContext());
              ModuleFactory.unloadModule(existingModule);
            }
            moduleFile=ModuleUtil.insertModuleFile(new FileInputStream(tmpModule.getFile()),filename);
          }
 else {
            inputStream=multipartModuleFile.getInputStream();
            moduleFile=ModuleUtil.insertModuleFile(inputStream,filename);
          }
          module=ModuleFactory.loadModule(moduleFile);
        }
 catch (        ModuleException me) {
          log.warn("Unable to load and start module",me);
          error=me.getMessage();
        }
 finally {
          try {
            if (inputStream != null)             inputStream.close();
          }
 catch (          IOException io) {
            log.warn("Unable to close temporary input stream",io);
          }
          if (module == null && moduleFile != null)           moduleFile.delete();
        }
        if (module != null) {
          ModuleFactory.startModule(module);
          WebModuleUtil.startModule(module,getServletContext(),false);
          if (module.isStarted()) {
            success=msa.getMessage("Module.loadedAndStarted",new String[]{module.getName()});
            if (updateModule && dependentModulesStopped != null) {
              for (              Module depMod : dependentModulesStopped) {
                ModuleFactory.startModule(depMod);
                WebModuleUtil.startModule(depMod,getServletContext(),false);
              }
            }
          }
 else           success=msa.getMessage("Module.loaded",new String[]{module.getName()});
        }
      }
    }
  }
 else   if (moduleId.equals("")) {
    ModuleUtil.checkForModuleUpdates();
  }
 else   if (action.equals(msa.getMessage("Module.installUpdate"))) {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage("Module.disallowAdministration",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
    Module mod=ModuleFactory.getModuleById(moduleId);
    if (mod.getDownloadURL() != null) {
      ModuleFactory.stopModule(mod);
      WebModuleUtil.stopModule(mod,getServletContext());
      Module newModule=ModuleFactory.updateModule(mod);
      WebModuleUtil.startModule(newModule,getServletContext(),false);
    }
  }
 else {
    if (!ModuleUtil.allowAdmin()) {
      error=msa.getMessage("Module.disallowAdministration",new String[]{ModuleConstants.RUNTIMEPROPERTY_ALLOW_ADMIN});
    }
 else {
      log.debug("Module id: " + moduleId);
      Module mod=ModuleFactory.getModuleById(moduleId);
      Object[] args=new Object[]{moduleId};
      if (mod == null)       error=msa.getMessage("Module.invalid",args);
 else {
        if ("stop".equals(action)) {
          mod.clearStartupError();
          ModuleFactory.stopModule(mod);
          WebModuleUtil.stopModule(mod,getServletContext());
          success=msa.getMessage("Module.stopped",args);
        }
 else         if ("start".equals(action)) {
          ModuleFactory.startModule(mod);
          WebModuleUtil.startModule(mod,getServletContext(),false);
          if (mod.isStarted())           success=msa.getMessage("Module.started",args);
 else           error=msa.getMessage("Module.not.started",args);
        }
 else         if ("unload".equals(action)) {
          if (ModuleFactory.isModuleStarted(mod)) {
            ModuleFactory.stopModule(mod);
            WebModuleUtil.stopModule(mod,getServletContext());
          }
          ModuleFactory.unloadModule(mod);
          success=msa.getMessage("Module.unloaded",args);
        }
      }
    }
  }
  view=getSuccessView();
  if (!success.equals(""))   httpSession.setAttribute(WebConstants.OPENMRS_MSG_ATTR,success);
  if (!error.equals(""))   httpSession.setAttribute(WebConstants.OPENMRS_ERROR_ATTR,error);
  return new ModelAndView(new RedirectView(view));
}
