{
  Map<Integer,ConceptWord> uniqueConcepts=new HashMap<Integer,ConceptWord>();
  if (phrase == null)   phrase="";
  List<String> searchedWords=ConceptWord.getUniqueWords(phrase);
  Integer conceptId=null;
  Concept concept=null;
  ConceptName conceptName=null;
  for (  ConceptWord currentWord : conceptWords) {
    concept=currentWord.getConcept();
    conceptId=concept.getConceptId();
    conceptName=currentWord.getConceptName();
    currentWord.setWeight(0.0);
    for (    Locale locale : locales) {
      if (conceptName.isPreferredInCountry(locale.getCountry()))       currentWord.increaseWeight(5.0);
 else       if (conceptName.isPreferredInLanguage(locale.getLanguage()))       currentWord.increaseWeight(3.0);
 else       if (conceptName.isPreferred())       currentWord.increaseWeight(1.0);
    }
    Double percentMatched=getPercentMatched(searchedWords,conceptName.getName());
    currentWord.increaseWeight(5.0 * percentMatched);
    List<String> nameWords=ConceptWord.getUniqueWords(conceptName.getName());
    if (!containsAll(nameWords,searchedWords)) {
      currentWord.increaseWeight(-2.0);
    }
    log.debug("Weight for: " + conceptName.getName() + " is: "+ currentWord.getWeight());
    if (uniqueConcepts.containsKey(conceptId)) {
      ConceptWord previousWord=uniqueConcepts.get(conceptId);
      if (currentWord.getWeight() > previousWord.getWeight()) {
        uniqueConcepts.put(conceptId,currentWord);
      }
    }
 else {
      uniqueConcepts.put(conceptId,currentWord);
    }
  }
  conceptWords=new Vector<ConceptWord>();
  conceptWords.addAll(uniqueConcepts.values());
  Collections.sort(conceptWords);
  return conceptWords;
}
