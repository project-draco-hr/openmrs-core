{
  ConceptMapType defaultConceptMapType=null;
  for (  ConceptMap map : concept.getConceptMappings()) {
    if (map.getConceptMapType() == null) {
      if (defaultConceptMapType == null) {
        defaultConceptMapType=getDefaultConceptMapType();
      }
      map.setConceptMapType(defaultConceptMapType);
    }
  }
  checkIfLocked();
  checkIfDatatypeCanBeChanged(concept);
  List<ConceptName> changedConceptNames=null;
  Map<String,ConceptName> uuidClonedConceptNameMap=null;
  if (concept.getConceptId() != null) {
    uuidClonedConceptNameMap=new HashMap<String,ConceptName>();
    for (    ConceptName conceptName : concept.getNames()) {
      if (conceptName.getConceptNameId() != null) {
        ConceptName clone=cloneConceptName(conceptName);
        clone.setConceptNameId(null);
        uuidClonedConceptNameMap.put(conceptName.getUuid(),clone);
        if (hasNameChanged(conceptName)) {
          if (changedConceptNames == null)           changedConceptNames=new ArrayList<ConceptName>();
          changedConceptNames.add(conceptName);
        }
 else {
          clone.setConceptNameId(conceptName.getConceptNameId());
          try {
            BeanUtils.copyProperties(conceptName,clone);
          }
 catch (          IllegalAccessException e) {
            log.error("Error generated",e);
          }
catch (          InvocationTargetException e) {
            log.error("Error generated",e);
          }
        }
      }
    }
  }
  if (CollectionUtils.isNotEmpty(changedConceptNames)) {
    for (    ConceptName changedName : changedConceptNames) {
      ConceptName nameInDB=changedName;
      nameInDB.setVoided(true);
      nameInDB.setDateVoided(new Date());
      nameInDB.setVoidedBy(Context.getAuthenticatedUser());
      nameInDB.setVoidReason(Context.getMessageSourceService().getMessage("Concept.name.voidReason.nameChanged"));
      if (!nameInDB.isSynonym())       nameInDB.setConceptNameType(null);
      if (nameInDB.isLocalePreferred())       nameInDB.setLocalePreferred(false);
      ConceptName clone=uuidClonedConceptNameMap.get(nameInDB.getUuid());
      clone.setUuid(UUID.randomUUID().toString());
      clone.setDateCreated(null);
      clone.setCreator(null);
      concept.addName(clone);
    }
  }
  Set<Locale> checkedLocales=new HashSet<Locale>();
  for (  ConceptName n : concept.getNames()) {
    Locale locale=n.getLocale();
    if (checkedLocales.contains(locale))     continue;
    ConceptName possiblePreferredName=concept.getPreferredName(locale);
    if (possiblePreferredName != null)     ;
 else     if (concept.getFullySpecifiedName(locale) != null)     possiblePreferredName=concept.getFullySpecifiedName(locale);
 else     if (!CollectionUtils.isEmpty(concept.getSynonyms(locale)))     concept.getSynonyms(locale).iterator().next().setLocalePreferred(true);
    if (possiblePreferredName != null) {
      possiblePreferredName.setLocalePreferred(true);
    }
    checkedLocales.add(locale);
  }
  concept.setDateChanged(new Date());
  concept.setChangedBy(Context.getAuthenticatedUser());
  Errors errors=new BindException(concept,"concept");
  new ConceptValidator().validate(concept,errors);
  if (errors.hasErrors())   throw new APIException("Validation errors found: " + errors.getAllErrors());
  concept.setDateChanged(new Date());
  Concept conceptToReturn=dao.saveConcept(concept);
  this.updateConceptIndex(conceptToReturn);
  return conceptToReturn;
}
