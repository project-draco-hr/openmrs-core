{
  if (log.isDebugEnabled())   log.debug("parsing observation: " + obx);
  Varies[] values=obx.getObservationValue();
  if (values == null || values.length < 1)   return null;
  String hl7Datatype=values[0].getName();
  if (log.isDebugEnabled())   log.debug("  datatype = " + hl7Datatype);
  Concept concept=getConcept(obx.getObservationIdentifier(),uid);
  if (log.isDebugEnabled())   log.debug("  concept = " + concept.getConceptId());
  ConceptName conceptName=getConceptName(obx.getObservationIdentifier());
  if (log.isDebugEnabled())   log.debug("  concept-name = " + conceptName);
  Date datetime=getDatetime(obx);
  if (log.isDebugEnabled())   log.debug("  timestamp = " + datetime);
  if (datetime == null)   datetime=encounter.getEncounterDatetime();
  Obs obs=new Obs();
  obs.setPerson(encounter.getPatient());
  obs.setConcept(concept);
  obs.setEncounter(encounter);
  obs.setObsDatetime(datetime);
  obs.setLocation(encounter.getLocation());
  obs.setCreator(encounter.getCreator());
  obs.setDateCreated(encounter.getDateCreated());
  StringBuilder comments=new StringBuilder();
  ORU_R01_OBSERVATION parent=(ORU_R01_OBSERVATION)obx.getParent();
  for (int i=0; i < parent.getNTEReps(); i++)   for (  FT obxComment : parent.getNTE(i).getComment()) {
    if (comments.length() > 0)     comments.append(" ");
    comments=comments.append(obxComment.getValue());
  }
  if (StringUtils.hasText(comments.toString()))   obs.setComment(comments.toString());
  Type obx5=values[0].getData();
  if ("NM".equals(hl7Datatype)) {
    String value=((NM)obx5).getValue();
    if (value == null || value.length() == 0) {
      log.warn("Not creating null valued obs for concept " + concept);
      return null;
    }
 else     if (value.equals("0") || value.equals("1")) {
      concept=concept.hydrate(concept.getConceptId().toString());
      obs.setConcept(concept);
      if (concept.getDatatype().isBoolean())       obs.setValueBoolean(value.equals("1"));
 else       if (concept.getDatatype().isNumeric())       try {
        obs.setValueNumeric(Double.valueOf(value));
      }
 catch (      NumberFormatException e) {
        throw new HL7Exception("numeric (NM) value '" + value + "' is not numeric for concept #"+ concept.getConceptId()+ " ("+ conceptName.getName()+ ") in message "+ uid,e);
      }
 else       if (concept.getDatatype().isCoded()) {
        Concept answer=value.equals("1") ? Context.getConceptService().getTrueConcept() : Context.getConceptService().getFalseConcept();
        boolean isValidAnswer=false;
        Collection<ConceptAnswer> conceptAnswers=concept.getAnswers();
        if (conceptAnswers != null && conceptAnswers.size() > 0) {
          for (          ConceptAnswer conceptAnswer : conceptAnswers) {
            if (conceptAnswer.getAnswerConcept().equals(answer)) {
              obs.setValueCoded(answer);
              isValidAnswer=true;
              break;
            }
          }
        }
        if (!isValidAnswer)         throw new HL7Exception(answer.toString() + " is not a valid answer for obs with uuid " + uid);
      }
 else {
        throw new HL7Exception("Can't set boolean concept answer for concept with id " + obs.getConcept().getConceptId());
      }
    }
 else {
      try {
        obs.setValueNumeric(Double.valueOf(value));
      }
 catch (      NumberFormatException e) {
        throw new HL7Exception("numeric (NM) value '" + value + "' is not numeric for concept #"+ concept.getConceptId()+ " ("+ conceptName.getName()+ ") in message "+ uid,e);
      }
    }
  }
 else   if ("CWE".equals(hl7Datatype)) {
    log.debug("  CWE observation");
    CWE value=(CWE)obx5;
    String valueIdentifier=value.getIdentifier().getValue();
    log.debug("    value id = " + valueIdentifier);
    String valueName=value.getText().getValue();
    log.debug("    value name = " + valueName);
    if (isConceptProposal(valueIdentifier)) {
      if (log.isDebugEnabled())       log.debug("Proposing concept");
      throw new ProposingConceptException(concept,valueName);
    }
 else {
      log.debug("    not proposal");
      try {
        Concept valueConcept=getConcept(value,uid);
        obs.setValueCoded(valueConcept);
        if (HL7Constants.HL7_LOCAL_DRUG.equals(value.getNameOfAlternateCodingSystem().getValue())) {
          Drug valueDrug=new Drug();
          valueDrug.setDrugId(new Integer(value.getAlternateIdentifier().getValue()));
          obs.setValueDrug(valueDrug);
        }
 else {
          ConceptName valueConceptName=getConceptName(value);
          if (valueConceptName != null) {
            if (log.isDebugEnabled()) {
              log.debug("    value concept-name-id = " + valueConceptName.getConceptNameId());
              log.debug("    value concept-name = " + valueConceptName.getName());
            }
            obs.setValueCodedName(valueConceptName);
          }
        }
      }
 catch (      NumberFormatException e) {
        throw new HL7Exception("Invalid concept ID '" + valueIdentifier + "' for OBX-5 value '"+ valueName+ "'");
      }
    }
    if (log.isDebugEnabled())     log.debug("  Done with CWE");
  }
 else   if ("CE".equals(hl7Datatype)) {
    CE value=(CE)obx5;
    String valueIdentifier=value.getIdentifier().getValue();
    String valueName=value.getText().getValue();
    if (isConceptProposal(valueIdentifier)) {
      throw new ProposingConceptException(concept,valueName);
    }
 else {
      try {
        obs.setValueCoded(getConcept(value,uid));
        obs.setValueCodedName(getConceptName(value));
      }
 catch (      NumberFormatException e) {
        throw new HL7Exception("Invalid concept ID '" + valueIdentifier + "' for OBX-5 value '"+ valueName+ "'");
      }
    }
  }
 else   if ("DT".equals(hl7Datatype)) {
    DT value=(DT)obx5;
    Date valueDate=getDate(value.getYear(),value.getMonth(),value.getDay(),0,0,0);
    if (value == null || valueDate == null) {
      log.warn("Not creating null valued obs for concept " + concept);
      return null;
    }
    obs.setValueDatetime(valueDate);
  }
 else   if ("TS".equals(hl7Datatype)) {
    DTM value=((TS)obx5).getTime();
    Date valueDate=getDate(value.getYear(),value.getMonth(),value.getDay(),value.getHour(),value.getMinute(),value.getSecond());
    if (value == null || valueDate == null) {
      log.warn("Not creating null valued obs for concept " + concept);
      return null;
    }
    obs.setValueDatetime(valueDate);
  }
 else   if ("TM".equals(hl7Datatype)) {
    TM value=(TM)obx5;
    Date valueTime=getDate(0,0,0,value.getHour(),value.getMinute(),value.getSecond());
    if (value == null || valueTime == null) {
      log.warn("Not creating null valued obs for concept " + concept);
      return null;
    }
    obs.setValueDatetime(valueTime);
  }
 else   if ("ST".equals(hl7Datatype)) {
    ST value=(ST)obx5;
    if (value == null || value.getValue() == null || value.getValue().trim().length() == 0) {
      log.warn("Not creating null valued obs for concept " + concept);
      return null;
    }
    obs.setValueText(value.getValue());
  }
 else {
    throw new HL7Exception("Unsupported observation datatype '" + hl7Datatype + "'");
  }
  return obs;
}
