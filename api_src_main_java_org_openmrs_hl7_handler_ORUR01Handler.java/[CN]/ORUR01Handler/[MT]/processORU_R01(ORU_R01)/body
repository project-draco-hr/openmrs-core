{
  validate(oru);
  MSH msh=getMSH(oru);
  PID pid=getPID(oru);
  List<NK1> nk1List=getNK1List(oru);
  PV1 pv1=getPV1(oru);
  ORC orc=getORC(oru);
  String messageControlId=msh.getMessageControlID().getValue();
  if (log.isDebugEnabled()) {
    log.debug("Found HL7 message in inbound queue with control id = " + messageControlId);
  }
  HL7Service hl7Service=Context.getHL7Service();
  Patient patient=getPatient(pid);
  if (log.isDebugEnabled()) {
    log.debug("Processing HL7 message for patient " + patient.getPatientId());
  }
  Encounter encounter=createEncounter(msh,patient,pv1,orc);
  try {
    updateHealthCenter(patient,pv1);
  }
 catch (  Exception e) {
    log.error("Error while processing Discharge To Location (" + messageControlId + ")",e);
  }
  for (  NK1 nk1 : nk1List) {
    processNK1(patient,nk1);
  }
  List<ConceptProposal> conceptProposals=new ArrayList<ConceptProposal>();
  if (log.isDebugEnabled()) {
    log.debug("Creating observations for message " + messageControlId + "...");
  }
  List<Integer> ignoredConceptIds=new ArrayList<Integer>();
  String obrConceptId=Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_MEDICAL_RECORD_OBSERVATIONS,"1238");
  if (StringUtils.hasLength(obrConceptId)) {
    ignoredConceptIds.add(Integer.valueOf(obrConceptId));
  }
  String obrProblemListConceptId=Context.getAdministrationService().getGlobalProperty(OpenmrsConstants.GLOBAL_PROPERTY_PROBLEM_LIST,"1284");
  if (StringUtils.hasLength(obrProblemListConceptId)) {
    ignoredConceptIds.add(Integer.valueOf(obrProblemListConceptId));
  }
  ORU_R01_PATIENT_RESULT patientResult=oru.getPATIENT_RESULT();
  int numObr=patientResult.getORDER_OBSERVATIONReps();
  for (int i=0; i < numObr; i++) {
    if (log.isDebugEnabled()) {
      log.debug("Processing OBR (" + i + " of "+ numObr+ ")");
    }
    ORU_R01_ORDER_OBSERVATION orderObs=patientResult.getORDER_OBSERVATION(i);
    OBR obr=orderObs.getOBR();
    if (!StringUtils.hasText(obr.getUniversalServiceIdentifier().getIdentifier().getValue())) {
      throw new HL7Exception("Check to ensure that the form's OBS section is a concept field. Invalid OBR in hl7 message with uid: " + messageControlId);
    }
    Obs obsGrouper=null;
    Concept obrConcept=getConcept(obr.getUniversalServiceIdentifier(),messageControlId);
    if (obrConcept != null && !ignoredConceptIds.contains(obrConcept.getId())) {
      obsGrouper=new Obs();
      obsGrouper.setConcept(obrConcept);
      obsGrouper.setPerson(encounter.getPatient());
      obsGrouper.setEncounter(encounter);
      Date datetime=getDatetime(obr);
      if (datetime == null) {
        datetime=encounter.getEncounterDatetime();
      }
      obsGrouper.setObsDatetime(datetime);
      obsGrouper.setLocation(encounter.getLocation());
      obsGrouper.setCreator(encounter.getCreator());
      StringBuilder comments=new StringBuilder();
      ORU_R01_ORDER_OBSERVATION parent=(ORU_R01_ORDER_OBSERVATION)obr.getParent();
      int totalNTEs=parent.getNTEReps();
      for (int iNTE=0; iNTE < totalNTEs; iNTE++) {
        for (        FT obxComment : parent.getNTE(iNTE).getComment()) {
          if (comments.length() > 0) {
            comments.append(" ");
          }
          comments.append(obxComment.getValue());
        }
      }
      if (StringUtils.hasText(comments.toString())) {
        obsGrouper.setComment(comments.toString());
      }
      encounter.addObs(obsGrouper);
    }
    int numObs=orderObs.getOBSERVATIONReps();
    HL7Exception errorInHL7Queue=null;
    for (int j=0; j < numObs; j++) {
      if (log.isDebugEnabled()) {
        log.debug("Processing OBS (" + j + " of "+ numObs+ ")");
      }
      OBX obx=orderObs.getOBSERVATION(j).getOBX();
      try {
        log.debug("Parsing observation");
        Obs obs=parseObs(encounter,obx,obr,messageControlId);
        if (obs != null) {
          if (encounter.getEncounterId() != null) {
            obs.setCreator(getEnterer(orc));
            obs.setDateCreated(new Date());
          }
          if (obsGrouper != null) {
            obsGrouper.addGroupMember(obs);
          }
 else {
            log.debug("Obs is not null. Adding to encounter object");
            encounter.addObs(obs);
            log.debug("Done with this obs");
          }
        }
      }
 catch (      ProposingConceptException proposingException) {
        Concept questionConcept=proposingException.getConcept();
        String value=proposingException.getValueName();
        if (value != null && !value.equals("")) {
          conceptProposals.add(createConceptProposal(encounter,questionConcept,value));
        }
 else {
          errorInHL7Queue=new HL7Exception(Context.getMessageSourceService().getMessage("Hl7.proposed.concept.name.empty"),proposingException);
          break;
        }
      }
catch (      HL7Exception e) {
        errorInHL7Queue=e;
      }
 finally {
        if (errorInHL7Queue != null) {
          throw new HL7Exception("Improperly formatted OBX: " + PipeParser.encode(obx,new EncodingCharacters('|',"^~\\&")),HL7Exception.DATA_TYPE_ERROR,errorInHL7Queue);
        }
      }
    }
  }
  if (log.isDebugEnabled()) {
    log.debug("Finished creating observations");
    log.debug("Current thread: " + Thread.currentThread());
    log.debug("Creating the encounter object");
  }
  Context.getEncounterService().saveEncounter(encounter);
  hl7Service.encounterCreated(encounter);
  for (  ConceptProposal proposal : conceptProposals) {
    Context.getConceptService().saveConceptProposal(proposal);
  }
  return oru;
}
