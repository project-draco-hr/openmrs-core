{
  executeDataSet(CONTROLLER_PATIENTS_DATA);
  PatientService ps=Context.getPatientService();
  List<Patient> patients=ps.getPatients("John");
  assertFalse(patients.isEmpty());
  assertEquals(2,patients.size());
  Patient patientJohn=patients.get(0);
  assertEquals(2,patientJohn.getPersonId().intValue());
  assertEquals("1234",patientJohn.getPatientIdentifier().getIdentifier());
  assertEquals(new Location(1),patientJohn.getPatientIdentifier().getLocation());
  NewPatientFormController controller=new NewPatientFormController();
  controller.setApplicationContext(applicationContext);
  controller.setSuccessView("patientDashboard.form");
  controller.setFormView("newPatient.form");
  MockHttpServletRequest request=new MockHttpServletRequest("GET","/admin/patients/newPatient.form?patientId=2");
  request.setSession(new MockHttpSession(null));
  HttpServletResponse response=new MockHttpServletResponse();
  ModelAndView initialPageLoad=controller.handleRequest(request,response);
  request.setMethod("POST");
  request.addParameter("patientId","2");
  request.addParameter("name.givenName","John");
  request.addParameter("name.familyName","Doe");
  request.addParameter("identifier","1234");
  request.addParameter("identifierType","1");
  request.addParameter("location","2");
  request.addParameter("preferred","1");
  request.addParameter("gender","F");
  request.addParameter("birthdate","05/05/1959");
  request.addParameter("birthdateEstimated","0");
  request.addParameter("tribe","");
  request.addParameter("address.address1","1234 Somewhere Street");
  request.addParameter("1","1234");
  Context.getPersonService().getPersonAttributeTypes(PERSON_TYPE.PATIENT,ATTR_VIEW_TYPE.VIEWING);
  ModelAndView modelAndView=controller.handleRequest(request,response);
  assertEquals(RedirectView.class,modelAndView.getView().getClass());
  RedirectView redirectView=(RedirectView)modelAndView.getView();
  assertTrue(redirectView.getUrl().startsWith("patientDashboard.form"));
  TestUtil.printOutTableContents(getConnection(),"patient_identifier");
  Patient patient=ps.getPatient(2);
  assertNotNull(patient);
  assertNotNull(patient.getIdentifiers());
  assertFalse(patient.getIdentifiers().isEmpty());
  PatientIdentifier identifier=(PatientIdentifier)patient.getIdentifiers().toArray()[0];
  assertEquals(2,identifier.getLocation().getLocationId().intValue());
}
