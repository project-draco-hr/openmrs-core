{
  records=null;
  Locale locale=Context.getLocale();
  if (name.equals("patientIdentifierType")) {
    PatientService ps=Context.getPatientService();
    records=ps.getAllPatientIdentifierTypes().iterator();
  }
 else   if (name.equals("relationshipType")) {
    PersonService ps=Context.getPersonService();
    records=ps.getAllRelationshipTypes().iterator();
  }
 else   if (name.equals("encounterType")) {
    EncounterService es=Context.getEncounterService();
    records=es.getAllEncounterTypes().iterator();
  }
 else   if (name.equals("location")) {
    LocationService locServ=Context.getLocationService();
    records=locServ.getAllLocations().iterator();
  }
 else   if (name.equals("locationHierarchy")) {
    List<LocationAndDepth> locationAndDepths=new ArrayList<LocationAndDepth>();
    List<Location> locations=Context.getLocationService().getRootLocations(true);
    populateLocationAndDepthList(locationAndDepths,locations,0);
    records=locationAndDepths.iterator();
  }
 else   if (name.equals("cohort")) {
    List<Cohort> cohorts=Context.getCohortService().getAllCohorts();
    records=cohorts.iterator();
  }
 else   if (name.equals("conceptSource")) {
    List<ConceptSource> conceptSources=Context.getConceptService().getAllConceptSources(false);
    records=conceptSources.iterator();
  }
 else   if (name.equals("form")) {
    List<Form> forms=Context.getFormService().getAllForms();
    records=forms.iterator();
  }
 else   if (name.equals("role")) {
    List<Role> roles=Context.getUserService().getAllRoles();
    records=roles.iterator();
  }
 else   if (name.equals("conceptMapType")) {
    List<ConceptMapType> mapTypes=Context.getConceptService().getActiveConceptMapTypes();
    records=mapTypes.iterator();
  }
 else   if (name.equals("civilStatus")) {
    ConceptService cs=Context.getConceptService();
    Concept civilStatus=cs.getConcept(OpenmrsConstants.CIVIL_STATUS_CONCEPT_ID);
    if (civilStatus == null) {
      log.error("OpenmrsConstants.CIVIL_STATUS_CONCEPT_ID is defined incorrectly.");
    }
 else {
      records=civilStatus.getAnswers(false).iterator();
      Map<String,String> opts=new HashMap<String,String>();
      for (      ConceptAnswer a : civilStatus.getAnswers(false)) {
        opts.put(a.getAnswerConcept().getConceptId().toString(),a.getAnswerConcept().getShortestName(locale,false).getName());
      }
      records=opts.entrySet().iterator();
      if (select != null) {
        select=select.toString() + "=" + opts.get(select);
      }
    }
  }
 else   if (name.equals("gender")) {
    Map<String,String> opts=OpenmrsConstants.GENDER();
    records=opts.entrySet().iterator();
    if (select != null) {
      select=select.toString() + "=" + opts.get(select);
    }
  }
 else   if (name.equals("workflowStatus")) {
    List<ProgramWorkflowState> ret=new ArrayList<ProgramWorkflowState>();
    records=ret.iterator();
  }
 else   if (name.equals("workflowProgram")) {
    List<org.openmrs.Program> ret=Context.getProgramWorkflowService().getAllPrograms();
    records=ret.iterator();
  }
 else   if (name.equals("role")) {
    List<Role> ret=Context.getUserService().getAllRoles();
    records=ret.iterator();
  }
 else   if (name.equals("conceptSet")) {
    if (conceptSet == null) {
      throw new IllegalArgumentException("Must specify conceptSet");
    }
    Concept c=Context.getConceptService().getConcept(conceptSet);
    if (c == null) {
      throw new IllegalArgumentException("Can't find conceptSet " + conceptSet);
    }
    List<Concept> list=Context.getConceptService().getConceptsByConceptSet(c);
    records=list.iterator();
  }
 else   if (name.equals("answer")) {
    if (concept == null) {
      throw new IllegalArgumentException("Must specify concept");
    }
    Concept c=Context.getConceptService().getConcept(concept);
    if (c == null) {
      log.error("Can't find concept with name or id of: " + concept + " and so no answers will be returned");
      records=null;
    }
 else     if (c.getAnswers(false) != null) {
      records=c.getAnswers(false).iterator();
    }
 else {
      records=new ArrayList<Concept>().iterator();
    }
  }
 else {
    try {
      Class<?> cls=Context.loadClass(name);
      Constructor<?> ct=cls.getConstructor();
      Iterable<?> iterable=(Iterable<?>)ct.newInstance();
      records=iterable.iterator();
    }
 catch (    Exception e) {
      log.error(name + " not found in ForEachRecord list " + e);
    }
  }
  if (records == null || !records.hasNext()) {
    records=null;
    return SKIP_BODY;
  }
 else {
    return EVAL_BODY_BUFFERED;
  }
}
