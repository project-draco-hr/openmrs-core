{
  try {
    Method valueOfMethod=null;
    try {
      valueOfMethod=clazz.getMethod("valueOf",String.class);
    }
 catch (    NoSuchMethodException ex) {
    }
    if (valueOfMethod != null) {
      return valueOfMethod.invoke(null,string);
    }
 else     if (clazz.isEnum()) {
      List<Enum> constants=Arrays.asList((Enum[])clazz.getEnumConstants());
      for (      Enum e : constants)       if (e.toString().equals(string))       return e;
      throw new IllegalArgumentException(string + " is not a legal value of enum class " + clazz);
    }
 else     if (String.class.equals(clazz)) {
      return string;
    }
 else     if (Location.class.equals(clazz)) {
      try {
        Integer.parseInt(string);
        LocationEditor ed=new LocationEditor();
        ed.setAsText(string);
        return ed.getValue();
      }
 catch (      NumberFormatException ex) {
        return Context.getLocationService().getLocation(string);
      }
    }
 else     if (Concept.class.equals(clazz)) {
      ConceptEditor ed=new ConceptEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Program.class.equals(clazz)) {
      ProgramEditor ed=new ProgramEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (ProgramWorkflowState.class.equals(clazz)) {
      ProgramWorkflowStateEditor ed=new ProgramWorkflowStateEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (EncounterType.class.equals(clazz)) {
      EncounterTypeEditor ed=new EncounterTypeEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Form.class.equals(clazz)) {
      FormEditor ed=new FormEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Drug.class.equals(clazz)) {
      DrugEditor ed=new DrugEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (PersonAttributeType.class.equals(clazz)) {
      PersonAttributeTypeEditor ed=new PersonAttributeTypeEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Cohort.class.equals(clazz)) {
      CohortEditor ed=new CohortEditor();
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Date.class.equals(clazz)) {
      DateFormat df=new SimpleDateFormat(OpenmrsConstants.OPENMRS_LOCALE_DATE_PATTERNS().get(Context.getLocale().toString().toLowerCase()),Context.getLocale());
      CustomDateEditor ed=new CustomDateEditor(df,true,10);
      ed.setAsText(string);
      return ed.getValue();
    }
 else     if (Object.class.equals(clazz)) {
      return string;
    }
 else {
      throw new IllegalArgumentException("Don't know how to handle class: " + clazz);
    }
  }
 catch (  Exception ex) {
    log.error("error converting \"" + string + "\" to "+ clazz,ex);
    throw new IllegalArgumentException(ex);
  }
}
