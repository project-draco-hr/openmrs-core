{
  EncounterService es=Context.getEncounterService();
  LocationService ls=Context.getLocationService();
  DateFormat dateFormat=Context.getDateFormat();
  velocityContext.put("date",dateFormat);
  Calendar cal=Calendar.getInstance();
  Date start;
  Date end;
  String startDate=request.getParameter("startDate");
  String endDate=request.getParameter("endDate");
  String location=request.getParameter("location");
  if (startDate != null && startDate.length() != 0) {
    try {
      cal.setTime(dateFormat.parse(startDate));
    }
 catch (    ParseException e) {
      throw new ServletException("Error parsing 'Start Date'",e);
    }
  }
 else {
    cal.setTime(new Date());
  }
  if (endDate == null || "".equals(endDate)) {
    while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
      cal.add(Calendar.DAY_OF_MONTH,-1);
    }
    start=cal.getTime();
    cal.add(Calendar.DAY_OF_MONTH,7);
    end=cal.getTime();
  }
 else {
    start=cal.getTime();
    try {
      cal.setTime(dateFormat.parse(endDate));
    }
 catch (    ParseException e) {
      throw new ServletException("Error parsing 'End Date'",e);
    }
    end=cal.getTime();
  }
  Collection<Encounter> encounters=null;
  if (location == null || "".equals(location)) {
    EncounterSearchCriteria encounterSearchCriteria=new EncounterSearchCriteriaBuilder().setIncludeVoided(true).setFromDate(start).setToDate(end).createEncounterSearchCriteria();
    encounters=es.getEncounters(encounterSearchCriteria);
  }
 else {
    Location locationObj=ls.getLocation(Integer.valueOf(location));
    EncounterSearchCriteria encounterSearchCriteria=new EncounterSearchCriteriaBuilder().setIncludeVoided(true).setLocation(locationObj).setFromDate(start).setToDate(end).createEncounterSearchCriteria();
    encounters=es.getEncounters(encounterSearchCriteria);
  }
  if (encounters != null) {
    velocityContext.put("encounters",encounters);
  }
 else {
    report.append("No Encounters found");
  }
}
