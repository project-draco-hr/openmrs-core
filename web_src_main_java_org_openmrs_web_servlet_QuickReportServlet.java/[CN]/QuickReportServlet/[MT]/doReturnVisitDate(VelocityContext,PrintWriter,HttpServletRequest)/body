{
  ObsService os=Context.getObsService();
  EncounterService es=Context.getEncounterService();
  ConceptService cs=Context.getConceptService();
  DateFormat dateFormat=Context.getDateFormat();
  Concept c=cs.getConcept(Integer.valueOf("5096"));
  Calendar cal=Calendar.getInstance();
  Date start;
  Date end;
  String startDate=request.getParameter("startDate");
  String endDate=request.getParameter("endDate");
  String location=request.getParameter("location");
  if (startDate != null && startDate.length() != 0) {
    try {
      cal.setTime(dateFormat.parse(startDate));
    }
 catch (    ParseException e) {
      throw new ServletException("Error parsing 'Start Date'",e);
    }
  }
 else {
    cal.setTime(new Date());
  }
  if (endDate == null || "".equals(endDate)) {
    while (cal.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
      cal.add(Calendar.DAY_OF_MONTH,-1);
    }
    start=cal.getTime();
    cal.add(Calendar.DAY_OF_MONTH,7);
    end=cal.getTime();
  }
 else {
    start=cal.getTime();
    try {
      cal.setTime(dateFormat.parse(endDate));
    }
 catch (    ParseException e) {
      throw new ServletException("Error parsing 'End Date'",e);
    }
    end=cal.getTime();
  }
  List<Obs> allObs=null;
  List<String> sort=new ArrayList<String>();
  sort.add("location.locationId asc");
  sort.add("obs.valueDatetime asc");
  List<Concept> questions=new ArrayList<Concept>();
  questions.add(c);
  List<OpenmrsConstants.PERSON_TYPE> personTypes=new ArrayList<OpenmrsConstants.PERSON_TYPE>();
  personTypes.add(OpenmrsConstants.PERSON_TYPE.PATIENT);
  if (location == null || "".equals(location)) {
    allObs=os.getObservations(null,null,questions,null,personTypes,null,sort,null,null,null,null,true);
  }
 else {
    Location locationObj=Context.getLocationService().getLocation(Integer.valueOf(location));
    List<Location> locations=new ArrayList<Location>();
    locations.add(locationObj);
    allObs=os.getObservations(null,null,questions,null,personTypes,locations,sort,null,null,null,null,true);
  }
  List<Obs> obs=new Vector<Obs>();
  for (  Obs o : allObs) {
    if (o.getValueDatetime() != null && o.getValueDatetime().after(start) && o.getValueDatetime().before(end)) {
      obs.add(o);
    }
  }
  velocityContext.put("observations",obs);
}
