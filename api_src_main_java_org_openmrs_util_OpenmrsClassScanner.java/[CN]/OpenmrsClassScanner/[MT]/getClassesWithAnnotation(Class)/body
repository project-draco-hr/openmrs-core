{
  if (annotationToClassMap != null) {
    if (annotationToClassMap.containsKey(annotationClass)) {
      return annotationToClassMap.get(annotationClass);
    }
  }
 else {
    annotationToClassMap=new HashMap<Class<?>,Set<Class<?>>>();
  }
  Set<Class<?>> types=new HashSet<Class<?>>();
  String pattern="classpath*:org/openmrs/**/*.class";
  try {
    Resource[] resources=resourceResolver.getResources(pattern);
    TypeFilter typeFilter=new AnnotationTypeFilter(annotationClass);
    for (    Resource resource : resources) {
      try {
        MetadataReader metadataReader=metadataReaderFactory.getMetadataReader(resource);
        if (typeFilter.match(metadataReader,metadataReaderFactory)) {
          String classname=metadataReader.getClassMetadata().getClassName();
          try {
            @SuppressWarnings("unchecked") Class<?> metadata=(Class<?>)OpenmrsClassLoader.getInstance().loadClass(classname);
            types.add(metadata);
          }
 catch (          ClassNotFoundException e) {
            throw new IOException("Class cannot be loaded: " + classname,e);
          }
        }
      }
 catch (      IOException e) {
        log.debug("Resource cannot be loaded: " + resource);
      }
    }
  }
 catch (  IOException ex) {
    log.error("Failed to look for classes with annocation" + annotationClass,ex);
  }
  annotationToClassMap.put(annotationClass,types);
  return types;
}
