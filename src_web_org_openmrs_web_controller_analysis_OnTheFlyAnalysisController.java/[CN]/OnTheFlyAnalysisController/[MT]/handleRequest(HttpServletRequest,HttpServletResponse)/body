{
  Map<String,Object> myModel=new HashMap<String,Object>();
  if (Context.isAuthenticated()) {
    ReportService reportService=Context.getReportService();
    PatientAnalysis analysis=Context.getPatientSetService().getMyPatientAnalysis();
    if ("true".equals(request.getParameter("remove_all_filters"))) {
      analysis.getPatientFilters().clear();
    }
    List<ShortcutSpec> shortcutList=shortcutHelper();
    if (reportService != null) {
      for (      ShortcutSpec s : shortcutList) {
        s.test(reportService);
        PatientFilter pf=analysis.getPatientFilters().get(s.getLabel());
        log.debug("Looked at ShortcutSpec " + s + " to see if there's a currently-selected filter for label "+ s.getLabel()+ " (keyset = "+ analysis.getPatientFilters().keySet()+ "). Result: "+ pf);
        if (pf != null) {
          log.debug("set current filter for " + s + " to "+ pf.getName());
          s.setCurrentFilter((PatientFilter)pf);
        }
      }
    }
    String[] filterIds=request.getParameterValues("patient_filter_id");
    if (filterIds != null) {
      for (      String filterId : filterIds) {
        try {
          analysis.addFilter(null,reportService.getPatientFilterById(new Integer(filterId.trim())));
        }
 catch (        Exception ex) {
        }
      }
    }
    Map<String,PatientFilter> filters=analysis.getPatientFilters();
    List availableFilters=new ArrayList<PatientFilter>(reportService.getAllPatientFilters());
    for (    PatientFilter pf : filters.values()) {
      availableFilters.remove(pf);
    }
    Collections.sort(availableFilters,new Comparator(){
      public int compare(      Object a,      Object b){
        if (a.getClass().equals(b.getClass()) && a instanceof Comparable)         return ((Comparable)a).compareTo((Comparable)b);
        AbstractReportObject left=(AbstractReportObject)a;
        AbstractReportObject right=(AbstractReportObject)b;
        int temp=left.getType().compareTo(right.getType());
        if (temp == 0) {
          temp=left.getSubType().compareTo(right.getSubType());
        }
        if (temp == 0) {
          temp=left.getName().compareTo(right.getName());
        }
        return temp;
      }
    }
);
    List<LinkSpec> linkList=linkHelper();
    Map<String,Object> filterPortletParams=new HashMap<String,Object>();
    filterPortletParams.put("patientAnalysis",analysis);
    filterPortletParams.put("suggestedFilters",availableFilters);
    filterPortletParams.put("deleteURL","analysis.form?method=removeFilter");
    filterPortletParams.put("addURL","analysis.form?method=addFilter");
    filterPortletParams.put("shortcuts",shortcutList);
    myModel.put("active_filters",filters);
    myModel.put("shortcuts",shortcutList);
    myModel.put("filterPortletParams",filterPortletParams);
    myModel.put("links",linkList);
    String viewMethod=request.getParameter("viewMethod");
    if (viewMethod != null && viewMethod.length() > 0)     myModel.put("viewMethod",viewMethod);
  }
  return new ModelAndView(formView,"model",myModel);
}
