{
  log.debug("Entering addFilter()...");
  ReportService reportService=Context.getReportService();
  PatientAnalysis analysis=Context.getPatientSetService().getMyPatientAnalysis();
  if ("true".equals(request.getParameter("remove_all_filters"))) {
    analysis.getPatientFilters().clear();
  }
  String[] idsToAdd=request.getParameterValues("patient_filter_id");
  if (idsToAdd != null) {
    for (    String patientFilterId : idsToAdd) {
      log.debug("trying to add anonymous filter " + patientFilterId);
      try {
        PatientFilter pf=reportService.getPatientFilterById(new Integer(patientFilterId));
        analysis.addFilter(null,pf);
        log.debug("added");
      }
 catch (      NumberFormatException ex) {
      }
    }
  }
  List<String> suffixesToUse=new ArrayList<String>();
{
    Enumeration en=request.getParameterNames();
    while (en.hasMoreElements()) {
      String s=(String)en.nextElement();
      if (s.startsWith("patient_filter_name")) {
        suffixesToUse.add(s.substring("patient_filter_name".length()));
      }
    }
  }
  for (  String suffix : suffixesToUse) {
    String nameToAdd=request.getParameter("patient_filter_name" + suffix);
    log.debug(suffix + " -> " + nameToAdd);
    if (nameToAdd != null) {
      String addAsKey=request.getParameter("patient_filter_key" + suffix);
      ShortcutOptionSpec opt=new ShortcutOptionSpec();
      if (request.getParameter("filter_spec" + suffix) != null) {
        opt.setValue(request.getParameter("filter_spec" + suffix));
      }
 else {
        opt.setValue(nameToAdd);
      }
      PatientFilter pf=null;
      if (!opt.isConcrete()) {
        try {
          Class filterClass=Class.forName(opt.getClassName());
          log.debug("about to call newInstance on " + filterClass);
          PatientFilter filterInstance=(PatientFilter)filterClass.newInstance();
          log.debug("result is " + filterInstance);
          for (          String argName : opt.getAllArgs()) {
            Object argVal=request.getParameter(argName);
            PropertyDescriptor pd=new PropertyDescriptor(argName,filterClass);
            if (argVal != null && ((String)argVal).trim().length() == 0) {
              argVal=null;
            }
 else             if (pd.getPropertyType().equals(Location.class)) {
              LocationEditor le=new LocationEditor();
              le.setAsText((String)argVal);
              argVal=le.getValue();
            }
 else             if (pd.getPropertyType().equals(Integer.class)) {
              try {
                argVal=Integer.valueOf((String)argVal);
              }
 catch (              Exception ex) {
              }
            }
 else             if (pd.getPropertyType().equals(Double.class)) {
              try {
                argVal=Double.valueOf((String)argVal);
              }
 catch (              Exception ex) {
              }
            }
 else             if (pd.getPropertyType().equals(Concept.class)) {
              ConceptEditor ce=new ConceptEditor();
              ce.setAsText((String)argVal);
              Concept concept=(Concept)ce.getValue();
              if (concept != null)               concept.getName(Context.getLocale());
              argVal=concept;
            }
 else             if (pd.getPropertyType().isEnum()) {
              List<Enum> constants=Arrays.asList((Enum[])pd.getPropertyType().getEnumConstants());
              for (              Enum e : constants) {
                if (e.toString().equals(argVal)) {
                  argVal=e;
                  break;
                }
              }
            }
            if (argVal != null) {
              log.debug("about to set " + argName + " to "+ argVal);
              pd.getWriteMethod().invoke(filterInstance,argVal);
            }
          }
          pf=filterInstance;
        }
 catch (        Exception ex) {
          log.error("Exception trying to instantiate parametrized filter " + opt,ex);
        }
      }
 else {
        pf=reportService.getPatientFilterByName(nameToAdd);
      }
      if (pf != null) {
        log.debug("adding filter " + pf + " to analysis");
        if (pf.isReadyToRun())         analysis.addFilter(addAsKey,pf);
 else         log.debug("skipping...not ready to run yet...");
      }
 else {
        log.warn("Can't find filter by that name: " + nameToAdd);
      }
    }
  }
  return new ModelAndView(new RedirectView("analysis.list?viewMethod=" + request.getParameter("viewMethod")));
}
