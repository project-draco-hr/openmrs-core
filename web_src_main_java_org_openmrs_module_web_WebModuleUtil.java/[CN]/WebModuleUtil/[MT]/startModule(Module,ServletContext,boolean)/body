{
  if (mod.getLog4j() != null) {
    DOMConfigurator.configure(mod.getLog4j().getDocumentElement());
  }
  if (log.isDebugEnabled())   log.debug("trying to start module " + mod);
  if (ModuleFactory.isModuleStarted(mod) && !mod.hasStartupError()) {
    String realPath=servletContext.getRealPath("");
    String path="/WEB-INF/module_messages@LANG@.properties";
    for (    Entry<String,Properties> entry : mod.getMessages().entrySet()) {
      if (log.isDebugEnabled())       log.debug("Copying message property file: " + entry.getKey());
      String lang="_" + entry.getKey();
      if (lang.equals("_en") || lang.equals("_"))       lang="";
      String currentPath=path.replace("@LANG@",lang);
      String absolutePath=realPath + currentPath;
      File file=new File(absolutePath);
      try {
        if (!file.exists())         file.createNewFile();
      }
 catch (      IOException ioe) {
        log.error("Unable to create new file " + file.getAbsolutePath() + " "+ ioe);
      }
      Properties props=entry.getValue();
      List<Object> keys=new Vector<Object>();
      keys.addAll(props.keySet());
      for (      Object obj : keys) {
        String key=(String)obj;
        if (!key.startsWith(mod.getModuleId())) {
          props.put(mod.getModuleId() + "." + key,props.get(key));
          props.remove(key);
        }
      }
      OpenmrsUtil.storeProperties(props,file,"Module: " + mod.getName() + " v"+ mod.getVersion());
    }
    log.debug("Done copying messages");
    boolean moduleNeedsContextRefresh=false;
    JarFile jarFile=null;
    try {
      File modFile=mod.getFile();
      jarFile=new JarFile(modFile);
      Enumeration<JarEntry> entries=jarFile.entries();
      while (entries.hasMoreElements()) {
        JarEntry entry=entries.nextElement();
        String name=entry.getName();
        log.debug("Entry name: " + name);
        if (name.startsWith("web/module/")) {
          String filepath=name.substring(11);
          StringBuffer absPath=new StringBuffer(realPath + "/WEB-INF");
          if (filepath.startsWith("tags/")) {
            filepath=filepath.substring(5);
            absPath.append("/tags/module/");
          }
 else {
            absPath.append("/view/module/");
          }
          absPath.append(mod.getModuleIdAsPath() + "/" + filepath);
          if (log.isDebugEnabled())           log.debug("Moving file from: " + name + " to "+ absPath);
          File outFile=new File(absPath.toString().replace("/",File.separator));
          if (entry.isDirectory()) {
            if (!outFile.exists()) {
              outFile.mkdirs();
            }
          }
 else {
            File parentDir=outFile.getParentFile();
            if (!parentDir.exists()) {
              parentDir.mkdirs();
            }
            OutputStream outStream=new FileOutputStream(outFile,false);
            InputStream inStream=jarFile.getInputStream(entry);
            OpenmrsUtil.copyFile(inStream,outStream);
            inStream.close();
            outStream.close();
          }
        }
 else         if (name.equals("moduleApplicationContext.xml") || name.equals("webModuleApplicationContext.xml")) {
          moduleNeedsContextRefresh=true;
        }
 else         if (name.equals(mod.getModuleId() + "Context.xml")) {
          String msg="DEPRECATED: '" + name + "' should be named 'moduleApplicationContext.xml' now. Please update/upgrade. ";
          throw new ModuleException(msg,mod.getModuleId());
        }
      }
    }
 catch (    IOException io) {
      log.warn("Unable to copy files from module " + mod.getModuleId() + " to the web layer",io);
    }
 finally {
      if (jarFile != null) {
        try {
          jarFile.close();
        }
 catch (        IOException io) {
          log.warn("Couldn't close jar file: " + jarFile.getName(),io);
        }
      }
    }
    InputStream inputStream=null;
    try {
      Document config=mod.getConfig();
      Element root=config.getDocumentElement();
      if (root.getElementsByTagName("dwr").getLength() > 0) {
        File f=new File(realPath + "/WEB-INF/dwr-modules.xml".replace("/",File.separator));
        inputStream=new FileInputStream(f);
        Document dwrmodulexml=getDWRModuleXML(inputStream,realPath);
        Element outputRoot=dwrmodulexml.getDocumentElement();
        Node node=root.getElementsByTagName("dwr").item(0);
        Node current=node.getFirstChild();
        while (current != null) {
          if ("allow".equals(current.getNodeName()) || "signatures".equals(current.getNodeName())) {
            ((Element)current).setAttribute("moduleId",mod.getModuleId());
            outputRoot.appendChild(dwrmodulexml.importNode(current,true));
          }
          current=current.getNextSibling();
        }
        moduleNeedsContextRefresh=true;
        OpenmrsUtil.saveDocument(dwrmodulexml,f);
      }
    }
 catch (    FileNotFoundException e) {
      throw new ModuleException(realPath + "/WEB-INF/dwr-modules.xml file doesn't exist.",e);
    }
 finally {
      if (inputStream != null) {
        try {
          inputStream.close();
        }
 catch (        IOException io) {
          log.error("Error while closing input stream",io);
        }
      }
    }
    String folderPath=realPath + "/WEB-INF/view/module/" + mod.getModuleIdAsPath();
    File outFile=new File(folderPath.replace("/",File.separator));
    outFile.deleteOnExit();
    if (moduleNeedsContextRefresh == false) {
      if (mod.getAdvicePoints() != null && mod.getAdvicePoints().size() > 0) {
        moduleNeedsContextRefresh=true;
      }
    }
    if (moduleNeedsContextRefresh && delayContextRefresh == false) {
      if (log.isDebugEnabled())       log.debug("Refreshing context for module" + mod);
      try {
        refreshWAC(servletContext,false,mod);
        try {
          if (mod.getModuleActivator() != null)           mod.getModuleActivator().started();
        }
 catch (        Throwable t) {
          log.warn("Unable to call module's Activator.started() method",t);
        }
        log.debug("Done Refreshing WAC");
      }
 catch (      Exception e) {
        String msg="Unable to refresh the WebApplicationContext";
        mod.setStartupErrorMessage(msg,e);
        if (log.isWarnEnabled())         log.warn(msg + " for module: " + mod.getModuleId(),e);
        try {
          ModuleFactory.stopModule(mod,true,true);
          stopModule(mod,servletContext,true);
        }
 catch (        Exception e2) {
          if (log.isWarnEnabled())           log.warn("Error while stopping a module that had an error on refreshWAC",e2);
        }
        refreshWAC(servletContext,false,mod);
      }
    }
    if (!delayContextRefresh) {
      if (ModuleFactory.isModuleStarted(mod)) {
        log.debug("Loading servlets and filters for module: " + mod);
        loadServlets(mod,servletContext);
        loadFilters(mod,servletContext);
      }
    }
    return (moduleNeedsContextRefresh && delayContextRefresh == true);
  }
  return false;
}
