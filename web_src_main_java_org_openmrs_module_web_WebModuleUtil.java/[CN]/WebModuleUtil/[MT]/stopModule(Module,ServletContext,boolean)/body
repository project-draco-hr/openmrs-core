{
  String moduleId=mod.getModuleId();
  String modulePackage=mod.getPackageName();
  for (  Module dependentModule : ModuleFactory.getStartedModules()) {
    if (!dependentModule.equals(mod) && dependentModule.getRequiredModules().contains(modulePackage))     stopModule(dependentModule,servletContext,skipRefresh);
  }
  String realPath=servletContext.getRealPath("");
  String absPath=realPath + "/WEB-INF/view/module/" + moduleId;
  File moduleWebFolder=new File(absPath.replace("/",File.separator));
  if (moduleWebFolder.exists()) {
    try {
      OpenmrsUtil.deleteDirectory(moduleWebFolder);
    }
 catch (    IOException io) {
      log.warn("Couldn't delete: " + moduleWebFolder.getAbsolutePath(),io);
    }
  }
  unloadServlets(mod);
  unloadFilters(mod);
  InputStream inputStream=null;
  try {
    Document config=mod.getConfig();
    Element root=config.getDocumentElement();
    if (root.getElementsByTagName("dwr").getLength() > 0) {
      File f=new File(realPath + "/WEB-INF/dwr-modules.xml".replace("/",File.separator));
      inputStream=new FileInputStream(f);
      Document dwrmodulexml=getDWRModuleXML(inputStream,realPath);
      Element outputRoot=dwrmodulexml.getDocumentElement();
      NodeList nodeList=outputRoot.getChildNodes();
      int i=0;
      while (i < nodeList.getLength()) {
        Node current=nodeList.item(i);
        if ("allow".equals(current.getNodeName()) || "signatures".equals(current.getNodeName())) {
          NamedNodeMap attrs=current.getAttributes();
          Node attr=attrs.getNamedItem("moduleId");
          if (attr != null && moduleId.equals(attr.getNodeValue())) {
            outputRoot.removeChild(current);
          }
 else           i++;
        }
 else         i++;
      }
      OpenmrsUtil.saveDocument(dwrmodulexml,f);
    }
  }
 catch (  FileNotFoundException e) {
    throw new ModuleException(realPath + "/WEB-INF/dwr-modules.xml file doesn't exist.",e);
  }
 finally {
    if (inputStream != null) {
      try {
        inputStream.close();
      }
 catch (      IOException io) {
        log.error("Error while closing input stream",io);
      }
    }
  }
  if (skipRefresh == false) {
    refreshWAC(servletContext,false,null);
  }
}
