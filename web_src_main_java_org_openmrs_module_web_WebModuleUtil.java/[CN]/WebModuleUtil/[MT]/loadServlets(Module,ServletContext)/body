{
  Element rootNode=mod.getConfig().getDocumentElement();
  NodeList servletTags=rootNode.getElementsByTagName("servlet");
  for (int i=0; i < servletTags.getLength(); i++) {
    Node node=servletTags.item(i);
    NodeList childNodes=node.getChildNodes();
    String name="", className="";
    for (int j=0; j < childNodes.getLength(); j++) {
      Node childNode=childNodes.item(j);
      if ("servlet-name".equals(childNode.getNodeName())) {
        if (childNode.getTextContent() != null)         name=childNode.getTextContent().trim();
      }
 else       if ("servlet-class".equals(childNode.getNodeName())) {
        if (childNode.getTextContent() != null)         className=childNode.getTextContent().trim();
      }
    }
    if (name.length() == 0 || className.length() == 0) {
      log.warn("both 'servlet-name' and 'servlet-class' are required for the 'servlet' tag. Given '" + name + "' and '"+ className+ "' for module "+ mod.getName());
      continue;
    }
    HttpServlet httpServlet=null;
    try {
      httpServlet=(HttpServlet)ModuleFactory.getModuleClassLoader(mod).loadClass(className).newInstance();
    }
 catch (    ClassNotFoundException e) {
      log.warn("Class not found for servlet " + name + " for module "+ mod.getName(),e);
      continue;
    }
catch (    IllegalAccessException e) {
      log.warn("Class cannot be accessed for servlet " + name + " for module "+ mod.getName(),e);
      continue;
    }
catch (    InstantiationException e) {
      log.warn("Class cannot be instantiated for servlet " + name + " for module "+ mod.getName(),e);
      continue;
    }
    try {
      log.debug("Initializing " + name + " servlet. - "+ httpServlet+ ".");
      ServletConfig servletConfig=new ModuleServlet.SimpleServletConfig(name,servletContext);
      httpServlet.init(servletConfig);
    }
 catch (    Exception e) {
      log.warn("Unable to initialize servlet: ",e);
      throw new ModuleException("Unable to initialize servlet: " + httpServlet,mod.getModuleId(),e);
    }
    HttpServlet otherServletUsingSameName=moduleServlets.get(name);
    if (otherServletUsingSameName != null) {
      String otherServletName=otherServletUsingSameName.getClass().getPackage() + "." + otherServletUsingSameName.getClass().getName();
      throw new ModuleException("A servlet mapping with name " + name + " is already in use and pointing at: "+ otherServletName+ " from another installed module and this module is trying"+ " to use that same name.  Either the module attempting to be installed ("+ mod.getModuleId()+ ") will not work or the other one will not.  Please consult the developers of these two"+ " modules to sort this out.");
    }
    log.debug("Caching the " + name + " servlet.");
    moduleServlets.put(name,httpServlet);
  }
}
