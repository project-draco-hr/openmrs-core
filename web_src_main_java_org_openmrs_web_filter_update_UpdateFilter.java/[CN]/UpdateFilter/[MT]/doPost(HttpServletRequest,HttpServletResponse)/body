{
  String page=httpRequest.getParameter("page");
  Map<String,Object> referenceMap=new HashMap<String,Object>();
  if (httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE) != null)   referenceMap.put(FilterUtil.LOCALE_ATTRIBUTE,httpRequest.getSession().getAttribute(FilterUtil.LOCALE_ATTRIBUTE));
  if (DEFAULT_PAGE.equals(page)) {
    String username=httpRequest.getParameter("username");
    String password=httpRequest.getParameter("password");
    log.debug("Attempting to authenticate user: " + username);
    if (authenticateAsSuperUser(username,password)) {
      log.debug("Authentication successful.  Redirecting to 'reviewupdates' page.");
      authenticatedSuccessfully=true;
      referenceMap.put("isDatabaseUpdateInProgress",isDatabaseUpdateInProgress);
      if (isDatabaseUpdateInProgress) {
        referenceMap.put("updateJobStarted",true);
        httpResponse.setContentType("text/html");
        renderTemplate(REVIEW_CHANGES,referenceMap,httpResponse);
        return;
      }
      if (!isLockReleased() && DatabaseUpdater.isLocked()) {
        try {
          DatabaseUpdater.releaseDatabaseLock();
          setLockReleased(true);
        }
 catch (        LockException e) {
        }
        model.updateChanges();
      }
      String localeParameter=FilterUtil.restoreLocale(username);
      httpRequest.getSession().setAttribute(FilterUtil.LOCALE_ATTRIBUTE,localeParameter);
      referenceMap.put(FilterUtil.LOCALE_ATTRIBUTE,localeParameter);
      renderTemplate(REVIEW_CHANGES,referenceMap,httpResponse);
    }
 else {
      try {
        log.debug("Sleeping for 3 seconds because of a bad username/password");
        Thread.sleep(3000);
      }
 catch (      InterruptedException e) {
        log.error("Unable to sleep",e);
        throw new ServletException("Got interrupted while trying to sleep thread",e);
      }
      errors.put(ErrorMessageConstants.UPDATE_ERROR_UNABLE_AUTHENTICATE,null);
      renderTemplate(DEFAULT_PAGE,referenceMap,httpResponse);
    }
  }
 else   if (REVIEW_CHANGES.equals(page)) {
    if (!authenticatedSuccessfully) {
      renderTemplate(DEFAULT_PAGE,referenceMap,httpResponse);
      return;
    }
    if (!isDatabaseUpdateInProgress) {
      isDatabaseUpdateInProgress=true;
      updateJob=new UpdateFilterCompletion();
      updateJob.start();
      referenceMap.put("updateJobStarted",true);
    }
 else {
      referenceMap.put("isDatabaseUpdateInProgress",true);
      referenceMap.put("updateJobStarted",true);
    }
    renderTemplate(REVIEW_CHANGES,referenceMap,httpResponse);
  }
 else   if (PROGRESS_VM_AJAXREQUEST.equals(page)) {
    httpResponse.setContentType("text/json");
    httpResponse.setHeader("Cache-Control","no-cache");
    Map<String,Object> result=new HashMap<String,Object>();
    if (updateJob != null) {
      result.put("hasErrors",updateJob.hasErrors());
      if (updateJob.hasErrors()) {
        errors.putAll(updateJob.getErrors());
      }
      if (updateJob.hasWarnings() && updateJob.getExecutingChangesetId() == null) {
        result.put("hasWarnings",updateJob.hasWarnings());
        StringBuilder sb=new StringBuilder("<ul>");
        for (        String warning : updateJob.getUpdateWarnings())         sb.append("<li>" + warning + "</li>");
        sb.append("</ul>");
        result.put("updateWarnings",sb.toString());
        result.put("updateLogFile",StringUtils.replace(OpenmrsUtil.getApplicationDataDirectory() + DatabaseUpdater.DATABASE_UPDATES_LOG_FILE,"\\","\\\\"));
        updateJob.hasUpdateWarnings=false;
        updateJob.getUpdateWarnings().clear();
      }
      result.put("updatesRequired",updatesRequired());
      result.put("message",updateJob.getMessage());
      result.put("changesetIds",updateJob.getChangesetIds());
      result.put("executingChangesetId",updateJob.getExecutingChangesetId());
      Appender appender=Logger.getRootLogger().getAppender("MEMORY_APPENDER");
      if (appender instanceof MemoryAppender) {
        MemoryAppender memoryAppender=(MemoryAppender)appender;
        List<String> logLines=memoryAppender.getLogLines();
        if (logLines.size() > 5)         logLines=logLines.subList(logLines.size() - 5,logLines.size());
        result.put("logLines",logLines);
      }
 else {
        result.put("logLines",new ArrayList<String>());
      }
    }
    String jsonText=toJSONString(result,true);
    httpResponse.getWriter().write(jsonText);
  }
}
