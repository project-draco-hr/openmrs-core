{
  Connection connection=null;
  PreparedStatement statement=null;
  try {
    connection=DatabaseUpdater.getConnection();
    String select="select user_id, password, salt from users where (username = ? or system_id = ?) and retired = '0'";
    statement=connection.prepareStatement(select);
    statement.setString(1,usernameOrSystemId);
    statement.setString(2,usernameOrSystemId);
    if (statement.execute()) {
      ResultSet results=statement.getResultSet();
      if (results.next()) {
        Integer userId=results.getInt(1);
        DatabaseUpdater.setAuthenticatedUserId(userId);
        String storedPassword=results.getString(2);
        String salt=results.getString(3);
        String passwordToHash=password + salt;
        boolean result=Security.hashMatches(storedPassword,passwordToHash) && isSuperUser(connection,userId);
        statement.close();
        return result;
      }
    }
    statement.close();
  }
 catch (  Exception e) {
    log.error("Error while trying to authenticate as super user. Ignore this if you are upgrading from OpenMRS 1.5 to 1.6",e);
    try {
      String select="select user_id, password, salt from users where (username = ? or system_id = ?) and voided = '0'";
      statement=connection.prepareStatement(select);
      statement.setString(1,usernameOrSystemId);
      statement.setString(2,usernameOrSystemId);
      if (statement.execute()) {
        ResultSet results=statement.getResultSet();
        if (results.next()) {
          Integer userId=results.getInt(1);
          DatabaseUpdater.setAuthenticatedUserId(userId);
          String storedPassword=results.getString(2);
          String salt=results.getString(3);
          String passwordToHash=password + salt;
          return Security.hashMatches(storedPassword,passwordToHash) && isSuperUser(connection,userId);
        }
      }
    }
 catch (    Exception t2) {
      log.error("Error while trying to authenticate as super user (voided version)",e);
    }
  }
 finally {
    try {
      if (statement != null && !statement.isClosed()) {
        statement.close();
      }
    }
 catch (    SQLException e) {
      log.warn("Error while closing statement");
    }
    if (connection != null) {
      try {
        connection.close();
      }
 catch (      SQLException e) {
        log.debug("Error while closing the database",e);
      }
    }
  }
  return false;
}
